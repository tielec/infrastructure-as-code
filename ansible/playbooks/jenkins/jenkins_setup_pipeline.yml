---
# jenkins_setup_pipeline.yml
# Jenkins環境構築の全体フローを管理するプレイブック
# 各deploy_jenkins_*.ymlプレイブックを順番に実行
#
# 使用方法 (ansibleディレクトリから実行):
#   ansible-playbook playbooks/jenkins/jenkins_setup_pipeline.yml -e "env=dev"
#   ansible-playbook playbooks/jenkins/jenkins_setup_pipeline.yml -e "env=dev run_network=true run_security=false"

- name: Jenkins Infrastructure Setup Pipeline - Start
  hosts: localhost
  connection: local
  gather_facts: no
  
  vars:
    # 環境名はコマンドラインから指定可能
    env_name: "{{ env | default('dev') }}"
  
  tasks:
    - name: Display setup information
      ansible.builtin.debug:
        msg: |
          Jenkins Infrastructure Setup Pipeline
          ==================================
          Environment: {{ env_name }}
          Starting infrastructure deployment...

# SSMパラメータストアの初期化（最初に実行）
- import_playbook: deploy/deploy_jenkins_ssm_init.yml
  vars:
    env: "{{ env | default('dev') }}"
  when: run_ssm_init | default(true) | bool
  tags:
    - ssm-init
    - always

# ネットワークインフラのデプロイ
- import_playbook: deploy/deploy_jenkins_network.yml
  vars:
    env: "{{ env | default('dev') }}"
  when: run_network | default(true) | bool
  tags:
    - network

# セキュリティグループのデプロイ
- import_playbook: deploy/deploy_jenkins_security.yml
  vars:
    env: "{{ env | default('dev') }}"
  when: run_security | default(true) | bool
  tags:
    - security

# NATインスタンスのデプロイ
# IPv4アウトバウンド通信用（IPv6とのハイブリッド構成）
- import_playbook: deploy/deploy_jenkins_nat.yml
  vars:
    env: "{{ env | default('dev') }}"
  when: run_nat | default(true) | bool
  tags:
    - nat

# ストレージ（EFS）のデプロイ
- import_playbook: deploy/deploy_jenkins_storage.yml
  vars:
    env: "{{ env | default('dev') }}"
  when: run_storage | default(true) | bool
  tags:
    - storage

# ロードバランサーのデプロイ
- import_playbook: deploy/deploy_jenkins_loadbalancer.yml
  vars:
    env: "{{ env | default('dev') }}"
  when: run_loadbalancer | default(true) | bool
  tags:
    - loadbalancer

# Jenkinsコントローラーのデプロイ
- import_playbook: deploy/deploy_jenkins_controller.yml
  vars:
    env: "{{ env | default('dev') }}"
  when: run_controller | default(true) | bool
  tags:
    - controller

# Jenkinsコントローラーの設定
- import_playbook: deploy/deploy_jenkins_config.yml
  vars:
    env: "{{ env | default('dev') }}"
  when: run_config | default(true) | bool
  tags:
    - config

# Jenkins Agent AMI Builderのデプロイ
- import_playbook: deploy/deploy_jenkins_agent_ami.yml
  vars:
    env: "{{ env | default('dev') }}"
  when: run_agent_ami | default(true) | bool
  tags:
    - agent-ami

# Jenkinsエージェントのデプロイ
- import_playbook: deploy/deploy_jenkins_agent.yml
  vars:
    env: "{{ env | default('dev') }}"
  when: run_agent | default(true) | bool
  tags:
    - agent

# Jenkinsアプリケーション設定のデプロイ
- import_playbook: deploy/deploy_jenkins_application.yml
  vars:
    env: "{{ env | default('dev') }}"
  when: run_application | default(true) | bool
  tags:
    - application

- name: Setup Complete
  hosts: localhost
  connection: local
  gather_facts: no
  
  vars:
    env_name: "{{ env | default('dev') }}"
  
  tasks:
    - name: Display deployment summary
      ansible.builtin.debug:
        msg: |
          Jenkins Infrastructure Deployment Complete
          ==========================================
          
          Environment: {{ env_name }}
          
          All specified components have been processed for deployment.
          
          Next steps:
          1. Access Jenkins UI through the Load Balancer URL
          2. Complete initial setup if this is a new installation
          3. Verify all plugins and configurations are working