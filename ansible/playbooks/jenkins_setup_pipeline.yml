---
# jenkins_setup_pipeline.yml
# Jenkins環境構築の全体フローを管理するプレイブック

- name: Jenkins Infrastructure Setup Pipeline
  hosts: localhost
  connection: local
  gather_facts: yes
  
  vars:
    # 環境名はコマンドラインから指定可能
    env_name: "{{ env | default('dev') }}"
    # パスを明示的に定義
    scripts_dir: "{{ playbook_dir }}/../../scripts"
    pulumi_path: "{{ playbook_dir }}/../../pulumi"
  
  pre_tasks:
    # all.yml から変数を読み込む
    - name: Include group_vars/all.yml
      ansible.builtin.include_vars:
        file: "{{ playbook_dir }}/../inventory/group_vars/all.yml"
        
    # 必要な変数を設定
    - name: Set required variables from all.yml
      ansible.builtin.set_fact:
        project_name: "{{ infra.project_name }}"
        aws_region_name: "{{ infra.aws.default_region }}"
        network_project_name: "{{ infra.pulumi.network_project }}"
        security_project_name: "{{ infra.pulumi.security_project }}"
        nat_project_name: "{{ infra.pulumi.nat_project }}"
        storage_project_name: "{{ infra.pulumi.storage_project }}"
        loadbalancer_project_name: "{{ infra.pulumi.loadbalancer_project }}"
        controller_project_name: "{{ infra.pulumi.controller_project }}"
        agent_project_name: "{{ infra.pulumi.agent_project }}"
        agent_ami_project_name: "{{ infra.pulumi.agent_ami_project | default('jenkins-agent-ami') }}"
        config_project_name: "{{ infra.pulumi.config_project }}"
        application_project_name: "{{ infra.pulumi.application_project | default('jenkins-application') }}"
        jenkins_version: "{{ version | default(jenkins.version) }}"
        jenkins_color: "{{ color | default(jenkins.color) }}"
        recovery_mode: "{{ recovery | default(jenkins.recovery_mode) }}"
        git_repo: "{{ git_repo | default(jenkins.git.repo) }}"
        git_branch: "{{ git_branch | default(jenkins.git.branch) }}"
        # NAT設定
        high_availability_mode: "{{ infra.nat.high_availability_mode | default(false) }}"
        nat_instance_type: "{{ infra.nat.instance_type | default('t4g.nano') }}"
        key_name: "{{ infra.aws.key_name | default('') }}"

  roles:
    - aws_setup
    - pulumi_helper
    
  tasks:
    # SSMパラメータストアの初期化（最初に実行）
    - name: Initialize SSM Parameter Store
      ansible.builtin.include_role:
        name: jenkins_ssm_init
      when: run_ssm_init | default(true) | bool
      tags:
        - ssm-init
        - always
    
    - name: Verify SSM initialization
      ansible.builtin.fail:
        msg: "SSM parameters must be initialized before proceeding. Run 'ansible-playbook deploy_jenkins_ssm_init.yml' first."
      when: 
        - run_ssm_init | default(true) | bool
        - not (ssm_initialized | default(false) | bool)
    
    - name: Wait for SSM parameters to propagate
      ansible.builtin.pause:
        seconds: 5
      when: ssm_initialized | default(false) | bool
    
    - name: Check scripts directory exists
      ansible.builtin.stat:
        path: "{{ scripts_dir }}"
      register: scripts_dir_stat
      no_log: true  # 詳細な出力を抑制
      
    - name: Fail if scripts directory doesn't exist
      ansible.builtin.fail:
        msg: "Scripts directory doesn't exist: {{ scripts_dir }}"
      when: not scripts_dir_stat.stat.exists
      
    - name: Ensure all shell scripts have proper execute permissions
      ansible.builtin.find:
        paths: "{{ scripts_dir }}"
        patterns: "*.sh"
        recurse: yes
      register: script_files
      no_log: true  # ファイル一覧の詳細出力を抑制
      
    - name: Set execute permissions on shell scripts
      ansible.builtin.file:
        path: "{{ item.path }}"
        mode: "0755"
      loop: "{{ script_files.files }}"
      register: script_perm_updates
      no_log: true  # 詳細な出力を抑制
      
    - name: Display scripts that needed permission updates
      ansible.builtin.debug:
        msg: "実行権限を付与: {{ item.path | basename }}"
      loop: "{{ script_perm_updates.results }}"
      when: item.changed | default(false)
      loop_control:
        label: "{{ item.path | basename }}"  # ファイル名のみをラベルとして表示
        
    - name: Display pipeline information
      ansible.builtin.debug:
        msg: |
          Jenkins Infrastructure Setup Pipeline
          ==================================
          Project: {{ project_name }}
          Environment: {{ env_name }}
          AWS Region: {{ aws_region_name }}
          
          Pulumi Projects:
          - Network: {{ network_project_name }}
          - Security: {{ security_project_name }}
          - NAT: {{ nat_project_name }}
          - Storage: {{ storage_project_name }}
          - LoadBalancer: {{ loadbalancer_project_name }}
          - Controller: {{ controller_project_name }}
          - Agent: {{ agent_project_name }}
          - Agent AMI: {{ agent_ami_project_name }}
          - Config: {{ config_project_name }}
          - Application: {{ application_project_name }}
          
          NAT Configuration:
          - Mode: {{ 'High Availability (NAT Gateway)' if high_availability_mode else 'Normal (NAT Instance)' }}
          {% if not high_availability_mode %}
          - Instance Type: {{ nat_instance_type }}
          {% endif %}
    
    - name: Check Ansible version
      ansible.builtin.debug:
        msg: "Ansible version: {{ ansible_version.full }}"
    
    # ネットワークインフラのデプロイ
    - name: Deploy Network Infrastructure
      ansible.builtin.include_role:
        name: jenkins_network
      when: run_network | default(true) | bool
      
    # ネットワークデプロイが成功したらセキュリティグループをデプロイ
    - name: Deploy Security Groups
      ansible.builtin.include_role:
        name: jenkins_security
      when: 
        - network_deployed is defined and network_deployed
        - run_security | default(true) | bool
    
    # セキュリティグループデプロイが成功したらNATをデプロイ
    - name: Deploy NAT Infrastructure
      ansible.builtin.include_role:
        name: jenkins_nat
      when: 
        - network_deployed is defined and network_deployed
        - security_deployed is defined and security_deployed
        - run_nat | default(true) | bool
        
    # NAT、セキュリティグループデプロイが成功したらストレージ（EFS）をデプロイ
    - name: Deploy Storage Infrastructure (EFS)
      ansible.builtin.include_role:
        name: jenkins_storage
      when: 
        - network_deployed is defined and network_deployed
        - security_deployed is defined and security_deployed
        - nat_deployed is defined and nat_deployed
        - run_storage | default(true) | bool

    # ロードバランサーをデプロイ（ストレージの後に実行）
    - name: Deploy LoadBalancer Infrastructure
      ansible.builtin.include_role:
        name: jenkins_loadbalancer
      when: 
        - network_deployed is defined and network_deployed
        - security_deployed is defined and security_deployed
        - nat_deployed is defined and nat_deployed
        - storage_deployed is defined and storage_deployed
        - run_loadbalancer | default(true) | bool        

    # Jenkinsコントローラーをデプロイ
    - name: Deploy Jenkins Controller
      ansible.builtin.include_role:
        name: jenkins_controller
      when: 
        - network_deployed is defined and network_deployed
        - security_deployed is defined and security_deployed
        - nat_deployed is defined and nat_deployed
        - storage_deployed is defined and storage_deployed
        - loadbalancer_deployed is defined and loadbalancer_deployed
        - run_controller | default(true) | bool
      register: controller_deploy_result
      
    # controller_deployedを明示的に設定
    - name: Set controller deployment status
      ansible.builtin.set_fact:
        controller_deployed: "{{ controller_deploy_result is defined and controller_deploy_result.rc is not defined }}"
      when: controller_deploy_result is defined
        
    # 設定ステータスをデバッグ表示
    - name: Debug controller deployment status
      ansible.builtin.debug:
        msg: "Controller deployment status: {{ controller_deployed | default(false) }}"

    # Jenkinsコントローラーの設定
    - name: Configure Jenkins Controller
      ansible.builtin.include_role:
        name: jenkins_config
      when: 
        - controller_deployed | default(false) | bool
        - run_config | default(true) | bool
      register: config_deploy_result
      
    # config_deployedを明示的に設定
    - name: Set config deployment status
      ansible.builtin.set_fact:
        config_deployed: "{{ config_deploy_result is defined and config_deploy_result.rc is not defined }}"
      when: config_deploy_result is defined
        
    # 設定ステータスをデバッグ表示
    - name: Debug config deployment status
      ansible.builtin.debug:
        msg: "Config deployment status: {{ config_deployed | default(false) }}"

    # Jenkins Agent AMI Builderをデプロイ（オプション）
    - name: Deploy Jenkins Agent AMI Builder
      ansible.builtin.include_role:
        name: jenkins_agent_ami
      when:
        - network_deployed is defined and network_deployed
        - security_deployed is defined and security_deployed
        - run_agent_ami | default(false) | bool
      register: agent_ami_deploy_result

    # agent_ami_deployedを明示的に設定
    - name: Set agent AMI deployment status
      ansible.builtin.set_fact:
        agent_ami_deployed: "{{ agent_ami_deploy_result is defined and agent_ami_deploy_result.rc is not defined }}"
      when: agent_ami_deploy_result is defined

    # Jenkinsエージェントをデプロイ
    - name: Deploy Jenkins Agent
      ansible.builtin.include_role:
        name: jenkins_agent
      vars:
        min_capacity: "{{ agent_min_capacity | default(0) }}"
        max_capacity: "{{ agent_max_capacity | default(10) }}"
        spot_price: "{{ agent_spot_price | default('0.10') }}"
        instance_type: "{{ agent_instance_type | default('t3.medium') }}"
      when: 
        - controller_deployed | default(false) | bool
        - run_agent | default(true) | bool
      register: agent_deploy_result
      
    # agent_deployedを明示的に設定
    - name: Set agent deployment status
      ansible.builtin.set_fact:
        agent_deployed: "{{ agent_deploy_result is defined and agent_deploy_result.rc is not defined }}"
      when: agent_deploy_result is defined

    # Jenkinsアプリケーション設定をデプロイ
    - name: Deploy Jenkins Application Configuration
      ansible.builtin.include_role:
        name: jenkins_application
      vars:
        # アプリケーション設定パラメータ
        update_repo: "{{ app_update_repo | default(true) }}"
        jenkins_version: "{{ app_jenkins_version | default('latest') }}"
        install_plugins: "{{ app_install_plugins | default(true) }}"
        restart_jenkins: "{{ app_restart_jenkins | default(true) }}"
      when: 
        - config_deployed | default(false) | bool
        - run_application | default(true) | bool
      register: application_deploy_result
      
    # application_deployedを明示的に設定
    - name: Set application deployment status
      ansible.builtin.set_fact:
        application_deployed: "{{ application_deploy_result is defined and application_deploy_result.rc is not defined }}"
      when: application_deploy_result is defined
        
    # 設定ステータスをデバッグ表示
    - name: Debug application deployment status
      ansible.builtin.debug:
        msg: "Application deployment status: {{ application_deployed | default(false) }}"

    # デプロイメント結果サマリー
    - name: Deployment Summary
      ansible.builtin.debug:
        msg: |
          Jenkins Infrastructure Deployment Summary
          =======================================
          Network: {{ network_deployed | default(false) }}
          Security: {{ security_deployed | default(false) }}
          NAT: {{ nat_deployed | default(false) }} ({{ nat_type | default('N/A') }})
          Storage (EFS): {{ storage_deployed | default(false) }}
          Load Balancer: {{ loadbalancer_deployed | default(false) }}
          Controller: {{ controller_deployed | default(false) }}
          Configuration: {{ config_deployed | default(false) }}
          Application: {{ application_deployed | default(false) }}
          Agent AMI Builder: {{ agent_ami_deployed | default(false) }}
          Agent: {{ agent_deployed | default(false) }}
