---
# lambda_setup_pipeline.yml
# Lambda API環境構築の全体フローを管理するマスタープレイブック
# 個別のコンポーネントplaybookを順番に呼び出します

- name: Lambda API Infrastructure Setup Pipeline
  hosts: localhost
  connection: local
  gather_facts: yes
  
  vars:
    # 環境名はコマンドラインから指定可能
    env_name: "{{ env | default('dev') }}"
    # パスを明示的に定義
    scripts_dir: "{{ inventory_dir }}/../../scripts"
    pulumi_path: "{{ inventory_dir }}/../../pulumi"
    # Phase 1/2の切り替え
    enable_database: "{{ create_database | default(false) }}"
    enable_websocket: "{{ create_websocket | default(false) }}"
  
  pre_tasks:
    # all.yml から変数を読み込む
    - name: Include group_vars/all.yml
      ansible.builtin.include_vars:
        file: "{{ inventory_dir }}/group_vars/all.yml"
        
    # 必要な変数を設定
    - name: Set required variables from all.yml
      ansible.builtin.set_fact:
        project_name: "{{ lambda_api_infra.project_name }}"
        aws_region_name: "{{ lambda_api_infra.aws.default_region }}"
        environment_config: "{{ lambda_api_infra.environments[env_name] }}"
        
    - name: Check for check mode
      ansible.builtin.debug:
        msg: |
          ⚠️  WARNING: Check mode is not supported for Pulumi deployments.
          Pulumi has its own preview functionality. Use 'preview_only=true' instead.
      when: ansible_check_mode

    - name: Fail if check mode
      ansible.builtin.fail:
        msg: "Check mode is not supported. Use 'preview_only=true' instead."
      when: ansible_check_mode
      
    - name: Display pipeline information
      ansible.builtin.debug:
        msg: |
          ==========================================
          Lambda API Infrastructure Setup Pipeline
          ==========================================
          Project: {{ project_name }}
          Environment: {{ env_name }}
          AWS Region: {{ aws_region_name }}
          Phase: {{ 'Phase 2 (with Database)' if enable_database else 'Phase 1 (API Only)' }}
          
          Deployment Order:
          1. SSM Parameters Initialization
          2. Network Infrastructure
          3. Security Groups
          4. VPC Endpoints
          5. NAT Infrastructure
          6. Lambda Functions
          7. API Gateway
          8. WAF (optional)
          9. WebSocket API (optional)
          10. Database (Phase 2)
          ==========================================
    
  tasks:
    # 1. SSMパラメータ初期化
    - name: SSM Parameters Initialization
      ansible.builtin.import_playbook: lambda/lambda_ssm_init.yml
      vars:
        env: "{{ env_name }}"
      when: run_ssm_init | default(true) | bool
    
    # 2. ネットワークインフラ
    - name: Network Infrastructure Setup
      ansible.builtin.import_playbook: lambda/lambda_network.yml
      vars:
        env: "{{ env_name }}"
      when: run_network | default(true) | bool
    
    # 3. セキュリティグループ
    - name: Security Groups Setup
      ansible.builtin.import_playbook: lambda/lambda_security.yml
      vars:
        env: "{{ env_name }}"
      when: run_security | default(true) | bool
    
    # 4. VPCエンドポイント
    - name: VPC Endpoints Setup
      ansible.builtin.import_playbook: lambda/lambda_vpce.yml
      vars:
        env: "{{ env_name }}"
      when: run_vpce | default(true) | bool
    
    # 5. NAT設定
    - name: NAT Infrastructure Setup
      ansible.builtin.import_playbook: lambda/lambda_nat.yml
      vars:
        env: "{{ env_name }}"
      when: run_nat | default(true) | bool
    
    # 6. Lambda関数
    - name: Lambda Functions Deployment
      ansible.builtin.import_playbook: lambda/lambda_functions.yml
      vars:
        env: "{{ env_name }}"
      when: run_functions | default(true) | bool
    
    # 7. API Gateway
    - name: API Gateway Setup
      ansible.builtin.import_playbook: lambda/lambda_api_gateway.yml
      vars:
        env: "{{ env_name }}"
      when: run_api_gateway | default(true) | bool
    
    # 8. WAF（オプション）
    - name: WAF Setup
      ansible.builtin.import_playbook: lambda/lambda_waf.yml
      vars:
        env: "{{ env_name }}"
      when: 
        - run_waf | default(true) | bool
        - environment_config.enable_waf | default(false)
    
    # 9. WebSocket API（オプション）
    - name: WebSocket API Setup
      ansible.builtin.import_playbook: lambda/lambda_websocket.yml
      vars:
        env: "{{ env_name }}"
      when: 
        - run_websocket | default(true) | bool
        - enable_websocket | bool
    
    # 10. データベース（Phase 2）
    - name: Database Infrastructure Setup
      ansible.builtin.import_playbook: lambda/lambda_database.yml
      vars:
        env: "{{ env_name }}"
      when: 
        - run_database | default(true) | bool
        - enable_database | bool
    
    # デプロイメント完了メッセージ
    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          ==========================================
          Lambda API Infrastructure Setup Complete!
          ==========================================
          
          All components have been successfully deployed.
          
          To access your API:
          1. Get the API endpoint from API Gateway outputs
          2. Use the API key for authentication
          
          To destroy this infrastructure:
          ansible-playbook playbooks/lambda_teardown_pipeline.yml -e "env={{ env_name }}"
          ==========================================