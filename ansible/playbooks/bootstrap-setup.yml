# bootstrap-setup.yml
# Jenkinsインフラをデプロイするためのブートストラップ環境の設定
# ARM64 (t4g) インスタンス対応版 - Amazon Linux 2023
# 最新のライブラリとコレクションを使用

- name: Bootstrap Environment Setup for Amazon Linux 2023
  hosts: localhost
  connection: local
  gather_facts: yes
  
  vars:
    nodejs_version: "20"  # LTS version
    user_home: "/home/ec2-user"
    aws_credentials_script_path: "{{ inventory_dir }}/../../scripts/aws/setup-aws-credentials.sh"
    java_version: "21"
    arch: "{{ ansible_architecture }}"
    # ec2-userのローカルbinディレクトリを含むPATH
    ansible_env_path: "/home/ec2-user/.local/bin:/usr/local/bin:/usr/bin:/bin"
  
  tasks:
    - name: Display start message
      ansible.builtin.debug:
        msg: |
          Starting Bootstrap Environment Setup
          - Architecture: {{ arch }}
          - OS: Amazon Linux 2023
          - Python: {{ ansible_python_version }}
        
    # システムアップデート
    - name: Update system packages
      ansible.builtin.dnf:
        name: '*'
        state: latest
      become: yes
      
    # 必要な開発ツールのインストール
    - name: Install development tools
      ansible.builtin.dnf:
        name:
          - gcc
          - gcc-c++
          - make
          - git
          - tar
          - unzip
          - which
          # curl-minimalがデフォルトでインストールされているため、curlは除外
          - wget
        state: present
      become: yes
      
    # curlがインストールされているか確認（curl-minimalでも可）
    - name: Check curl availability
      ansible.builtin.command: curl --version
      register: curl_check
      changed_when: false
      failed_when: false
      
    - name: Display curl status
      ansible.builtin.debug:
        msg: "Curl status: {{ 'Available' if curl_check.rc == 0 else 'Not available' }}"
        
    # AWS CLI v2のインストール (ARM64対応)
    - name: Check if AWS CLI v2 is installed
      ansible.builtin.shell: aws --version
      register: aws_cli_check
      changed_when: false
      failed_when: false
      
    - name: Install AWS CLI v2
      when: aws_cli_check.rc != 0 or 'aws-cli/2' not in aws_cli_check.stdout
      block:
        - name: Set AWS CLI download URL based on architecture
          ansible.builtin.set_fact:
            aws_cli_url: "{{ 'https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip' if arch == 'aarch64' else 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' }}"
            
        - name: Download AWS CLI v2 installer
          ansible.builtin.get_url:
            url: "{{ aws_cli_url }}"
            dest: "/tmp/awscliv2.zip"
            mode: '0644'
          
        - name: Unzip AWS CLI v2 installer
          ansible.builtin.unarchive:
            src: "/tmp/awscliv2.zip"
            dest: "/tmp"
            remote_src: yes
            
        - name: Install AWS CLI v2
          ansible.builtin.command: /tmp/aws/install
          become: yes
          args:
            creates: /usr/local/bin/aws
            
        - name: Clean up AWS CLI v2 installation files
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "/tmp/awscliv2.zip"
            - "/tmp/aws"
            
    # Node.js 20 LTSのインストール (NodeSource経由)
    - name: Check if Node.js is installed
      ansible.builtin.shell: node --version
      register: node_check
      changed_when: false
      failed_when: false
      
    - name: Install Node.js {{ nodejs_version }}
      when: node_check.rc != 0 or nodejs_version not in node_check.stdout
      block:
        - name: Add NodeSource repository
          ansible.builtin.shell: |
            curl -fsSL https://rpm.nodesource.com/setup_{{ nodejs_version }}.x | sudo bash -
            
        - name: Install Node.js
          ansible.builtin.dnf:
            name: nodejs
            state: present
          become: yes
            
    # Java 21のインストール (Amazon Corretto - ARM64対応)
    - name: Check if Java {{ java_version }} is installed
      ansible.builtin.shell: java -version 2>&1 | grep -E 'version "{{ java_version }}'
      register: java_check
      changed_when: false
      failed_when: false
      
    - name: Install Java {{ java_version }} (Amazon Corretto)
      when: java_check.rc != 0
      block:
        - name: Install Amazon Corretto {{ java_version }}
          ansible.builtin.dnf:
            name: "java-{{ java_version }}-amazon-corretto-devel"
            state: present
          become: yes
            
        - name: Set JAVA_HOME environment variable
          ansible.builtin.lineinfile:
            path: "/etc/profile.d/java.sh"
            line: |
              export JAVA_HOME=/usr/lib/jvm/java-{{ java_version }}-amazon-corretto
              export PATH=$JAVA_HOME/bin:$PATH
            create: yes
            mode: '0644'
          become: yes
            
    # Pulumiのインストール
    - name: Check if Pulumi is installed
      ansible.builtin.stat:
        path: "/usr/local/bin/pulumi"
      register: pulumi_check
      
    - name: Install Pulumi
      when: not pulumi_check.stat.exists
      block:
        - name: Download and install Pulumi
          ansible.builtin.shell: |
            curl -fsSL https://get.pulumi.com | sh -s -- --version latest
          environment:
            PULUMI_INSTALL_ARCH: "{{ 'arm64' if arch == 'aarch64' else 'amd64' }}"
            HOME: "/home/ec2-user"
          become: no
            
        - name: Create Pulumi symlink in system path
          ansible.builtin.file:
            src: "/home/ec2-user/.pulumi/bin/pulumi"
            dest: "/usr/local/bin/pulumi"
            state: link
          become: yes
          
        - name: Verify Pulumi installation
          ansible.builtin.command: pulumi version
          register: pulumi_version
          changed_when: false
          
        - name: Display Pulumi version
          ansible.builtin.debug:
            msg: "Installed Pulumi version: {{ pulumi_version.stdout }}"
    
    # Python環境の確認（Amazon Linux 2023はPython 3.9+を標準搭載）
    - name: Display Python version
      ansible.builtin.debug:
        msg: "Current Python version: {{ ansible_python_version }}"
    
    # Python パッケージの最新版インストール
    - name: Install Python packages for AWS (system-wide)
      ansible.builtin.dnf:
        name:
          - python3-boto3
          - python3-botocore
          - python3-jmespath
          - python3-urllib3
          - python3-cryptography
          - python3-pyyaml
          - python3-jsonschema
        state: latest
      become: yes
      
    # 追加のPythonパッケージ（pipで管理）
    - name: Check if ansible-core is already installed
      ansible.builtin.command: python3 -m pip show ansible-core
      register: ansible_core_check
      changed_when: false
      failed_when: false
      become: no
      
    - name: Display current ansible-core version
      ansible.builtin.debug:
        msg: "Current ansible-core: {{ ansible_core_check.stdout | regex_search('Version: ([0-9.]+)', '\\1') | first if ansible_core_check.rc == 0 else 'Not installed' }}"
      
    - name: Ensure additional Python packages are installed for ec2-user
      ansible.builtin.pip:
        name:
          - boto3
          - botocore
          - jmespath
        state: latest
        extra_args: --user
      become: no
      environment:
        PATH: "/home/ec2-user/.local/bin:/usr/local/bin:/usr/bin:/bin"
      when: ansible_core_check.rc == 0  # ansible-coreが既にインストールされている場合のみ
    
    # Mitogen for Ansibleのインストール（Ansible高速化）
    - name: Install Mitogen for Ansible
      block:
        - name: Check if Mitogen is already installed
          ansible.builtin.command: python3 -c "import ansible_mitogen"
          register: mitogen_check
          changed_when: false
          failed_when: false
          become: no
          
        - name: Install Mitogen for Ansible
          ansible.builtin.pip:
            name: mitogen
            state: latest
            extra_args: --user
          become: no
          environment:
            PATH: "/home/ec2-user/.local/bin:/usr/local/bin:/usr/bin:/bin"
          when: mitogen_check.rc != 0
          
        - name: Display Mitogen installation status
          ansible.builtin.debug:
            msg: "Mitogen for Ansible: {{ 'Already installed' if mitogen_check.rc == 0 else 'Newly installed' }}"
    
    # Ansible Collectionsのインストール
    - name: Install Ansible Collections
      block:
        - name: Create Ansible directories
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
          become: yes
          loop:
            - "/etc/ansible"
            - "/etc/ansible/collections"
            - "/usr/share/ansible/collections"
        
        - name: Create collections requirements file
          ansible.builtin.copy:
            dest: "/etc/ansible/collections/requirements.yml"
            content: |
              ---
              collections:
                - name: amazon.aws
                  version: ">=10.0.0,<11.0.0"
                - name: community.aws
                  version: ">=10.0.0,<11.0.0"
                - name: community.general
                  version: ">=11.0.0,<12.0.0"
                - name: ansible.posix
                  version: ">=2.0.0,<3.0.0"
                - name: community.docker
                  version: ">=4.0.0,<5.0.0"
            mode: '0644'
          become: yes
        
        - name: Check existing Ansible collections
          ansible.builtin.shell: |
            export ANSIBLE_COLLECTIONS_PATH=/usr/share/ansible/collections
            ansible-galaxy collection list 2>/dev/null | grep -E "(amazon\.aws|community\.aws|community\.general|ansible\.posix|community\.docker)" || true
          register: existing_collections
          changed_when: false
          failed_when: false
        
        - name: Install or update Ansible collections
          ansible.builtin.shell: |
            export PATH=/home/ec2-user/.local/bin:$PATH
            export ANSIBLE_COLLECTIONS_PATH=/usr/share/ansible/collections
            # ansible-galaxyコマンドのパスを取得
            ANSIBLE_GALAXY=$(which ansible-galaxy 2>/dev/null || echo "/home/ec2-user/.local/bin/ansible-galaxy")
            
            if [ -x "$ANSIBLE_GALAXY" ]; then
              echo "Using ansible-galaxy from: $ANSIBLE_GALAXY"
              # システム全体にインストール（重複を避けるため --force は使わない）
              sudo -E $ANSIBLE_GALAXY collection install -r /etc/ansible/collections/requirements.yml -p /usr/share/ansible/collections --upgrade
            else
              echo "ansible-galaxy not found, skipping collection installation"
              exit 1
            fi
          environment:
            ANSIBLE_COLLECTIONS_PATH: "/usr/share/ansible/collections"
            PATH: "/home/ec2-user/.local/bin:/usr/local/bin:/usr/bin:/bin"
          become: no
          register: collection_install
          changed_when: "'Installing' in collection_install.stdout or 'Upgrading' in collection_install.stdout"
          failed_when: false
        
        - name: Set Ansible collections path in profile
          ansible.builtin.lineinfile:
            path: "/etc/profile.d/ansible.sh"
            line: "export ANSIBLE_COLLECTIONS_PATH=/usr/share/ansible/collections"
            create: yes
            mode: '0644'
          become: yes
        
        - name: Verify collections installation
          ansible.builtin.shell: |
            export ANSIBLE_COLLECTIONS_PATH=/usr/share/ansible/collections
            ansible-galaxy collection list 2>/dev/null | grep -E "(amazon\.aws|community\.aws|community\.general|ansible\.posix|community\.docker)" || echo "No collections found"
          register: installed_collections
          changed_when: false
        
        - name: Display installed collections
          ansible.builtin.debug:
            msg: |
              Installed Ansible Collections:
              {{ installed_collections.stdout }}
    
    # Dockerのインストール（オプション）
    - name: Install Docker
      block:
        - name: Install Docker
          ansible.builtin.dnf:
            name: docker
            state: present
          become: yes
          
        - name: Start and enable Docker service
          ansible.builtin.systemd:
            name: docker
            state: started
            enabled: yes
          become: yes
          
        - name: Add ec2-user to docker group
          ansible.builtin.user:
            name: ec2-user
            groups: docker
            append: yes
          become: yes
      ignore_errors: yes  # Dockerのインストールが失敗してもセットアップを続行
    
    # インストール検証スクリプトの確認
    - name: Check if verify-installation.sh exists in repository
      ansible.builtin.stat:
        path: "{{ inventory_dir }}/../../bootstrap/verify-installation.sh"
      register: verify_script
      
    - name: Make verify-installation.sh executable
      ansible.builtin.file:
        path: "{{ inventory_dir }}/../../bootstrap/verify-installation.sh"
        mode: '0755'
      when: verify_script.stat.exists
      
    - name: Note about verification script
      ansible.builtin.debug:
        msg: |
          Verification script is available at:
          ~/infrastructure-as-code/bootstrap/verify-installation.sh
          
          You can also create a symlink for convenience:
          ln -s ~/infrastructure-as-code/bootstrap/verify-installation.sh ~/verify-installation.sh
        
    # Jenkins Agent接続用のディレクトリ作成
    - name: Create Jenkins agent work directory
      ansible.builtin.file:
        path: "{{ user_home }}/jenkins-agent"
        state: directory
        owner: ec2-user
        group: ec2-user
        mode: '0755'
        
    # README.txtの作成
    - name: Create detailed README file
      ansible.builtin.copy:
        dest: "{{ user_home }}/README.txt"
        content: |
          === Bootstrap Environment Setup Complete ===
          Amazon Linux 2023 - ARM64 ({{ arch }})
          
          Installed Tools and Versions:
          - AWS CLI v2 (latest)
          - Node.js {{ nodejs_version }} LTS
          - Java {{ java_version }} (Amazon Corretto)
          - Python 3.9+ (system default)
          - Ansible with latest AWS collections
          - Mitogen for Ansible (高速化)
          - Pulumi (latest)
          - Docker
          - Git
          
          Python Packages (latest versions):
          - boto3 (AWS SDK for Python)
          - botocore (Core functionality of boto3)
          - jmespath (JSON query language)
          - urllib3, cryptography, PyYAML, jsonschema
          
          Ansible Collections (managed versions):
          - amazon.aws (10.x)
          - community.aws (10.x)
          - community.general (11.x)
          - ansible.posix (2.x)
          - community.docker (4.x)
          
          === Quick Start ===
          
          1. Re-login or source the environment:
             source ~/.bashrc
             source /etc/profile.d/bootstrap-env.sh
          
          2. Verify installation:
             cd ~/infrastructure-as-code/bootstrap
             ./verify-installation.sh
          
          3. Install Ansible collections:
             ansible-galaxy collection install amazon.aws community.aws community.general ansible.posix
          
          4. Configure AWS credentials (if using IAM role, this is automatic):
             aws sts get-caller-identity
          
          5. Configure Pulumi:
             export PULUMI_ACCESS_TOKEN='your-token'
             pulumi login
             # Or use S3 backend:
             pulumi login s3://$(aws ssm get-parameter --name /bootstrap/pulumi/s3bucket-name --query 'Parameter.Value' --output text)
          
          6. Set up Git SSH keys:
             ssh-keygen -t ed25519 -C "your_email@example.com"
             cat ~/.ssh/id_ed25519.pub
             # Add the public key to your GitHub account
          
          7. Deploy infrastructure:
             cd ~/infrastructure-as-code/ansible/playbooks
             ansible-playbook jenkins_setup_pipeline.yml -e "env=dev"
          
          === Jenkins Agent Configuration ===
          
          To connect as Jenkins Agent:
          - Node type: SSH
          - Remote directory: /home/ec2-user/jenkins-agent
          - Java path: /usr/lib/jvm/java-{{ java_version }}-amazon-corretto
          
          === Notes ===
          
          - This is an ARM64 instance optimized for t4g instance types
          - All tools are installed with the latest stable versions
          - Docker is available for container-based builds
          - Python environment uses system Python 3.9+
          - Ansible and some Python packages are installed in user space (~/.local/bin)
          - Ansible Collections are installed system-wide (/usr/share/ansible/collections)
          - Always source ~/.bashrc or re-login after initial setup for PATH updates
          
          === Amazon Linux 2023 Specific ===
          
          - System packages are managed by dnf
          - Python packages from dnf are preferred over pip for system packages
          - User-specific tools are installed with --user flag
          - PATH includes ~/.local/bin for user-installed tools
          - ANSIBLE_COLLECTIONS_PATH is set to /usr/share/ansible/collections
          
          For issues or updates, check the project documentation.
        owner: ec2-user
        group: ec2-user
        mode: '0644'
        
    # 環境変数の設定
    - name: Create environment setup script for all users
      ansible.builtin.copy:
        dest: "/etc/profile.d/bootstrap-env.sh"
        content: |
          # Bootstrap environment variables
          export ANSIBLE_COLLECTIONS_PATH=/usr/share/ansible/collections
          export JAVA_HOME=/usr/lib/jvm/java-{{ java_version }}-amazon-corretto
          
          # User-specific PATH additions
          if [ -d "$HOME/.local/bin" ]; then
            export PATH=$HOME/.local/bin:$PATH
          fi
          
          if [ -d "$HOME/.pulumi/bin" ]; then
            export PATH=$HOME/.pulumi/bin:$PATH
          fi
          
          export PATH=$JAVA_HOME/bin:/usr/local/bin:$PATH
          
          # AWS region from instance metadata
          if [ -z "$AWS_DEFAULT_REGION" ]; then
            export AWS_DEFAULT_REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/region 2>/dev/null || echo "us-east-1")
          fi
        mode: '0644'
      become: yes

    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          ✅ Bootstrap environment setup completed successfully!
          
          Amazon Linux 2023 ({{ arch }}) with latest tools:
          - Python {{ ansible_python_version }}
          - Node.js {{ nodejs_version }} LTS
          - Java {{ java_version }}
          - Latest Ansible Collections (7.0+)
          - Mitogen for Ansible (高速化)
          - Latest Python packages
          
          Run './verify-installation.sh' to check the installation.
          
          AWS integration is ready with the latest boto3 and Ansible AWS collections.
          
          {% if collection_install is defined and collection_install.failed %}
          ⚠️  Note: Ansible collections installation failed during setup.
          Please run the following command manually:
          
          ansible-galaxy collection install amazon.aws community.aws community.general ansible.posix community.docker
          {% endif %}
