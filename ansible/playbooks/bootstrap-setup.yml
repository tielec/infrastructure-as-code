# bootstrap-setup.yml
# Jenkinsインフラをデプロイするためのブートストラップ環境の設定
# ARM64 (t4g) インスタンス対応版
# amazon.aws コレクション対応版

- name: Bootstrap Environment Setup
  hosts: localhost
  connection: local
  gather_facts: yes
  # ansible.cfgでbecomeが設定されているため、ここでの指定は不要
  
  vars:
    nodejs_version: "16.x"
    user_home: "/home/ec2-user"
    aws_credentials_script_path: "{{ playbook_dir }}/../scripts/aws-credentials.sh"
    java_version: "21"
    arch: "{{ ansible_architecture }}"
  
  tasks:
    - name: Display start message
      ansible.builtin.debug:
        msg: "Starting Bootstrap Environment Setup for {{ arch }} architecture"
        
    # AWS CLI v2のインストール (ARM64対応)
    - name: Check if AWS CLI v2 is installed
      ansible.builtin.shell: aws --version
      register: aws_cli_check
      changed_when: false
      failed_when: false
      
    - name: Install AWS CLI v2
      when: aws_cli_check.rc != 0 or 'aws-cli/2' not in aws_cli_check.stdout
      block:
        - name: Set AWS CLI download URL based on architecture
          ansible.builtin.set_fact:
            aws_cli_url: "{{ 'https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip' if arch == 'aarch64' else 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' }}"
            
        - name: Download AWS CLI v2 installer
          ansible.builtin.get_url:
            url: "{{ aws_cli_url }}"
            dest: "/tmp/awscliv2.zip"
            mode: '0644'
          
        - name: Unzip AWS CLI v2 installer
          ansible.builtin.unarchive:
            src: "/tmp/awscliv2.zip"
            dest: "/tmp"
            remote_src: yes
            
        - name: Install AWS CLI v2
          ansible.builtin.command: /tmp/aws/install
          args:
            creates: /usr/local/bin/aws
            
        - name: Clean up AWS CLI v2 installation files
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "/tmp/awscliv2.zip"
            - "/tmp/aws"
            
    # Node.jsのインストール (ARM64対応)
    - name: Check if Node.js is installed
      ansible.builtin.shell: node --version
      register: node_check
      changed_when: false
      failed_when: false
      
    - name: Install Node.js {{ nodejs_version }}
      when: node_check.rc != 0
      block:
        - name: Install development tools for Node.js
          ansible.builtin.yum:
            name:
              - gcc-c++
              - make
            state: present
            
        - name: Configure Node.js repository
          ansible.builtin.shell: |
            curl -sL https://rpm.nodesource.com/setup_{{ nodejs_version }} | bash -
          args:
            warn: false
            
        - name: Install Node.js packages
          ansible.builtin.yum:
            name: nodejs
            state: present
            
    # Java 21のインストール (Amazon Corretto - ARM64対応)
    - name: Check if Java {{ java_version }} is installed
      ansible.builtin.shell: java -version 2>&1 | grep -E 'version "{{ java_version }}'
      register: java_check
      changed_when: false
      failed_when: false
      
    - name: Install Java {{ java_version }} (Amazon Corretto)
      when: java_check.rc != 0
      block:
        - name: Debug architecture info
          ansible.builtin.debug:
            msg: "Detected architecture: {{ arch }}"
            
        - name: Download Amazon Corretto {{ java_version }} RPM for ARM64
          ansible.builtin.get_url:
            url: "https://corretto.aws/downloads/latest/amazon-corretto-{{ java_version }}-aarch64-linux-jdk.rpm"
            dest: "/tmp/amazon-corretto-{{ java_version }}-aarch64.rpm"
            mode: '0644'
          when: arch == 'aarch64'
          
        - name: Download Amazon Corretto {{ java_version }} RPM for x86_64
          ansible.builtin.get_url:
            url: "https://corretto.aws/downloads/latest/amazon-corretto-{{ java_version }}-x64-linux-jdk.rpm"
            dest: "/tmp/amazon-corretto-{{ java_version }}-x64.rpm"
            mode: '0644'
          when: arch != 'aarch64'
            
        - name: Install Amazon Corretto {{ java_version }}
          ansible.builtin.yum:
            name: "/tmp/amazon-corretto-{{ java_version }}-{{ 'aarch64' if arch == 'aarch64' else 'x64' }}.rpm"
            state: present
            disable_gpg_check: yes
            
        - name: Clean up Corretto RPM file
          ansible.builtin.file:
            path: "/tmp/amazon-corretto-{{ java_version }}-{{ 'aarch64' if arch == 'aarch64' else 'x64' }}.rpm"
            state: absent
            
        - name: Set JAVA_HOME environment variable
          ansible.builtin.lineinfile:
            path: "/etc/profile.d/java.sh"
            line: |
              export JAVA_HOME=/usr/lib/jvm/java-{{ java_version }}-amazon-corretto
              export PATH=$JAVA_HOME/bin:$PATH
            create: yes
            mode: '0644'
            
    # Pulumiのインストール (rootとして使用)
    - name: Check if Pulumi is installed
      ansible.builtin.stat:
        path: "/usr/local/bin/pulumi"
      register: pulumi_check
      
    - name: Install Pulumi
      when: not pulumi_check.stat.exists
      block:
        - name: Download Pulumi
          ansible.builtin.get_url:
            url: https://get.pulumi.com
            dest: /tmp/pulumi-installer.sh
            mode: '0755'
            
        - name: Execute Pulumi installer
          ansible.builtin.shell: /tmp/pulumi-installer.sh
          args:
            creates: "/root/.pulumi/bin/pulumi"
          environment:
            PULUMI_INSTALL_ARCH: "{{ 'arm64' if arch == 'aarch64' else 'amd64' }}"
            
        - name: Create Pulumi symbolic link
          ansible.builtin.file:
            src: "/root/.pulumi/bin/pulumi"
            dest: "/usr/local/bin/pulumi"
            state: link
            
        - name: Add Pulumi to PATH for all users
          ansible.builtin.lineinfile:
            path: "/etc/profile.d/pulumi.sh"
            line: "export PATH=$PATH:/root/.pulumi/bin"
            create: yes
            mode: '0644'
    
    # Pythonバージョンの確認と対応
    - name: Check Python version
      ansible.builtin.shell: python3 --version
      register: python_version_check
      changed_when: false
    
    - name: Display Python version
      ansible.builtin.debug:
        msg: "Current Python version: {{ python_version_check.stdout }}"
    
    # Python 3.8以上の確認とインストール
    - name: Ensure Python 3.8+ is available
      block:
        - name: Check if Python 3.8+ is already installed
          ansible.builtin.shell: |
            for py in python3.11 python3.10 python3.9 python3.8; do
              if command -v $py &> /dev/null; then
                echo $py
                break
              fi
            done
          register: python38_check
          changed_when: false
        
        - name: Set Python executable
          ansible.builtin.set_fact:
            python3_executable: "{{ python38_check.stdout | default('python3') }}"
        
        - name: Install Python 3.9 if needed (Amazon Linux 2023)
          ansible.builtin.yum:
            name: python3.9
            state: present
          when: 
            - python38_check.stdout == ""
            - ansible_distribution == "Amazon"
        
        - name: Update Python executable after installation
          ansible.builtin.set_fact:
            python3_executable: "python3.9"
          when: 
            - python38_check.stdout == ""
            - ansible_distribution == "Amazon"
        
        - name: Create Python environment configuration
          ansible.builtin.copy:
            dest: "/etc/profile.d/python3.sh"
            content: |
              # Set Python 3.8+ as default for pip operations
              alias pip='{{ python3_executable }} -m pip'
              alias pip3='{{ python3_executable }} -m pip'
              export PYTHON3_EXECUTABLE='{{ python3_executable }}'
            mode: '0644'
          when: python3_executable != 'python3'
    
    # Python パッケージマネージャーの確認と更新
    - name: Ensure Python package management is ready
      block:
        - name: Check pip version
          ansible.builtin.shell: "{{ python3_executable }} -m pip --version"
          register: pip_check
          changed_when: false
          failed_when: false
        
        - name: Ensure pip is installed for Python 3.8+
          ansible.builtin.shell: |
            {{ python3_executable }} -m ensurepip --upgrade
          when: pip_check.rc != 0
          failed_when: false
        
        - name: Install pip using get-pip.py if ensurepip failed
          when: pip_check.rc != 0
          block:
            - name: Download get-pip.py
              ansible.builtin.get_url:
                url: https://bootstrap.pypa.io/get-pip.py
                dest: /tmp/get-pip.py
                mode: '0644'
            
            - name: Install pip
              ansible.builtin.shell: |
                {{ python3_executable }} /tmp/get-pip.py
            
            - name: Clean up get-pip.py
              ansible.builtin.file:
                path: /tmp/get-pip.py
                state: absent
        
        - name: Upgrade pip to latest version
          ansible.builtin.shell: |
            {{ python3_executable }} -m pip install --upgrade pip
          register: pip_upgrade
          changed_when: "'Successfully installed' in pip_upgrade.stdout"
    
    # AWS Python SDKのインストール（amazon.aws コレクションの前提条件）
    - name: Install Python packages for AWS integration
      ansible.builtin.shell: |
        {{ python3_executable }} -m pip install \
          'boto3>=1.26.0,<1.34.0' \
          'botocore>=1.29.0,<1.34.0' \
          'ansible-core>=2.12.0,<2.15.0' \
          'jmespath>=1.0.0'
      register: aws_packages_install
      changed_when: "'Successfully installed' in aws_packages_install.stdout"
    
    # ansibleパッケージのインストール（ansible-coreの上に構築）
    - name: Install ansible package
      ansible.builtin.shell: |
        {{ python3_executable }} -m pip install 'ansible>=5.0.0,<8.0.0'
      register: ansible_install
      changed_when: "'Successfully installed' in ansible_install.stdout"
    
    # Ansible Collectionsのインストール
    - name: Install Ansible Collections
      block:
        - name: Create Ansible directories
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
          loop:
            - "/etc/ansible"
            - "/etc/ansible/collections"
            - "/usr/share/ansible/collections"
        
        - name: Create collections requirements file
          ansible.builtin.copy:
            dest: "/etc/ansible/collections/requirements.yml"
            content: |
              ---
              collections:
                - name: amazon.aws
                  version: ">=5.0.0"
                - name: community.aws
                  version: ">=5.0.0"
                - name: community.general
                  version: ">=5.0.0"
                - name: ansible.posix
                  version: ">=1.4.0"
            mode: '0644'
        
        - name: Install Ansible collections (system-wide)
          ansible.builtin.shell: |
            ansible-galaxy collection install -r /etc/ansible/collections/requirements.yml -p /usr/share/ansible/collections --force
          environment:
            ANSIBLE_COLLECTIONS_PATH: "/usr/share/ansible/collections"
          register: collection_install
          changed_when: "'Installing' in collection_install.stdout"
        
        - name: Set Ansible collections path in profile
          ansible.builtin.lineinfile:
            path: "/etc/profile.d/ansible.sh"
            line: "export ANSIBLE_COLLECTIONS_PATH=/usr/share/ansible/collections:~/.ansible/collections"
            create: yes
            mode: '0644'
        
        - name: Verify collections installation
          ansible.builtin.shell: |
            export ANSIBLE_COLLECTIONS_PATH=/usr/share/ansible/collections
            ansible-galaxy collection list
          register: installed_collections
          changed_when: false
        
        - name: Display installed collections summary
          ansible.builtin.debug:
            msg: |
              Installed Ansible Collections:
              {{ installed_collections.stdout | regex_findall('(amazon\.aws|community\.aws|community\.general|ansible\.posix).*') | join('\n') }}
    
    # インストール検証スクリプトの作成
    - name: Create installation verification script
      ansible.builtin.copy:
        dest: "{{ user_home }}/verify-installation.sh"
        content: |
          #!/bin/bash
          echo "=== System Information ==="
          echo "Architecture: $(uname -m)"
          echo "OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d= -f2 | tr -d '"')"
          echo ""
          echo "=== Python Versions ==="
          echo "Default Python3: $(python3 --version 2>&1 || echo 'Not installed')"
          for py in python3.11 python3.10 python3.9 python3.8; do
            if command -v $py &> /dev/null; then
              echo "$py: $($py --version 2>&1)"
            fi
          done
          # 実際に使用されているPythonを特定
          PYTHON_EXEC=$(which python3.9 python3.10 python3.11 2>/dev/null | head -1)
          if [ -z "$PYTHON_EXEC" ]; then
            PYTHON_EXEC="python3"
          fi
          echo "Active Python: $PYTHON_EXEC ($($PYTHON_EXEC --version 2>&1))"
          echo ""
          echo "=== Installed Tools ==="
          echo "Node.js: $(node --version 2>/dev/null || echo 'Not installed')"
          echo "npm: $(npm --version 2>/dev/null || echo 'Not installed')"
          echo "Pip: $($PYTHON_EXEC -m pip --version 2>/dev/null || echo 'Not installed')"
          echo "AWS CLI: $(aws --version 2>/dev/null || echo 'Not installed')"
          echo "Ansible: $(ansible --version 2>/dev/null | head -n 1 || echo 'Not installed')"
          echo "Ansible-core: $($PYTHON_EXEC -m pip show ansible-core 2>/dev/null | grep Version || echo 'Not installed')"
          echo "Pulumi: $(pulumi version 2>/dev/null || echo 'Not installed')"
          echo "Git: $(git --version 2>/dev/null || echo 'Not installed')"
          echo "Java: $(java -version 2>&1 | head -n 1 || echo 'Not installed')"
          echo "JAVA_HOME: $JAVA_HOME"
          echo ""
          echo "=== Python AWS Libraries ==="
          echo "boto3: $($PYTHON_EXEC -m pip show boto3 2>/dev/null | grep Version || echo 'Not installed')"
          echo "botocore: $($PYTHON_EXEC -m pip show botocore 2>/dev/null | grep Version || echo 'Not installed')"
          echo "jmespath: $($PYTHON_EXEC -m pip show jmespath 2>/dev/null | grep Version || echo 'Not installed')"
          echo ""
          echo "=== Ansible Collections ==="
          export ANSIBLE_COLLECTIONS_PATH=/usr/share/ansible/collections:~/.ansible/collections
          ansible-galaxy collection list 2>/dev/null | grep -E "(amazon\.aws|community\.aws|community\.general|ansible\.posix)" || echo "No collections found"
          echo "======================="
        owner: ec2-user
        group: ec2-user
        mode: '0755'
        
    # AWS認証情報スクリプトの周知
    - name: Check AWS credentials script
      ansible.builtin.stat:
        path: "{{ aws_credentials_script_path }}"
      register: aws_cred_script
      
    - name: Create AWS credentials setup helper
      when: aws_cred_script.stat.exists
      ansible.builtin.copy:
        dest: "{{ user_home }}/setup-aws-credentials.sh"
        content: |
          #!/bin/bash
          echo "Setting up AWS credentials from IAM role..."
          source {{ aws_credentials_script_path }}
          echo "AWS credentials configured. Testing with 'aws sts get-caller-identity':"
          aws sts get-caller-identity
        owner: ec2-user
        group: ec2-user
        mode: '0755'
        
    # Jenkins Agent接続用のディレクトリ作成
    - name: Create Jenkins agent work directory
      ansible.builtin.file:
        path: "{{ user_home }}/jenkins-agent"
        state: directory
        owner: ec2-user
        group: ec2-user
        mode: '0755'
        
    # README.txtの作成（セットアップ手順）
    - name: Create detailed README file
      ansible.builtin.copy:
        dest: "{{ user_home }}/README.txt"
        content: |
          === Bootstrap Environment Setup Complete ===
          
          Your EC2 bootstrap instance ({{ arch }}) has been configured with the following tools:
          - AWS CLI v2 (ARM64 optimized)
          - Node.js {{ nodejs_version }}
          - Java {{ java_version }} (Amazon Corretto for ARM64)
          - Python 3 and pip3
          - Ansible with AWS collections (amazon.aws, community.aws)
          - Pulumi
          - Git
          
          === AWS Integration ===
          The following Python packages have been installed for AWS integration:
          - boto3 (AWS SDK for Python)
          - botocore (Core functionality of boto3)
          - jmespath (JSON query language for boto3)
          
          The following Ansible collections have been installed:
          - amazon.aws (Official AWS modules)
          - community.aws (Community AWS modules)
          - community.general (General community modules)
          - ansible.posix (POSIX/Linux modules)
          
          === Jenkins Agent Setup ===
          This ARM64 instance is configured to work as a Jenkins Agent with:
          - Java {{ java_version }} for Jenkins agent execution
          - Build tools (gcc, make, etc.)
          
          Jenkins agent work directory: ~/jenkins-agent
          
          Next steps:
          1. Run "./verify-installation.sh" to check installed tools
          2. Setup Pulumi: "export PULUMI_ACCESS_TOKEN='your-token'"
          3. Setup AWS credentials: "source ./setup-aws-credentials.sh"
          4. Setup Git SSH keys for repository access: 
             ssh-keygen -t ed25519 -C "your_email@example.com"
             cat ~/.ssh/id_ed25519.pub
             
          5. After adding the SSH key to GitHub, you can clone your repository
             and start working with the Jenkins Infrastructure as Code.
          
          6. To connect this instance as a Jenkins Agent:
             - In Jenkins, go to "Manage Jenkins" > "Manage Nodes and Clouds"
             - Create a new node with SSH connection
             - Use the EC2 instance's private IP or hostname
             - Set Remote root directory to: /home/ec2-user/jenkins-agent
          
          7. For Pulumi S3 backend support:
             export PULUMI_CONFIG_PASSPHRASE="your-secure-passphrase"
             pulumi login s3://your-bucket-name/your-project
          
          Note: This is an ARM64 (t4g) instance. Ensure your Jenkins controller
          and any Docker images you use are compatible with ARM64 architecture.
          
          For more details, refer to the project documentation.
        owner: ec2-user
        group: ec2-user
        mode: '0644'

    # 最終的な環境チェック
    - name: Run final environment verification
      block:
        - name: Test boto3 import
          ansible.builtin.shell: |
            {{ python3_executable }} -c "import boto3; print(f'boto3 version: {boto3.__version__}')"
          register: boto3_test
          changed_when: false
        
        - name: Test AWS collection availability
          ansible.builtin.shell: |
            export ANSIBLE_COLLECTIONS_PATH=/usr/share/ansible/collections
            ansible-doc amazon.aws.s3_bucket --list | head -1
          register: aws_collection_test
          changed_when: false
          failed_when: false
        
        - name: Display environment verification results
          ansible.builtin.debug:
            msg: |
              Environment Verification Results:
              - Python executable: {{ python3_executable }}
              - Python version: {{ python_version_check.stdout }}
              - boto3: {{ 'OK' if boto3_test.rc == 0 else 'FAILED' }}
              - amazon.aws collection: {{ 'OK' if aws_collection_test.rc == 0 else 'FAILED' }}

    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          Bootstrap environment setup completed successfully on {{ arch }}!
          Python {{ python3_executable }} is being used for AWS integration.
          Java {{ java_version }} has been installed for Jenkins Agent compatibility.
          AWS integration tools (boto3, amazon.aws collection) have been installed.
          
          You can now use both AWS CLI commands and Ansible AWS modules in your playbooks.
