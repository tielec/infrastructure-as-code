---
# lambda_teardown_pipeline.yml
# Lambda API環境削除の全体フローを管理するプレイブック
# 各lambda_*.ymlプレイブックを逆順で実行
#
# 使用方法 (ansibleディレクトリから実行):
#   ansible-playbook playbooks/lambda_teardown_pipeline.yml -e "env=dev"
#   ansible-playbook playbooks/lambda_teardown_pipeline.yml -e "env=dev force_destroy=true"

- name: Lambda API Infrastructure Teardown Pipeline - Start
  hosts: localhost
  connection: local
  gather_facts: no
  
  vars:
    # 環境名はコマンドラインから指定可能
    env_name: "{{ env | default('dev') }}"
    
  tasks:
    # 対話モードと非対話モードの処理
    - name: Check if running interactively
      ansible.builtin.set_fact:
        is_interactive: "{{ ansible_connection == 'local' and lookup('env', 'CI') == '' and lookup('env', 'JENKINS_HOME') == '' }}"
    
    - name: Display teardown warning
      ansible.builtin.debug:
        msg: |
          Lambda API Infrastructure Teardown Pipeline
          ==========================================
          ⚠️  WARNING: You are about to destroy Lambda API infrastructure!
          
          Environment: {{ env_name }}
          
          This will destroy (in reverse order):
          - API Gateway
          - Lambda Functions
          - NAT Infrastructure
          - VPC Endpoints
          - Security Groups
          - Network Infrastructure
          - SSM Parameters (if specified)
    
    # 対話モードの場合のみ確認
    - name: Confirm destruction (interactive mode)
      ansible.builtin.pause:
        prompt: "Type 'yes' to continue or 'no' to abort"
      register: confirm_destroy
      when: 
        - is_interactive | bool
        - force_destroy is not defined or not force_destroy | bool
      
    - name: Abort if not confirmed (interactive mode)
      ansible.builtin.fail:
        msg: "Destruction aborted by user"
      when: 
        - is_interactive | bool
        - force_destroy is not defined or not force_destroy | bool
        - confirm_destroy.user_input | default('no') | lower != 'yes'
    
    # 非対話モードでforce_destroyが設定されていない場合は停止
    - name: Check force_destroy in non-interactive mode
      ansible.builtin.fail:
        msg: |
          Running in non-interactive mode (CI/Jenkins).
          To destroy resources, you must explicitly set 'force_destroy=true'
          Example: ansible-playbook lambda_teardown_pipeline.yml -e "env=dev force_destroy=true"
      when:
        - not is_interactive | bool
        - force_destroy is not defined or not force_destroy | bool
    
    - name: Proceeding with destruction
      ansible.builtin.debug:
        msg: |
          {{ '✅ Destruction confirmed by user' if is_interactive | bool else '✅ Force destroy enabled' }}
          Proceeding with infrastructure destruction...

# 削除は作成の逆順で実行

# API Gatewayの削除
- import_playbook: lambda/lambda_api_gateway.yml
  vars:
    env: "{{ env | default('dev') }}"
    operation: "destroy"
  when: destroy_api_gateway | default(true) | bool
  tags:
    - api-gateway

# Lambda関数の削除
- import_playbook: lambda/lambda_functions.yml
  vars:
    env: "{{ env | default('dev') }}"
    operation: "destroy"
  when: destroy_functions | default(true) | bool
  tags:
    - functions

# Lambda Shipment S3バケットの削除
- import_playbook: lambda/lambda_shipment_s3.yml
  vars:
    env: "{{ env | default('dev') }}"
    operation: "destroy"
  when: destroy_shipment_s3 | default(true) | bool
  tags:
    - shipment-s3

# NATインフラの削除
- import_playbook: lambda/lambda_nat.yml
  vars:
    env: "{{ env | default('dev') }}"
    operation: "destroy"
  when: destroy_nat | default(true) | bool
  tags:
    - nat

# VPCエンドポイントの削除
- import_playbook: lambda/lambda_vpce.yml
  vars:
    env: "{{ env | default('dev') }}"
    operation: "destroy"
  when: destroy_vpce | default(true) | bool
  tags:
    - vpce

# セキュリティグループの削除
- import_playbook: lambda/lambda_security.yml
  vars:
    env: "{{ env | default('dev') }}"
    operation: "destroy"
  when: destroy_security | default(true) | bool
  tags:
    - security

# ネットワークインフラの削除
- import_playbook: lambda/lambda_network.yml
  vars:
    env: "{{ env | default('dev') }}"
    operation: "destroy"
  when: destroy_network | default(true) | bool
  tags:
    - network

# SSMパラメータの削除（オプション）
- import_playbook: lambda/lambda_ssm_init.yml
  vars:
    env: "{{ env | default('dev') }}"
    operation: "destroy"
  when: destroy_ssm | default(false) | bool
  tags:
    - ssm-destroy

# アカウントレベル設定の削除（最後、オプション）
- import_playbook: lambda/lambda_account_setup.yml
  vars:
    env: "{{ env | default('dev') }}"
    operation: "destroy"
  when: destroy_account_setup | default(false) | bool
  tags:
    - account-setup-destroy

- name: Teardown Complete
  hosts: localhost
  connection: local
  gather_facts: no
  
  vars:
    env_name: "{{ env | default('dev') }}"
  
  tasks:
    # 残存SSMパラメータのチェック
    - name: Check for remaining SSM parameters
      ansible.builtin.shell: |
        aws ssm describe-parameters \
          --parameter-filters "Key=Name,Option=BeginsWith,Values=/lambda-api/{{ env_name }}/" \
          --query "Parameters[].Name" \
          --output json 2>/dev/null || echo "[]"
      register: remaining_ssm_check
      changed_when: false
      failed_when: false
    
    - name: Parse remaining parameters
      ansible.builtin.set_fact:
        remaining_ssm_params: "{{ remaining_ssm_check.stdout | from_json | default([]) }}"
    
    - name: Display teardown summary
      ansible.builtin.debug:
        msg: |
          Lambda API Infrastructure Teardown Complete
          ==========================================
          
          Environment: {{ env_name }}
          
          All specified components have been removed.
          
          SSM Parameter Status:
          {% if remaining_ssm_params | length > 0 %}
          ⚠️  WARNING: {{ remaining_ssm_params | length }} SSM parameters still exist:
          {% for param in remaining_ssm_params %}
            - {{ param }}
          {% endfor %}
          
          To completely remove all SSM parameters, run:
            ansible-playbook playbooks/lambda_teardown_pipeline.yml -e "env={{ env_name }} destroy_ssm=true"
          {% else %}
          ✅ All SSM parameters have been cleaned up
          {% endif %}
          
          {% if not destroy_ssm | default(false) %}
          Note: SSM parameters were preserved.
          To remove them, use: destroy_ssm=true
          {% endif %}
          
          To recreate this infrastructure:
          ansible-playbook playbooks/lambda_setup_pipeline.yml -e "env={{ env_name }}"