---
# lambda_teardown_pipeline.yml
# Lambda API環境の削除を管理するプレイブック

- name: Lambda API Infrastructure Teardown Pipeline
  hosts: localhost
  connection: local
  gather_facts: yes
  any_errors_fatal: true
  
  vars:
    # 環境名はコマンドラインから指定可能
    env_name: "{{ env | default('dev') }}"
    # パスを明示的に定義（inventory_dirを基準にした相対パス）
    scripts_dir: "{{ inventory_dir }}/../../scripts"
    pulumi_path: "{{ inventory_dir }}/../../pulumi"
    # スタック自体も削除するかどうか
    remove_stacks: "{{ remove_stack | default(false) }}"
  
  pre_tasks:
    # all.yml から変数を読み込む
    - name: Include group_vars/all.yml
      ansible.builtin.include_vars:
        file: "{{ inventory_dir }}/group_vars/all.yml"
        
    # 必要な変数を設定
    - name: Set required variables from all.yml
      ansible.builtin.set_fact:
        project_name: "{{ lambda_api_infra.project_name }}"
        aws_region_name: "{{ lambda_api_infra.aws.default_region }}"
        account_setup_project_name: "{{ lambda_api_infra.pulumi.account_setup_project }}"
        network_project_name: "{{ lambda_api_infra.pulumi.network_project }}"
        security_project_name: "{{ lambda_api_infra.pulumi.security_project }}"
        vpce_project_name: "{{ lambda_api_infra.pulumi.vpce_project }}"
        nat_project_name: "{{ lambda_api_infra.pulumi.nat_project }}"
        functions_project_name: "{{ lambda_api_infra.pulumi.functions_project }}"
        api_gateway_project_name: "{{ lambda_api_infra.pulumi.api_gateway_project }}"
        waf_project_name: "{{ lambda_api_infra.pulumi.waf_project }}"
        websocket_project_name: "{{ lambda_api_infra.pulumi.websocket_project }}"
        database_project_name: "{{ lambda_api_infra.pulumi.database_project }}"

  roles:
    - aws_setup
    - pulumi_helper
    
  tasks:
    # 対話モードと非対話モードの処理
    - name: Check if running interactively
      ansible.builtin.set_fact:
        is_interactive: "{{ ansible_connection == 'local' and lookup('env', 'CI') == '' and lookup('env', 'JENKINS_HOME') == '' }}"
    
    - name: Display destruction warning
      ansible.builtin.debug:
        msg: |
          ⚠️  WARNING: You are about to destroy Lambda API infrastructure!
          
          Environment: {{ env_name }}
          Project: {{ project_name }}
          Remove stacks after destruction: {{ remove_stacks }}
          
          This will destroy:
          - WAF and IP whitelists
          - API Gateway and endpoints
          - WebSocket API (if exists)
          - Lambda functions and layers
          - VPC endpoints
          - NAT infrastructure
          - Security groups
          - Network infrastructure
          - Account-level setup (if remove_account_setup=true)
          - Database resources (if exists)
    
    # 対話モードの場合のみ確認
    - name: Confirm destruction (interactive mode)
      ansible.builtin.pause:
        prompt: "Type 'yes' to continue or 'no' to abort"
      register: confirm_destroy
      when: 
        - is_interactive | bool
        - force_destroy is not defined or not force_destroy | bool
      
    - name: Abort if not confirmed (interactive mode)
      ansible.builtin.fail:
        msg: "Destruction aborted by user"
      when: 
        - is_interactive | bool
        - force_destroy is not defined or not force_destroy | bool
        - confirm_destroy.user_input | default('no') | lower != 'yes'
    
    # 非対話モードでforce_destroyが設定されていない場合は停止
    - name: Check force_destroy in non-interactive mode
      ansible.builtin.fail:
        msg: |
          Running in non-interactive mode (CI/Jenkins).
          To destroy resources, you must explicitly set 'force_destroy=true'
          Example: ansible-playbook lambda_destroy_pipeline.yml -e "env=dev force_destroy=true"
      when:
        - not is_interactive | bool
        - force_destroy is not defined or not force_destroy | bool
    
    - name: Proceeding with destruction
      ansible.builtin.debug:
        msg: |
          {{ '✅ Destruction confirmed by user' if is_interactive | bool else '✅ Force destroy enabled' }}
          Proceeding with infrastructure destruction...
    
    - name: Display destruction plan
      ansible.builtin.debug:
        msg: |
          Lambda API Infrastructure Destruction Plan
          ========================================
          Project: {{ project_name }}
          Environment: {{ env_name }}
          AWS Region: {{ aws_region_name }}
          
          Destruction order (reverse of creation):
          1. Database (if exists)
          2. WebSocket API (if exists)
          3. WAF
          4. API Gateway
          5. Lambda Functions
          6. NAT Infrastructure
          7. VPC Endpoints
          8. Security Groups
          9. Network Infrastructure
          10. Account Setup (if remove_account_setup=true)
    
    # データベースの削除（存在する場合）
    - name: Check if database stack exists
      ansible.builtin.shell: |
        cd {{ pulumi_path }}/lambda-database
        export PULUMI_ACCESS_TOKEN="{{ lookup('env', 'PULUMI_ACCESS_TOKEN') }}"
        pulumi stack ls --json | jq -r '.[].name' | grep -E "(^|/){{ env_name }}$" || echo ""
      register: database_stack_check
      changed_when: false
      failed_when: false
    
    - name: Destroy Database Infrastructure
      ansible.builtin.include_role:
        name: lambda_database
      vars:
        operation: "destroy"
      when: 
        - database_stack_check.stdout | trim != ""
        - destroy_database | default(true) | bool
    
    # WebSocket APIの削除（存在する場合）
    - name: Check if WebSocket stack exists
      ansible.builtin.shell: |
        cd {{ pulumi_path }}/lambda-websocket
        export PULUMI_ACCESS_TOKEN="{{ lookup('env', 'PULUMI_ACCESS_TOKEN') }}"
        pulumi stack ls --json | jq -r '.[].name' | grep -E "(^|/){{ env_name }}$" || echo ""
      register: websocket_stack_check
      changed_when: false
      failed_when: false
    
    - name: Destroy WebSocket API
      ansible.builtin.include_role:
        name: lambda_websocket
      vars:
        operation: "destroy"
      when: 
        - websocket_stack_check.stdout | trim != ""
        - destroy_websocket | default(true) | bool
    
    # WAFの削除
    - name: Destroy WAF
      ansible.builtin.include_role:
        name: lambda_waf
      vars:
        operation: "destroy"
      when: destroy_waf | default(true) | bool
    
    # API Gatewayの削除
    - name: Destroy API Gateway
      ansible.builtin.include_role:
        name: lambda_api_gateway
      vars:
        operation: "destroy"
      when: destroy_api_gateway | default(true) | bool
    
    # Lambda関数の削除
    - name: Destroy Lambda Functions
      ansible.builtin.include_role:
        name: lambda_functions
      vars:
        operation: "destroy"
      when: destroy_functions | default(true) | bool
    
    # NATの削除
    - name: Destroy NAT Infrastructure
      ansible.builtin.include_role:
        name: lambda_nat
      vars:
        operation: "destroy"
      when: destroy_nat | default(true) | bool
    
    # VPCエンドポイントの削除
    - name: Destroy VPC Endpoints
      ansible.builtin.include_role:
        name: lambda_vpce
      vars:
        operation: "destroy"
      when: destroy_vpce | default(true) | bool
    
    # セキュリティグループの削除
    - name: Destroy Security Groups
      ansible.builtin.include_role:
        name: lambda_security
      vars:
        operation: "destroy"
      when: destroy_security | default(true) | bool
    
    # ネットワークの削除
    - name: Destroy Network Infrastructure
      ansible.builtin.include_role:
        name: lambda_network
      vars:
        operation: "destroy"
      when: destroy_network | default(true) | bool
    
    # アカウント設定の削除（最後、オプション）
    - name: Destroy Account Setup (if requested)
      ansible.builtin.include_role:
        name: lambda_account_setup
      vars:
        operation: "destroy"
      when: 
        - destroy_account_setup | default(false) | bool
        - remove_account_setup | default(false) | bool

    # 削除結果サマリー
    - name: Destruction Summary
      ansible.builtin.debug:
        msg: |
          Lambda API Infrastructure Destruction Summary
          ===========================================
          Network: {{ network_destroyed | default(false) | ternary('Destroyed', 'Skipped/Failed') }}
          Security: {{ security_destroyed | default(false) | ternary('Destroyed', 'Skipped/Failed') }}
          VPC Endpoints: {{ vpce_destroyed | default(false) | ternary('Destroyed', 'Skipped/Failed') }}
          NAT: {{ nat_destroyed | default(false) | ternary('Destroyed', 'Skipped/Failed') }}
          Lambda Functions: {{ functions_destroyed | default(false) | ternary('Destroyed', 'Skipped/Failed') }}
          API Gateway: {{ api_gateway_destroyed | default(false) | ternary('Destroyed', 'Skipped/Failed') }}
          WAF: {{ waf_destroyed | default(false) | ternary('Destroyed', 'Skipped/Failed') }}
          WebSocket API: {{ websocket_destroyed | default(false) | ternary('Destroyed', 'Skipped/Failed') }}
          Database: {{ database_destroyed | default(false) | ternary('Destroyed', 'Skipped/Failed') }}
          Account Setup: {{ account_setup_destroyed | default(false) | ternary('Destroyed', 'Skipped/Failed') }}
          
          Stacks removed: {{ remove_stacks }}
          
          {% if not destroy_account_setup | default(false) %}
          Note: Account setup was NOT destroyed. To remove it, use:
          ansible-playbook lambda_teardown_pipeline.yml -e "env=dev force_destroy=true remove_account_setup=true"
          {% endif %}
