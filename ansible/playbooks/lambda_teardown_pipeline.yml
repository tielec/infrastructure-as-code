---
# lambda_teardown_pipeline.yml
# Lambda API環境の削除を管理するマスタープレイブック
# 個別のコンポーネントplaybookを逆順で呼び出します

- name: Lambda API Infrastructure Teardown Pipeline
  hosts: localhost
  connection: local
  gather_facts: yes
  any_errors_fatal: true
  
  vars:
    # 環境名はコマンドラインから指定可能
    env_name: "{{ env | default('dev') }}"
    # パスを明示的に定義
    scripts_dir: "{{ inventory_dir }}/../../scripts"
    pulumi_path: "{{ inventory_dir }}/../../pulumi"
    # スタック自体も削除するかどうか
    remove_stacks: "{{ remove_stack | default(false) }}"
  
  pre_tasks:
    # all.yml から変数を読み込む
    - name: Include group_vars/all.yml
      ansible.builtin.include_vars:
        file: "{{ inventory_dir }}/group_vars/all.yml"
        
    # 必要な変数を設定
    - name: Set required variables from all.yml
      ansible.builtin.set_fact:
        project_name: "{{ lambda_api_infra.project_name }}"
        aws_region_name: "{{ lambda_api_infra.aws.default_region }}"
        environment_config: "{{ lambda_api_infra.environments[env_name] }}"
        
    # 対話モードと非対話モードの処理
    - name: Check if running interactively
      ansible.builtin.set_fact:
        is_interactive: "{{ ansible_connection == 'local' and lookup('env', 'CI') == '' and lookup('env', 'JENKINS_HOME') == '' }}"
    
    - name: Display destruction warning
      ansible.builtin.debug:
        msg: |
          ==========================================
          ⚠️  WARNING: Lambda API Infrastructure Teardown
          ==========================================
          
          Environment: {{ env_name }}
          Project: {{ project_name }}
          Region: {{ aws_region_name }}
          Remove stacks: {{ remove_stacks }}
          
          This will destroy (in reverse order):
          1. Database (if exists)
          2. WebSocket API (if exists)
          3. WAF
          4. API Gateway
          5. Lambda Functions
          6. NAT Infrastructure
          7. VPC Endpoints
          8. Security Groups
          9. Network Infrastructure
          10. SSM Parameters (if remove_ssm=true)
          
          ==========================================
    
    # 対話モードの場合のみ確認
    - name: Confirm destruction (interactive mode)
      ansible.builtin.pause:
        prompt: "Type 'yes' to continue or 'no' to abort"
      register: confirm_destroy
      when: 
        - is_interactive | bool
        - force_destroy is not defined or not force_destroy | bool
      
    - name: Abort if not confirmed (interactive mode)
      ansible.builtin.fail:
        msg: "Destruction aborted by user"
      when: 
        - is_interactive | bool
        - force_destroy is not defined or not force_destroy | bool
        - confirm_destroy.user_input | default('no') | lower != 'yes'
    
    # 非対話モードでforce_destroyが設定されていない場合は停止
    - name: Check force_destroy in non-interactive mode
      ansible.builtin.fail:
        msg: |
          Running in non-interactive mode (CI/Jenkins).
          To destroy resources, you must explicitly set 'force_destroy=true'
          Example: ansible-playbook lambda_teardown_pipeline.yml -e "env=dev force_destroy=true"
      when:
        - not is_interactive | bool
        - force_destroy is not defined or not force_destroy | bool
    
    - name: Proceeding with destruction
      ansible.builtin.debug:
        msg: |
          {{ '✅ Destruction confirmed by user' if is_interactive | bool else '✅ Force destroy enabled' }}
          Proceeding with infrastructure destruction...
    
  tasks:
    # 削除は作成の逆順で実行
    
    # 1. データベース削除（Phase 2、存在する場合）
    - name: Database Infrastructure Teardown
      ansible.builtin.import_playbook: lambda/lambda_database.yml
      vars:
        env: "{{ env_name }}"
        operation: "destroy"
      when: destroy_database | default(true) | bool
      ignore_errors: yes
    
    # 2. WebSocket API削除（オプション、存在する場合）
    - name: WebSocket API Teardown
      ansible.builtin.import_playbook: lambda/lambda_websocket.yml
      vars:
        env: "{{ env_name }}"
        operation: "destroy"
      when: destroy_websocket | default(true) | bool
      ignore_errors: yes
    
    # 3. WAF削除
    - name: WAF Teardown
      ansible.builtin.import_playbook: lambda/lambda_waf.yml
      vars:
        env: "{{ env_name }}"
        operation: "destroy"
      when: destroy_waf | default(true) | bool
      ignore_errors: yes
    
    # 4. API Gateway削除
    - name: API Gateway Teardown
      ansible.builtin.import_playbook: lambda/lambda_api_gateway.yml
      vars:
        env: "{{ env_name }}"
        operation: "destroy"
      when: destroy_api_gateway | default(true) | bool
      ignore_errors: yes
    
    # 5. Lambda関数削除
    - name: Lambda Functions Teardown
      ansible.builtin.import_playbook: lambda/lambda_functions.yml
      vars:
        env: "{{ env_name }}"
        operation: "destroy"
      when: destroy_functions | default(true) | bool
      ignore_errors: yes
    
    # 6. NAT削除
    - name: NAT Infrastructure Teardown
      ansible.builtin.import_playbook: lambda/lambda_nat.yml
      vars:
        env: "{{ env_name }}"
        operation: "destroy"
      when: destroy_nat | default(true) | bool
      ignore_errors: yes
    
    # 7. VPCエンドポイント削除
    - name: VPC Endpoints Teardown
      ansible.builtin.import_playbook: lambda/lambda_vpce.yml
      vars:
        env: "{{ env_name }}"
        operation: "destroy"
      when: destroy_vpce | default(true) | bool
      ignore_errors: yes
    
    # 8. セキュリティグループ削除
    - name: Security Groups Teardown
      ansible.builtin.import_playbook: lambda/lambda_security.yml
      vars:
        env: "{{ env_name }}"
        operation: "destroy"
      when: destroy_security | default(true) | bool
      ignore_errors: yes
    
    # 9. ネットワーク削除
    - name: Network Infrastructure Teardown
      ansible.builtin.import_playbook: lambda/lambda_network.yml
      vars:
        env: "{{ env_name }}"
        operation: "destroy"
      when: destroy_network | default(true) | bool
      ignore_errors: yes
    
    # 10. SSMパラメータ削除（オプション、通常は残す）
    - name: SSM Parameters Teardown
      ansible.builtin.import_playbook: lambda/lambda_ssm_init.yml
      vars:
        env: "{{ env_name }}"
        operation: "destroy"
      when: 
        - remove_ssm | default(false) | bool
        - destroy_ssm | default(false) | bool
      ignore_errors: yes
    
    # 削除完了メッセージ
    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          ==========================================
          Lambda API Infrastructure Teardown Complete!
          ==========================================
          
          Environment: {{ env_name }}
          
          {% if not remove_ssm | default(false) %}
          Note: SSM parameters were preserved.
          To remove them, use: remove_ssm=true
          {% endif %}
          
          To recreate this infrastructure:
          ansible-playbook playbooks/lambda_setup_pipeline.yml -e "env={{ env_name }}"
          ==========================================