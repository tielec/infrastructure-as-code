---
# インフラストラクチャ共通設定
#
# このファイルには、すべての環境とロールで共通して使用される変数を定義します。
# 環境固有の設定は、dev.yml, staging.yml, prod.yml で上書きしてください。

# ============================================================
# パスとディレクトリ設定（共通変数）
# ============================================================
# スクリプトディレクトリへのパス（15以上のロールで使用）
scripts_dir: "{{ inventory_dir }}/../../scripts"
# Pulumiプロジェクトディレクトリへのパス（15以上のロールで使用）
pulumi_path: "{{ inventory_dir }}/../../pulumi"
# AWS認証スクリプトのパス
aws_credentials_script_path: "{{ scripts_dir }}/aws/setup-aws-credentials.sh"

# デフォルト環境名（環境別ファイルで上書き）
env_name: "dev"

# AWS デフォルトリージョン
aws_region: "ap-northeast-1"

# 操作モード（deploy/destroy）
operation: "deploy"

# ============================================================
# Pulumi設定
# ============================================================

# Pulumi バックエンド設定
pulumi:
  # バックエンドタイプ（"cloud" または "s3"）
  backend_type: "s3"
  
  # S3バックエンド設定
  s3:
    # S3バケット名（CloudFormationで作成されたバケット名を指定）
    bucket: ""  # 空の場合はSSMパラメータストアから取得
    region: "ap-northeast-1"
  

# ============================================================
# Jenkins インフラストラクチャ設定
# ============================================================

# プロジェクト識別子
infra:
  # メインのプロジェクト名（変数展開に使用）
  project_name: "jenkins-infra"
  
  # Pulumiプロジェクト名（スタック参照に使用）
  pulumi:
    network_project: "jenkins-network"
    security_project: "jenkins-security"
    nat_project: "jenkins-nat"
    storage_project: "jenkins-storage"
    loadbalancer_project: "jenkins-loadbalancer"
    controller_project: "jenkins-controller"
    agent_project: "jenkins-agent"
    config_project: "jenkins-config"
    application_project: "jenkins-application"

  # AWS設定
  aws:
    default_region: "ap-northeast-1"
    vpc_cidr: "10.0.0.0/16"
    key_name: ""  # EC2インスタンス用のキーペア名（必要に応じて設定）

  # NAT設定
  nat:
    # High Availability モード
    # true: NAT Gateway x2 (高可用性、月額約$90)
    # false: NAT Instance x1 (低コスト、月額約$5)
    high_availability_mode: false  # 開発環境はfalse推奨
    
    # NAT Instance使用時のインスタンスタイプ
    # t4g.nano: 最小構成（月額約$3-5）
    # t4g.micro: 小規模環境向け（月額約$7-10）
    # t4g.small: 中規模環境向け（月額約$15-20）
    instance_type: "t4g.nano"

  # 環境設定
  environments:
    dev:
      name: "dev"
      domain: "dev.jenkins.example.com"
    staging:
      name: "staging"
      domain: "staging.jenkins.example.com"
    prod:
      name: "prod"
      domain: "jenkins.example.com"

# ============================================================
# Lambda インフラストラクチャ設定
# ============================================================

# Lambda API プロジェクト設定
lambda_api_infra:
  # メインのプロジェクト名
  project_name: "lambda-api"
  
  # Pulumiプロジェクト名
  pulumi:
    network_project: "lambda-network"
    security_project: "lambda-security"
    vpce_project: "lambda-vpce"
    nat_project: "lambda-nat"
    functions_project: "lambda-functions"
    api_gateway_project: "lambda-api-gateway"

  # AWS設定
  aws:
    default_region: "ap-northeast-1"
    vpc_cidr: "10.1.0.0/16"  # Jenkinsとは異なるCIDR
    key_name: ""  # NAT Instance用（必要に応じて設定）

  # NAT設定
  nat:
    # 環境別の設定は各環境のvarsファイルで上書き
    high_availability_mode: false
    instance_type: "t4g.nano"

  # 環境設定
  environments:
    dev:
      name: "dev"
      nat_instance_type: "t4g.nano"
      lambda_memory: 256
      log_level: "DEBUG"
      api_rate_limit: 1000
      enable_vpc_endpoints:
        - "s3"
    staging:
      name: "staging"
      nat_instance_type: "t4g.micro"
      lambda_memory: 256
      log_level: "INFO"
      api_rate_limit: 500
      enable_vpc_endpoints:
        - "s3"
        - "secretsmanager"
    prod:
      name: "prod"
      nat_high_availability: true
      lambda_memory: 512
      log_level: "ERROR"
      api_rate_limit: 2000
      enable_vpc_endpoints:
        - "s3"
        - "secretsmanager"
        - "kms"

# ============================================================
# Jenkins プロジェクト設定
# ============================================================

# Jenkins設定
jenkins:
  version: "latest"
  color: "blue"
  recovery_mode: false
  instance_type: "t4g.medium"
  key_name: ""  # 必要に応じて設定
  
  # Jenkinsアプリケーション設定
  install_plugins: true
  create_seed_job: true
  restart_jenkins: true
  setup_cli_user: true
  seed_job_name: "seed-job"
  
  # Git設定
  git:
    repo: "https://github.com/tielec/infrastructure-as-code.git"
    branch: "main"
    credentials_id: "github-app-credentials"
  
  # Jenkinsエージェント設定
  agent:
    instance_type: "t3a.medium"
    min_capacity: 0
    max_capacity: 10
    spot_price: "0.052"  # t3a.medium spot price limit
    
    # AMI Builder設定
    ami_builder:
      trigger_ami_build: true         # Automatically trigger pipeline execution after deployment
      update_ssm_with_ami: true       # Automatically update SSM parameters with new AMI IDs
      wait_for_ami_build: true        # Wait for AMI build to complete before updating SSM (30-45 minutes)
      cleanup_old_amis: true          # Automatically delete old AMIs
      ami_retention_count: 2          # Number of AMIs to keep per architecture

# ============================================================
# Lambda API設定
# ============================================================

# Lambda API設定
lambda_api:
  runtime: "nodejs18.x"
  default_memory: 256
  default_timeout: 30
  log_level: "INFO"  # デフォルトログレベル
  log_retention_days:
    dev: 3
    staging: 7
    prod: 14
