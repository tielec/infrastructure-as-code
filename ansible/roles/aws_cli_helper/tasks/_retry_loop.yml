- name: Increment retry counter
  ansible.builtin.set_fact:
    _retry_attempt: "{{ _retry_attempt | int + 1 }}"

- name: "Attempt {{ _retry_attempt }}/{{ max_attempts }}"
  when: not _retry_success and _retry_attempt | int <= max_attempts | int
  block:
    - name: Execute AWS command
      ansible.builtin.include_tasks: execute.yml

    - name: Check if retry is needed
      ansible.builtin.set_fact:
        _should_retry: >-
          {{
            not aws_cli_success and
            aws_cli_error_type | default('') in aws_cli_helper_retriable_errors and
            _retry_attempt | int < max_attempts | int
          }}

    - name: Mark success if no retry needed
      ansible.builtin.set_fact:
        _retry_success: "{{ aws_cli_success }}"
      when: not _should_retry

    - name: Calculate retry delay
      when: _should_retry
      ansible.builtin.set_fact:
        _retry_wait: >-
          {%- if use_backoff | default(aws_cli_helper_retry_backoff) -%}
            {{ [retry_delay | default(aws_cli_helper_retry_delay) | int * (2 ** (_retry_attempt | int - 1)),
                aws_cli_helper_retry_max_delay | int] | min }}
          {%- else -%}
            {{ retry_delay | default(aws_cli_helper_retry_delay) }}
          {%- endif -%}

    - name: Wait before retry
      when: _should_retry
      ansible.builtin.pause:
        seconds: "{{ _retry_wait }}"
        prompt: "Retrying after {{ _retry_wait }} seconds (attempt {{ _retry_attempt }}/{{ max_attempts }})"

    - name: Continue retry loop
      when: _should_retry
      ansible.builtin.include_tasks: _retry_loop.yml

- name: Set final retry status
  ansible.builtin.set_fact:
    aws_cli_retry_attempts: "{{ _retry_attempt }}"
    aws_cli_retry_exhausted: "{{ not _retry_success and _retry_attempt | int >= max_attempts | int }}"
