---
# IP Whitelist追加タスク

- name: Validate required parameters
  ansible.builtin.fail:
    msg: "Required parameters: client_id, client_name, ip_addresses (comma-separated)"
  when: >
    client_id is not defined or
    client_name is not defined or
    ip_addresses is not defined

- name: Set secret name
  ansible.builtin.set_fact:
    secret_name: "{{ lambda_api.ip_whitelist.secret_name_pattern | replace('{environment}', env_name) }}"

- name: Get current IP whitelist
  ansible.builtin.shell: |
    eval $({{ scripts_dir }}/aws-env.sh)
    aws secretsmanager get-secret-value \
      --secret-id {{ secret_name }} \
      --region {{ aws_region_name }} \
      --query SecretString --output text
  register: current_whitelist_raw
  changed_when: false

- name: Parse whitelist
  ansible.builtin.set_fact:
    current_whitelist: "{{ current_whitelist_raw.stdout | from_json }}"

- name: Check if client ID already exists
  ansible.builtin.fail:
    msg: "Client ID '{{ client_id }}' already exists. Use 'update' operation to modify."
  when: current_whitelist.clients | selectattr('id', 'equalto', client_id) | list | length > 0

- name: Create new client entry
  ansible.builtin.set_fact:
    new_client:
      id: "{{ client_id }}"
      name: "{{ client_name }}"
      description: "{{ client_description | default('Added via Ansible') }}"
      enabled: "{{ client_enabled | default(true) | bool }}"
      ipAddresses: "{{ ip_addresses.split(',') | map('trim') | list }}"
      tags:
        type: "{{ client_type | default('platform') }}"
        priority: "{{ client_priority | default('normal') }}"
        addedBy: "ansible"
        addedAt: "{{ ansible_date_time.iso8601 }}"

- name: Add client to whitelist
  ansible.builtin.set_fact:
    updated_whitelist:
      version: "{{ current_whitelist.version }}"
      lastUpdated: "{{ ansible_date_time.iso8601 }}"
      clients: "{{ current_whitelist.clients + [new_client] }}"

- name: Update secret
  ansible.builtin.shell: |
    eval $({{ scripts_dir }}/aws-env.sh)
    aws secretsmanager put-secret-value \
      --secret-id {{ secret_name }} \
      --secret-string '{{ updated_whitelist | to_json }}' \
      --region {{ aws_region_name }}
  register: update_result

- name: Display success message
  ansible.builtin.debug:
    msg: |
      Successfully added client to IP whitelist:
      - Client ID: {{ client_id }}
      - Client Name: {{ client_name }}
      - IP Addresses: {{ ip_addresses }}
      - Enabled: {{ client_enabled | default(true) }}
