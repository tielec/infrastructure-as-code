---
# コントローラーデプロイタスク

- name: Display controller deployment information
  ansible.builtin.debug:
    msg: |
      Deploying Jenkins Controller Infrastructure:
      - Project: {{ project_name }}
      - Controller Pulumi Project: {{ controller_project_name }}
      - Network Pulumi Project: {{ network_project_name }}
      - Security Pulumi Project: {{ security_project_name }}
      - Storage Pulumi Project: {{ storage_project_name }}
      - LoadBalancer Pulumi Project: {{ loadbalancer_project_name }}
      - Environment: {{ env_name }}
      - Jenkins Version: {{ jenkins_version }}
      - Jenkins Color: {{ jenkins_color }}
      - Recovery Mode: {{ recovery_mode }}

# ファイル権限設定
- name: Ensure aws-env.sh has execute permissions
  ansible.builtin.file:
    path: "{{ scripts_dir }}/aws/aws-env.sh"
    mode: '0755'
  register: aws_env_script_permission
  no_log: true  # 詳細なログを抑制
  
- name: Report permission update
  ansible.builtin.debug:
    msg: "aws-env.sh スクリプトに実行権限を付与しました"
  when: aws_env_script_permission.changed

# Pulumiデプロイ
- name: Deploy Controller Infrastructure with Pulumi
  block:
    # Pulumiヘルパータスクを呼び出す
    - name: Initialize controller stack
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: init_stack
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
        stack_name: "{{ env_name }}"
    
    - name: Configure controller stack - AWS region
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: set_config
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
        config_key: "aws:region"
        config_value: "{{ aws_region_name }}"

    - name: Configure controller stack - project name
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: set_config
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
        config_key: "{{ controller_project_name }}:projectName"
        config_value: "{{ project_name }}"

    - name: Configure controller stack - network stack name
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: set_config
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
        config_key: "{{ controller_project_name }}:networkStackName"
        config_value: "{{ network_project_name }}"

    - name: Configure controller stack - security stack name
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: set_config
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
        config_key: "{{ controller_project_name }}:securityStackName"
        config_value: "{{ security_project_name }}"

    - name: Configure controller stack - storage stack name
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: set_config
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
        config_key: "{{ controller_project_name }}:storageStackName"
        config_value: "{{ storage_project_name }}"

    - name: Configure controller stack - loadbalancer stack name
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: set_config
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
        config_key: "{{ controller_project_name }}:loadbalancerStackName"
        config_value: "{{ loadbalancer_project_name }}"

    - name: Configure controller stack - Jenkins version
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: set_config
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
        config_key: "{{ controller_project_name }}:jenkinsVersion"
        config_value: "{{ jenkins_version }}"

    - name: Configure controller stack - Jenkins color
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: set_config
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
        config_key: "{{ controller_project_name }}:jenkinsColor"
        config_value: "{{ jenkins_color }}"

    - name: Configure controller stack - recovery mode
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: set_config
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
        config_key: "{{ controller_project_name }}:recoveryMode"
        config_value: "{{ recovery_mode | string | lower }}"

    - name: Configure controller stack - instance type
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: set_config
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
        config_key: "{{ controller_project_name }}:instanceType"
        config_value: "{{ instance_type }}"

    - name: Configure controller stack - key name (if defined)
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: set_config
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
        config_key: "{{ controller_project_name }}:keyName"
        config_value: "{{ key_name }}"
      when: key_name is defined and key_name != ""

    - name: Configure controller stack - git repo (if defined)
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: set_config
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
        config_key: "{{ controller_project_name }}:gitRepo"
        config_value: "{{ git_repo }}"
      when: git_repo is defined and git_repo != ""

    - name: Configure controller stack - git branch (if defined)
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: set_config
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
        config_key: "{{ controller_project_name }}:gitBranch"
        config_value: "{{ git_branch }}"
      when: git_branch is defined and git_branch != ""
    
    # 依存関係の確認: 必要なスタックが全てデプロイ済みであることを確認
    - name: Check network stack outputs
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: get_outputs
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-network"
        stack_name: "{{ env_name }}"
        output_name: "vpcId"
        mock_output: "mock-vpc-id-for-check-mode"
    
    - name: Set network VPC ID
      ansible.builtin.set_fact:
        network_vpc_id: "{{ stack_output_result.stdout | trim }}"
    
    - name: Check security stack outputs
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: get_outputs
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-security"
        stack_name: "{{ env_name }}"
        output_name: "jenkinsSecurityGroupId"
        mock_output: "mock-jenkins-sg-id"
    
    - name: Set Jenkins security group ID
      ansible.builtin.set_fact:
        jenkins_sg_id: "{{ stack_output_result.stdout | trim }}"
    
    - name: Check storage stack outputs
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: get_outputs
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-storage"
        stack_name: "{{ env_name }}"
        output_name: "efsFileSystemId"
        mock_output: "mock-efs-id"
    
    - name: Set EFS file system ID
      ansible.builtin.set_fact:
        efs_file_system_id: "{{ stack_output_result.stdout | trim }}"
    
    - name: Check loadbalancer stack outputs
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: get_outputs
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-loadbalancer"
        stack_name: "{{ env_name }}"
        output_name: "blueTargetGroupArn"
        mock_output: "mock-blue-tg-arn"
    
    - name: Set Blue target group ARN
      ansible.builtin.set_fact:
        blue_target_group_arn: "{{ stack_output_result.stdout | trim }}"
    
    - name: Display dependency validation
      ansible.builtin.debug:
        msg: |
          Dependency validation:
          VPC ID from network stack: {{ network_vpc_id }}
          Jenkins Security Group ID from security stack: {{ jenkins_sg_id }}
          EFS File System ID from storage stack: {{ efs_file_system_id }}
          Blue Target Group ARN from loadbalancer stack: {{ blue_target_group_arn }}
    
    # Pulumiプレビュー
    - name: Preview controller deployment
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: preview
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
    
    # Pulumiデプロイ
    - name: Deploy controller stack
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: deploy
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
    
    # デプロイ後に少し待機してスタックが完全に更新されるのを待つ
    - name: Wait for stack outputs to be available
      ansible.builtin.pause:
        seconds: 10
      when: not ansible_check_mode
    
    # Jenkinsインスタンス情報の取得
    - name: Get Jenkins instance ID
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: get_outputs
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
        stack_name: "{{ env_name }}"
        output_name: "jenkinsInstanceId"
        mock_output: "mock-jenkins-instance-id"
    
    - name: Set Jenkins instance ID
      ansible.builtin.set_fact:
        jenkins_instance_id: "{{ stack_output_result.stdout | trim }}"
    
    - name: Set controller facts for use in other playbooks
      ansible.builtin.set_fact:
        controller_deployed: true
        jenkins_instance_id: "{{ jenkins_instance_id }}"
        controller_stack_name: "{{ controller_project_name }}"
      
    - name: Summary of controller deployment
      ansible.builtin.debug:
        msg: |
          Jenkins Controller Infrastructure Deployed Successfully:
          - Instance ID: {{ jenkins_instance_id }}
          - Jenkins Color: {{ jenkins_color }}
          - Recovery Mode: {{ recovery_mode }}
  
  rescue:
    - name: Set controller deployment status on failure
      ansible.builtin.set_fact:
        controller_deployed: false
      
    - name: Display error
      ansible.builtin.debug:
        msg: "Failed to deploy controller infrastructure. See error details above."
      
    - name: Fail the playbook
      ansible.builtin.fail:
        msg: "Controller deployment failed."
