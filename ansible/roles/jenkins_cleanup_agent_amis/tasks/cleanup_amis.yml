---
# AMIとスナップショットのクリーンアップ

- name: Cleanup AMIs and Snapshots
  block:
    # 全パターンに対してAMIを検索
    - name: Find all AMIs for each pattern
      ansible.builtin.include_tasks: find_amis_by_pattern.yml
      vars:
        pattern: "{{ item }}"
      loop: "{{ ami_name_patterns }}"
      register: ami_search_results

    # 結果を集約
    - name: Aggregate all found AMIs
      ansible.builtin.set_fact:
        all_found_amis: >-
          {%- set amis = [] -%}
          {%- for pattern_result in ami_pattern_results | default([]) -%}
            {%- for ami in pattern_result.amis | default([]) -%}
              {%- set _ = amis.append(ami) -%}
            {%- endfor -%}
          {%- endfor -%}
          {{ amis | unique(attribute='ImageId') }}
        ami_pattern_results: []

    # 各パターンごとに世代管理
    - name: Process retention for each AMI pattern
      ansible.builtin.include_tasks: process_ami_retention.yml
      vars:
        pattern: "{{ item }}"
      loop: "{{ ami_name_patterns }}"

    # 削除対象AMIの集約
    - name: Aggregate AMIs to delete
      ansible.builtin.set_fact:
        all_amis_to_delete: >-
          {%- set amis = [] -%}
          {%- for pattern_result in ami_deletion_lists | default([]) -%}
            {%- for ami in pattern_result.to_delete | default([]) -%}
              {%- set _ = amis.append(ami) -%}
            {%- endfor -%}
          {%- endfor -%}
          {{ amis | unique(attribute='ImageId') }}

    # 削除サマリーの表示
    - name: Display deletion summary
      ansible.builtin.debug:
        msg:
          - "=========================================="
          - "AMI Deletion Summary"
          - "=========================================="
          - "Total AMIs found: {{ all_found_amis | length }}"
          - "AMIs to delete: {{ all_amis_to_delete | length }}"
          - "AMIs to keep: {{ (all_found_amis | length) - (all_amis_to_delete | length) }}"
          - "=========================================="

    # 削除対象の詳細表示
    - name: List AMIs to be deleted
      ansible.builtin.debug:
        msg:
          - "AMI: {{ item.Name }} ({{ item.ImageId }})"
          - "Created: {{ item.CreationDate }}"
          - "Architecture: {{ item.Architecture }}"
      loop: "{{ all_amis_to_delete }}"
      when: 
        - all_amis_to_delete | length > 0
        - verbose_logging

    # ドライランモードの確認
    - name: Dry run mode - skip actual deletion
      ansible.builtin.debug:
        msg: "DRY RUN MODE - No resources will be deleted"
      when: dry_run | bool

    # AMIの削除
    - name: Deregister AMIs
      ansible.builtin.include_role:
        name: aws_cli_helper
        tasks_from: execute
      vars:
        aws_command: "aws ec2 deregister-image --image-id {{ item.ImageId }}"
        operation_name: "Deregister AMI {{ item.Name }}"
        parse_output: false
      loop: "{{ all_amis_to_delete }}"
      loop_control:
        label: "{{ item.Name }} ({{ item.ImageId }})"
      when: 
        - not dry_run | bool
        - cleanup_targets.amis
        - all_amis_to_delete | length > 0
      register: ami_deregister_results

    # スナップショットの削除
    - name: Delete associated snapshots
      ansible.builtin.include_tasks: delete_snapshots.yml
      when: 
        - not dry_run | bool
        - cleanup_targets.snapshots
        - all_amis_to_delete | length > 0

    # 削除検証の準備
    - name: Prepare resources for verification
      ansible.builtin.set_fact:
        amis_to_verify: "{{ all_amis_to_delete }}"
        snapshots_to_verify: "{{ all_snapshot_ids | default([]) }}"
      when: 
        - not dry_run | bool
        - all_amis_to_delete | length > 0

    # 削除後の検証（非ドライランモードのみ）
    - name: Verify deletion
      ansible.builtin.include_tasks: verify_deletion.yml
      when: 
        - not dry_run | bool
        - (all_amis_to_delete | length > 0 or all_snapshot_ids | default([]) | length > 0)

    # 結果の記録
    - name: Record cleanup results
      ansible.builtin.set_fact:
        ami_cleanup_results:
          total_found: "{{ all_found_amis | length }}"
          total_deleted: "{{ all_amis_to_delete | length if not dry_run else 0 }}"
          deleted_amis: "{{ all_amis_to_delete if not dry_run else [] }}"
          dry_run: "{{ dry_run }}"
          timestamp: "{{ ansible_date_time.iso8601 }}"
          verification: "{{ deletion_verification_summary | default({}) }}"

  rescue:
    - name: Handle cleanup errors
      ansible.builtin.debug:
        msg:
          - "ERROR: AMI cleanup failed"
          - "Error: {{ ansible_failed_result.msg | default('Unknown error') }}"
      
    - name: Set error flag
      ansible.builtin.set_fact:
        ami_cleanup_failed: true