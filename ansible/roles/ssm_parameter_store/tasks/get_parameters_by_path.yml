---
# パス指定でSSMパラメータを一括取得するタスク

- name: Validate required variables
  ansible.builtin.fail:
    msg: "Required variable 'parameter_path' is not defined"
  when: parameter_path is not defined or parameter_path | length == 0

# パスの正規化（末尾にスラッシュを確保）
- name: Normalize parameter path
  ansible.builtin.set_fact:
    normalized_path: "{{ parameter_path if parameter_path.endswith('/') else parameter_path + '/' }}"

- name: Get parameters by path
  block:
    # パラメータ情報を取得
    - name: Get parameter information by path
      community.aws.ssm_parameter_info:
        path: "{{ normalized_path }}"
        recursive: "{{ recursive | default(true) }}"
        region: "{{ ssm_parameter_store_region }}"
      register: parameters_info

    # 初期化
    - name: Initialize results
      ansible.builtin.set_fact:
        ssm_parameters: {}
        ssm_parameter_metadata: {}

    # 各パラメータの値を取得
    - name: Get parameter values
      community.aws.ssm_parameter:
        name: "{{ item.name }}"
        region: "{{ ssm_parameter_store_region }}"
        decryption: "{{ decrypt | default(true) }}"
      register: param_values
      loop: "{{ parameters_info.parameters }}"
      when: parameters_info.parameters | length > 0
      no_log: true

    # 結果を処理
    - name: Process parameter values
      ansible.builtin.set_fact:
        ssm_parameters: >-
          {{
            ssm_parameters | combine({
              item.item.name: item.parameter_value
            })
          }}
      loop: "{{ param_values.results }}"
      when: 
        - param_values.results is defined
        - item is not failed
      no_log: true

    # メタデータの収集
    - name: Collect parameter metadata
      ansible.builtin.set_fact:
        ssm_parameter_metadata: >-
          {{
            ssm_parameter_metadata | combine({
              item.name: {
                'type': item.type | default('String'),
                'version': item.version | default(1),
                'last_modified': item.last_modified_date | default(''),
                'is_secure': item.type == 'SecureString' or 
                  (ssm_parameter_store_auto_secure and 
                   item.name | lower | regex_search('(' + ssm_parameter_store_all_secure_keywords | join('|') + ')') is not none)
              }
            })
          }}
      loop: "{{ parameters_info.parameters }}"
      when: parameters_info.parameters | length > 0

    - name: Set success status
      ansible.builtin.set_fact:
        ssm_operation_success: true
        ssm_parameter_count: "{{ ssm_parameters | length }}"

  rescue:
    - name: Handle errors
      ansible.builtin.set_fact:
        ssm_operation_error: "{{ ansible_failed_result.msg | default('Failed to retrieve parameters') }}"
        ssm_operation_success: false

# デバッグ出力
- name: Display summary
  ansible.builtin.debug:
    msg: |
      Parameter path: {{ normalized_path }}
      Recursive: {{ recursive | default(true) }}
      Parameters found: {{ ssm_parameter_count | default(0) }}
      Success: {{ ssm_operation_success }}
  when: ssm_parameter_store_verbose

- name: Display parameter names (secure values masked)
  ansible.builtin.debug:
    msg: |
      Retrieved parameters:
      {% for name, metadata in ssm_parameter_metadata.items() %}
      - {{ name }} ({{ metadata.type }}){% if metadata.is_secure %} [SECURE]{% endif %}
      {% endfor %}
  when: 
    - ssm_parameter_store_verbose
    - ssm_operation_success
    - ssm_parameter_metadata | length > 0
