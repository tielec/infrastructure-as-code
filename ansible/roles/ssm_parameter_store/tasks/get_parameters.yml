---
# 複数のSSMパラメータを一括取得するタスク

- name: Validate inputs
  ansible.builtin.assert:
    that:
      - parameter_names is defined
      - parameter_names | length > 0
    fail_msg: "Required variable 'parameter_names' must be defined and not empty"

# 初期化
- name: Initialize results
  ansible.builtin.set_fact:
    ssm_parameters: {}
    ssm_parameter_metadata: {}
    ssm_failed_parameters: []
    _batch_size: "{{ ssm_parameter_store_batch_size | default(10) | int }}"

# バッチ処理でパラメータを取得
- name: Process parameters in batches
  ansible.builtin.include_tasks: _process_parameter_batch.yml
  vars:
    batch_names: "{{ item }}"
    batch_index: "{{ ansible_loop.index }}"
  loop: "{{ parameter_names | batch(_batch_size) | list }}"
  loop_control:
    loop_var: item
    extended: true

# 結果の集計
- name: Aggregate batch results
  ansible.builtin.set_fact:
    ssm_operation_success: "{{ ssm_parameters | length > 0 }}"
    ssm_parameter_count: "{{ ssm_parameters | length }}"

# 失敗したパラメータの特定
- name: Identify failed parameters
  ansible.builtin.set_fact:
    ssm_failed_parameters: "{{ parameter_names | difference(ssm_parameters.keys() | list) }}"

# デバッグ出力
- name: Display operation summary
  when: ssm_parameter_store_verbose
  ansible.builtin.debug:
    msg: |
      Total requested: {{ parameter_names | length }}
      Successfully retrieved: {{ ssm_parameter_count }}
      Failed: {{ ssm_failed_parameters | length }}
      {% if ssm_failed_parameters | length > 0 and ssm_parameter_store_debug %}
      Failed parameters:
      {% for param in ssm_failed_parameters %}
      - {{ param }}
      {% endfor %}
      {% endif %}
