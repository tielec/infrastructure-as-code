# AWS認証情報のセットアップと確認

- name: Check scripts directory permissions
  ansible.builtin.stat:
    path: "{{ item }}"
  register: script_stats
  loop:
    - "{{ playbook_dir }}/../../scripts/aws/aws-env.sh"
    - "{{ playbook_dir }}/../../scripts/aws/setup-aws-credentials.sh"
  no_log: true  # 詳細なステータス情報を抑制

- name: Ensure AWS scripts have execute permissions
  ansible.builtin.file:
    path: "{{ item.item }}"  # item.item が stat タスクからの元のパス
    mode: '0755'
    state: file
  loop: "{{ script_stats.results }}"
  when: item.stat.exists and not item.stat.executable
  register: script_permission_updates
  no_log: true  # 詳細な出力を抑制

- name: Display script permission updates
  ansible.builtin.debug:
    msg: "実行権限を付与しました: {{ item.path | basename }}"
  loop: "{{ script_permission_updates.results }}"
  when: item.changed | default(false)
  loop_control:
    label: "{{ item.path | basename if item.path is defined else 'unknown' }}"

- name: Check AWS credentials
  ansible.builtin.shell: aws sts get-caller-identity
  register: aws_cred_check
  changed_when: false
  ignore_errors: true
  no_log: false  # 出力は認証情報を含まないため表示可能

- name: Display AWS credentials status
  ansible.builtin.debug:
    msg: "AWS credentials: {{ 'Configured correctly' if aws_cred_check.rc == 0 else 'Not configured or invalid' }}"

- name: Configure AWS credentials if not already set
  ansible.builtin.shell: |
    source {{ aws_credentials_script_path }} > /dev/null
  args:
    executable: /bin/bash
  when: aws_cred_check.rc != 0
  no_log: true  # 認証情報が含まれる可能性があるため非表示

- name: Verify AWS credentials after configuration
  ansible.builtin.shell: aws sts get-caller-identity
  register: aws_cred_verify
  changed_when: false
  failed_when: aws_cred_verify.rc != 0
  when: aws_cred_check.rc != 0

- name: Create AWS variables template for Pulumi commands
  ansible.builtin.set_fact:
    aws_env_vars: >
      AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id) 
      AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key) 
      AWS_SESSION_TOKEN=$(aws configure get aws_session_token 2>/dev/null || echo "") 
      && export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN &&
  when: aws_cred_check.rc == 0 or aws_cred_verify.rc == 0
