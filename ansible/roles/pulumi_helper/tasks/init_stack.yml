# スタックの初期化とセットアップのヘルパータスク

- name: Initialize and set up Pulumi stack
  block:
    - name: Verify project directory exists
      ansible.builtin.stat:
        path: "{{ pulumi_project_path }}"
      register: project_dir
      failed_when: not project_dir.stat.exists
    
    - name: Verify required variables
      ansible.builtin.fail:
        msg: "Required variable 'stack_name' is not defined"
      when: stack_name is not defined or stack_name | length == 0
    
    # スタック名を解決（組織名を含む完全な名前を取得）
    - name: Resolve stack name
      ansible.builtin.include_tasks: resolve_stack_name.yml
    
    # スタックの存在確認
    - name: Check if stack exists
      ansible.builtin.include_tasks: check_stack_exists.yml
    
    # スタックが存在しない場合は作成
    - name: Initialize new stack if not exists
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        source {{ playbook_dir }}/../../scripts/aws-env.sh > /dev/null
        eval $({{ playbook_dir }}/../../scripts/aws-env.sh) > /dev/null
        export PULUMI_ACCESS_TOKEN="{{ lookup('env', 'PULUMI_ACCESS_TOKEN') }}"
        sudo -E {{ pulumi_bin_path }} stack init {{ resolved_stack_name }}
      register: stack_init_result
      changed_when: stack_init_result.rc == 0
      when: 
        - not ansible_check_mode
        - not stack_exists
    
    # NPMの依存関係をインストール
    - name: Install npm dependencies if package.json exists
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        [ -f package.json ] && npm install || echo "No package.json found"
      register: npm_install_result
      changed_when: "'up to date' not in npm_install_result.stdout"
      when: not ansible_check_mode
    
    # スタックを選択
    - name: Select stack
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        source {{ playbook_dir }}/../../scripts/aws-env.sh > /dev/null
        eval $({{ playbook_dir }}/../../scripts/aws-env.sh) > /dev/null
        export PULUMI_ACCESS_TOKEN="{{ lookup('env', 'PULUMI_ACCESS_TOKEN') }}"
        # まず単純な名前で試し、失敗したら解決済み名前を使用
        sudo -E {{ pulumi_bin_path }} stack select {{ stack_name }} 2>/dev/null || \
        sudo -E {{ pulumi_bin_path }} stack select {{ resolved_stack_name }}
      register: stack_select_result
      changed_when: false
      when: not ansible_check_mode
    
    - name: Set success status
      ansible.builtin.set_fact:
        stack_init_succeeded: true
        current_stack_name: "{{ resolved_stack_name }}"
        
  rescue:
    - name: Display error message
      ansible.builtin.debug:
        msg: "Failed to initialize Pulumi stack '{{ stack_name }}'"
    
    - name: Set failure status
      ansible.builtin.set_fact:
        stack_init_failed: true

- name: Mock stack initialization (check mode)
  ansible.builtin.debug:
    msg: "Would initialize and select Pulumi stack: {{ stack_name }} (check mode active)"
  when: ansible_check_mode
