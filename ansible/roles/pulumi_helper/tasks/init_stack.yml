# スタックの初期化とセットアップのヘルパータスク

- name: Initialize and set up Pulumi stack
  block:
    - name: Check if project directory exists
      ansible.builtin.stat:
        path: "{{ pulumi_project_path }}"
      register: project_dir
      failed_when: not project_dir.stat.exists
    
    - name: Verify required variables
      ansible.builtin.fail:
        msg: "Required variable 'stack_name' is not defined"
      when: stack_name is not defined or stack_name | length == 0
    
    - name: Check if Pulumi stack exists
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        {{ pulumi_commands.stack_ls }} | grep {{ stack_name }} || echo "stack_not_found"
      register: stack_select_result
      changed_when: false
      failed_when: false
      when: not ansible_check_mode
    
    - name: Initialize Pulumi stack if not exists
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        source {{ playbook_dir }}/../../scripts/aws-env.sh > /dev/null
        eval $({{ playbook_dir }}/../../scripts/aws-env.sh) > /dev/null
        sudo -E {{ pulumi_bin_path }} stack init {{ stack_name }}
      register: stack_init_result
      changed_when: stack_init_result.rc == 0
      when: 
        - not ansible_check_mode
        - stack_select_result is defined
        - "'stack_not_found' in stack_select_result.stdout"
    
    - name: Display stack initialization result
      ansible.builtin.debug:
        msg: "Initialized new Pulumi stack: {{ stack_name }}"
      when: 
        - not ansible_check_mode
        - stack_init_result is defined
        - stack_init_result.changed
    
    - name: Check if package.json exists
      ansible.builtin.stat:
        path: "{{ pulumi_project_path }}/package.json"
      register: package_json_check
      when: not ansible_check_mode
    
    - name: Install npm dependencies
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        npm install
      register: npm_install_result
      changed_when: "'up to date' not in npm_install_result.stdout"
      when: 
        - not ansible_check_mode
        - package_json_check.stat.exists | default(false)
    
    - name: Display npm install result
      ansible.builtin.debug:
        msg: "npm install completed: {{ 'packages updated' if npm_install_result.changed else 'already up to date' }}"
      when:
        - not ansible_check_mode
        - npm_install_result is defined
        - ansible_verbosity > 0
    
    - name: Select stack
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        source {{ playbook_dir }}/../../scripts/aws-env.sh > /dev/null
        eval $({{ playbook_dir }}/../../scripts/aws-env.sh) > /dev/null
        sudo -E {{ pulumi_bin_path }} stack select {{ stack_name }}
      register: stack_select_result
      changed_when: false
      when: not ansible_check_mode
    
    - name: Set stack initialization success status
      ansible.builtin.set_fact:
        stack_init_succeeded: true
        current_stack_name: "{{ stack_name }}"
  rescue:
    - name: Display error message on stack initialization failure
      ansible.builtin.debug:
        msg: "Failed to initialize Pulumi stack. Check error message above."
    
    - name: Set stack initialization failure status
      ansible.builtin.set_fact:
        stack_init_failed: true

- name: Mock stack initialization (check mode)
  ansible.builtin.debug:
    msg: "Would initialize and select Pulumi stack: {{ stack_name | default('undefined') }} (check mode active)"
  when: ansible_check_mode
