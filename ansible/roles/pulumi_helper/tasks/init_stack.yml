# スタックの初期化とセットアップのヘルパータスク

# 認証処理を実行（既に認証済みの場合はスキップ）
- name: Ensure Pulumi authentication
  ansible.builtin.include_tasks: login.yml
  when: pulumi_authenticated is not defined

- name: Initialize and set up Pulumi stack
  block:
    # 基本情報のみ表示
    - name: Display stack initialization info
      ansible.builtin.debug:
        msg: "Initializing stack '{{ stack_name }}' in {{ pulumi_project_path | basename }}"
    
    - name: Verify project directory exists
      ansible.builtin.stat:
        path: "{{ pulumi_project_path }}"
      register: project_dir
      failed_when: not project_dir.stat.exists
    
    - name: Verify required variables
      ansible.builtin.fail:
        msg: "Required variable 'stack_name' is not defined"
      when: stack_name is not defined or stack_name | length == 0
    
    # スタック名を解決（組織名を含む完全な名前を取得）
    - name: Resolve stack name
      ansible.builtin.include_tasks: resolve_stack_name.yml
    
    # スタックの存在確認
    - name: Check if stack exists
      ansible.builtin.include_tasks: check_stack_exists.yml
    
    # スタックが存在しない場合は作成
    - name: Initialize new stack if not exists
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        {{ pulumi_env_prefix }}
        {{ pulumi_sudo_cmd }} stack init {{ resolved_stack_name }}
      register: stack_init_result
      changed_when: stack_init_result.rc == 0
      when: 
        - not ansible_check_mode
        - not stack_exists
    
    - name: Report stack creation
      ansible.builtin.debug:
        msg: "Created new stack: {{ resolved_stack_name }}"
      when:
        - not ansible_check_mode
        - not stack_exists
        - stack_init_result.rc == 0
    
    # NPMの依存関係をインストール
    - name: Check for package.json
      ansible.builtin.stat:
        path: "{{ pulumi_project_path }}/package.json"
      register: package_json_check
    
    - name: Install npm dependencies if package.json exists
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        npm install --quiet
      register: npm_install_result
      changed_when: "'up to date' not in npm_install_result.stdout"
      when: 
        - not ansible_check_mode
        - package_json_check.stat.exists
    
    - name: Report npm install status
      ansible.builtin.debug:
        msg: "npm dependencies: {{ 'Updated' if npm_install_result.changed else 'Already up to date' }}"
      when:
        - not ansible_check_mode
        - package_json_check.stat.exists
        - npm_install_result.changed
    
    # スタックを選択
    - name: Select stack
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        {{ pulumi_env_prefix }}
        
        # まず単純な名前で試し、失敗したら解決済み名前を使用
        if {{ pulumi_sudo_cmd }} stack select {{ stack_name }} 2>/dev/null; then
          echo "{{ stack_name }}"
        else
          {{ pulumi_sudo_cmd }} stack select {{ resolved_stack_name }}
          echo "{{ resolved_stack_name }}"
        fi
      register: stack_select_result
      changed_when: false
      when: not ansible_check_mode
    
    # 最終確認（verbosityが高い場合のみ）
    - name: Verify current stack
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        {{ pulumi_env_prefix }} && {{ pulumi_sudo_cmd }} stack --show-name
      register: current_stack_verify
      changed_when: false
      when: 
        - not ansible_check_mode
        - ansible_verbosity > 1
    
    - name: Report initialization complete
      ansible.builtin.debug:
        msg: "Stack '{{ stack_select_result.stdout | default(stack_name) }}' is ready"
    
    - name: Set success status
      ansible.builtin.set_fact:
        stack_init_succeeded: true
        current_stack_name: "{{ resolved_stack_name }}"
        
  rescue:
    - name: Report initialization failure
      ansible.builtin.debug:
        msg: |
          Failed to initialize stack '{{ stack_name }}'.
          {% if 'already exists' in stack_init_result.stderr | default('') %}
          Reason: Stack already exists
          {% elif 'npm ERR!' in npm_install_result.stderr | default('') %}
          Reason: npm dependency installation failed
          {% elif 'no stack named' in stack_select_result.stderr | default('') %}
          Reason: Failed to select stack
          {% else %}
          Error: {{ ansible_failed_result.msg | default('Unknown error') }}
          {% endif %}
    
    - name: Set failure status
      ansible.builtin.set_fact:
        stack_init_failed: true
    
    # エラー詳細はverbosityが高い場合のみ表示
    - name: Display detailed error information
      ansible.builtin.debug:
        msg: |
          Detailed error information:
          {% if stack_init_result is defined and stack_init_result.stderr is defined and stack_init_result.stderr %}
          Stack init: {{ stack_init_result.stderr }}
          {% endif %}
          {% if npm_install_result is defined and npm_install_result.stderr is defined and npm_install_result.stderr %}
          NPM install: {{ npm_install_result.stderr }}
          {% endif %}
          {% if stack_select_result is defined and stack_select_result.stderr is defined and stack_select_result.stderr %}
          Stack select: {{ stack_select_result.stderr }}
          {% endif %}
      when: ansible_verbosity > 1
    
    - name: Fail the playbook
      ansible.builtin.fail:
        msg: "Stack initialization failed. Run with -v for more details."

- name: Mock stack initialization (check mode)
  ansible.builtin.debug:
    msg: "Would initialize stack '{{ stack_name }}' (check mode)"
  when: ansible_check_mode
