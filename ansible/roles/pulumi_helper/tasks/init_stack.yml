# スタックの初期化とセットアップのヘルパータスク

# 認証処理を実行（既に認証済みの場合はスキップ）
- name: Ensure Pulumi authentication
  ansible.builtin.include_tasks: login.yml
  when: pulumi_authenticated is not defined

- name: Initialize and set up Pulumi stack
  block:
    # 操作内容を表示
    - name: Display stack initialization info
      ansible.builtin.debug:
        msg: |
          Initializing Pulumi stack:
          Project: {{ pulumi_project_path | basename }}
          Stack: {{ stack_name }}
    
    - name: Verify project directory exists
      ansible.builtin.stat:
        path: "{{ pulumi_project_path }}"
      register: project_dir
      failed_when: not project_dir.stat.exists
    
    - name: Verify required variables
      ansible.builtin.fail:
        msg: "Required variable 'stack_name' is not defined"
      when: stack_name is not defined or stack_name | length == 0
    
    # スタック名を解決（組織名を含む完全な名前を取得）
    - name: Resolve stack name
      ansible.builtin.include_tasks: resolve_stack_name.yml
    
    # 解決結果は重要なので表示
    - name: Display resolved stack name
      ansible.builtin.debug:
        msg: "Resolved stack name: {{ resolved_stack_name }}"
      when: resolved_stack_name != stack_name
    
    # スタックの存在確認
    - name: Check if stack exists
      ansible.builtin.include_tasks: check_stack_exists.yml
    
    # アクションを明示
    - name: Display stack action
      ansible.builtin.debug:
        msg: "Stack {{ 'already exists - will select it' if stack_exists else 'does not exist - will create it' }}"
    
    # スタックが存在しない場合は作成
    - name: Initialize new stack if not exists
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        {{ pulumi_env_prefix }}
        {{ pulumi_sudo_cmd }} stack init {{ resolved_stack_name }}
      register: stack_init_result
      changed_when: stack_init_result.rc == 0
      when: 
        - not ansible_check_mode
        - not stack_exists
    
    - name: Report stack creation
      ansible.builtin.debug:
        msg: "✓ Created new stack: {{ resolved_stack_name }}"
      when:
        - not ansible_check_mode
        - not stack_exists
        - stack_init_result.rc == 0
    
    # NPMの依存関係をインストール
    - name: Check for package.json
      ansible.builtin.stat:
        path: "{{ pulumi_project_path }}/package.json"
      register: package_json_check
    
    - name: Install npm dependencies if package.json exists
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        npm install
      register: npm_install_result
      changed_when: "'up to date' not in npm_install_result.stdout"
      when: 
        - not ansible_check_mode
        - package_json_check.stat.exists
    
    - name: Report npm install status
      ansible.builtin.debug:
        msg: "✓ npm dependencies {{ 'installed/updated' if npm_install_result.changed else 'already up to date' }}"
      when:
        - not ansible_check_mode
        - package_json_check.stat.exists
    
    # スタックを選択
    - name: Select stack
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        {{ pulumi_env_prefix }}
        
        # まず単純な名前で試し、失敗したら解決済み名前を使用
        if {{ pulumi_sudo_cmd }} stack select {{ stack_name }} 2>/dev/null; then
          echo "{{ stack_name }}"
        else
          {{ pulumi_sudo_cmd }} stack select {{ resolved_stack_name }}
          echo "{{ resolved_stack_name }}"
        fi
      register: stack_select_result
      changed_when: false
      when: not ansible_check_mode
    
    # 最終状態を表示
    - name: Report initialization complete
      ansible.builtin.debug:
        msg: |
          ✓ Stack initialization complete
          Current stack: {{ stack_select_result.stdout | default(stack_name) }}
    
    - name: Set success status
      ansible.builtin.set_fact:
        stack_init_succeeded: true
        current_stack_name: "{{ resolved_stack_name }}"
        
  rescue:
    - name: Report initialization failure
      ansible.builtin.debug:
        msg: |
          ✗ Stack initialization failed
          Stack: {{ stack_name }}
          Project: {{ pulumi_project_path | basename }}
          Error: {{ ansible_failed_result.msg | default('Unknown error') }}
    
    # エラー詳細は重要なので表示
    - name: Display stack init error
      ansible.builtin.debug:
        msg: |
          Stack init error:
          {{ stack_init_result.stderr }}
      when: 
        - stack_init_result is defined 
        - stack_init_result.stderr is defined 
        - stack_init_result.stderr
    
    - name: Display npm install error
      ansible.builtin.debug:
        msg: |
          NPM install error:
          {{ npm_install_result.stderr }}
      when: 
        - npm_install_result is defined 
        - npm_install_result.stderr is defined 
        - npm_install_result.stderr
        - "'npm ERR!' in npm_install_result.stderr"
    
    - name: Display stack select error
      ansible.builtin.debug:
        msg: |
          Stack select error:
          {{ stack_select_result.stderr }}
      when: 
        - stack_select_result is defined 
        - stack_select_result.stderr is defined 
        - stack_select_result.stderr
    
    - name: Set failure status
      ansible.builtin.set_fact:
        stack_init_failed: true
    
    - name: Fail the playbook
      ansible.builtin.fail:
        msg: |
          Stack initialization failed.
          {% if 'already exists' in stack_init_result.stderr | default('') %}
          A stack with this name already exists. Use a different name or select existing stack.
          {% elif 'npm ERR!' in npm_install_result.stderr | default('') %}
          npm dependency installation failed. Check package.json and network connectivity.
          {% elif 'no stack named' in stack_select_result.stderr | default('') %}
          Failed to select the stack. The stack may not exist or you may not have access.
          {% else %}
          See error details above.
          {% endif %}

- name: Mock stack initialization (check mode)
  ansible.builtin.debug:
    msg: "Would initialize stack '{{ stack_name }}' in {{ pulumi_project_path | basename }} (check mode)"
  when: ansible_check_mode