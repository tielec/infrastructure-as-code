# Pulumiの認証とトークン設定を一元管理するタスク
# Pulumi CloudとS3バックエンドの両方に対応

- name: Ensure Pulumi authentication
  block:
    # Pulumiのパス設定
    - name: Set Pulumi binary path if not already set
      ansible.builtin.set_fact:
        pulumi_bin_path: "/usr/local/bin/pulumi"
      when: pulumi_bin_path is not defined

    # バックエンドタイプの検証
    - name: Validate backend type
      ansible.builtin.fail:
        msg: "Invalid pulumi_backend_type: {{ pulumi_backend_type }}. Must be 'cloud' or 's3'"
      when: pulumi_backend_type not in ['cloud', 's3']

    # Pulumi Cloud認証の処理
    - name: Handle Pulumi Cloud authentication
      when: pulumi_backend_type == 'cloud'
      block:
        # PULUMI_ACCESS_TOKENの確認
        - name: Check for PULUMI_ACCESS_TOKEN in environment
          ansible.builtin.set_fact:
            pulumi_token_set: "{{ lookup('env', 'PULUMI_ACCESS_TOKEN') | length > 0 }}"
            pulumi_access_token: "{{ lookup('env', 'PULUMI_ACCESS_TOKEN') }}"
          no_log: true

        - name: Fail if PULUMI_ACCESS_TOKEN is not set
          ansible.builtin.fail:
            msg: |
              ERROR: PULUMI_ACCESS_TOKEN environment variable is not set.
              Please set the PULUMI_ACCESS_TOKEN environment variable before running this playbook:
              export PULUMI_ACCESS_TOKEN="pul-YOUR_ACCESS_TOKEN"
          when: not pulumi_token_set

        # ログイン状態の確認
        - name: Check current Pulumi Cloud login status
          ansible.builtin.shell: |
            export PULUMI_ACCESS_TOKEN="{{ pulumi_access_token }}"
            sudo -E {{ pulumi_bin_path }} whoami
          register: pulumi_login_check
          changed_when: false
          failed_when: false
          no_log: true

        # ログインが必要な場合のみログイン実行
        - name: Login to Pulumi Cloud if not already logged in
          ansible.builtin.shell: |
            export PULUMI_ACCESS_TOKEN="{{ pulumi_access_token }}"
            sudo -E {{ pulumi_bin_path }} login --cloud-url {{ pulumi_cloud_url }}
          when: pulumi_login_check.rc != 0
          register: pulumi_login_result
          changed_when: pulumi_login_result.rc == 0
          no_log: true

        # 環境変数をエクスポートする共通コマンドを定義
        - name: Set Pulumi Cloud environment prefix
          ansible.builtin.set_fact:
            pulumi_env_prefix: >-
              export PULUMI_ACCESS_TOKEN="{{ pulumi_access_token }}";
              source {{ playbook_dir }}/../../scripts/aws/aws-env.sh > /dev/null &&
              eval $({{ playbook_dir }}/../../scripts/aws/aws-env.sh) > /dev/null

    # S3バックエンド認証の処理
    - name: Handle S3 backend authentication
      when: pulumi_backend_type == 's3'
      block:
        # S3バケット名が空の場合はSSMから取得
        - name: Get S3 bucket name from SSM if not set
          when: pulumi_s3_bucket is not defined or pulumi_s3_bucket | length == 0
          block:
            - name: Retrieve S3 bucket name from SSM Parameter Store
              ansible.builtin.include_role:
                name: ssm_parameter_store
                tasks_from: get_parameter
              vars:
                parameter_name: "/bootstrap/pulumi/s3bucket-name"
                decrypt: false
                store_as: "pulumi_s3_bucket_from_ssm"
                ssm_parameter_store_fail_on_missing: false
                default_value: ""

            - name: Set S3 bucket name from SSM
              ansible.builtin.set_fact:
                pulumi_s3_bucket: "{{ pulumi_s3_bucket_from_ssm }}"
              when: pulumi_s3_bucket_from_ssm | length > 0

            - name: Fail if S3 bucket name cannot be determined
              ansible.builtin.fail:
                msg: |
                  ERROR: S3 bucket name is not configured.
                  
                  Please either:
                  1. Set it in ansible/inventory/group_vars/all.yml under pulumi.s3.bucket
                  2. Or ensure it exists in SSM parameter: /bootstrap/pulumi/s3bucket-name
                  3. Or run the bootstrap setup to create the S3 bucket
              when: pulumi_s3_bucket is not defined or pulumi_s3_bucket | length == 0

        # まず環境変数をチェック
        - name: Check for PULUMI_CONFIG_PASSPHRASE in environment
          ansible.builtin.set_fact:
            pulumi_passphrase_from_env: "{{ lookup('env', 'PULUMI_CONFIG_PASSPHRASE') }}"
          no_log: true

        # 環境変数がない場合はSSMから取得を試みる
        - name: Get passphrase from SSM if not in environment
          when: pulumi_passphrase_from_env | length == 0
          block:
            - name: Retrieve PULUMI_CONFIG_PASSPHRASE from SSM Parameter Store
              ansible.builtin.include_role:
                name: ssm_parameter_store
                tasks_from: get_parameter
              vars:
                parameter_name: "/bootstrap/pulumi/config-passphrase"
                decrypt: true
                store_as: "pulumi_config_passphrase_from_ssm"
                ssm_parameter_store_fail_on_missing: false
                default_value: ""

            - name: Set passphrase from SSM
              ansible.builtin.set_fact:
                pulumi_config_passphrase: "{{ pulumi_config_passphrase_from_ssm }}"
              when: pulumi_config_passphrase_from_ssm | length > 0
              no_log: true

        # 環境変数がある場合はそれを優先使用
        - name: Use passphrase from environment variable
          ansible.builtin.set_fact:
            pulumi_config_passphrase: "{{ pulumi_passphrase_from_env }}"
          when: pulumi_passphrase_from_env | length > 0
          no_log: true

        # パスフレーズが設定されているか最終確認
        - name: Check if passphrase is set
          ansible.builtin.set_fact:
            pulumi_passphrase_set: "{{ pulumi_config_passphrase is defined and pulumi_config_passphrase | length > 0 }}"
          no_log: true

        - name: Display passphrase source (debug mode)
          ansible.builtin.debug:
            msg: "PULUMI_CONFIG_PASSPHRASE source: {{ 'environment variable' if pulumi_passphrase_from_env | length > 0 else 'SSM Parameter Store' if pulumi_config_passphrase | length > 0 else 'not found' }}"
          when: ansible_verbosity > 1

        - name: Fail if PULUMI_CONFIG_PASSPHRASE is not available
          ansible.builtin.fail:
            msg: |
              ERROR: PULUMI_CONFIG_PASSPHRASE is not available.
              S3 backend requires a passphrase for encryption.
              
              Option 1: Run setup-bootstrap.sh to configure passphrase in SSM
              Option 2: Set environment variable manually:
                export PULUMI_CONFIG_PASSPHRASE="your-secure-passphrase"
              Option 3: Get from SSM and export if already configured:
                export PULUMI_CONFIG_PASSPHRASE=$(aws ssm get-parameter --name "/bootstrap/pulumi/config-passphrase" --with-decryption --query 'Parameter.Value' --output text)
          when: not pulumi_passphrase_set

        # 環境変数をエクスポートする共通コマンドを定義（S3用）
        # 注: S3バックエンドのURLはプロジェクトごとに異なるため、
        # 実際のログインは各タスクで行う（init_stack.yml等で処理）
        - name: Set S3 backend environment prefix
          ansible.builtin.set_fact:
            pulumi_env_prefix: >-
              export PULUMI_CONFIG_PASSPHRASE="{{ pulumi_config_passphrase }}";
              export AWS_REGION="{{ pulumi_s3_region }}";
              export AWS_DEFAULT_REGION="{{ pulumi_s3_region }}";
              source {{ playbook_dir }}/../../scripts/aws/aws-env.sh > /dev/null &&
              eval $({{ playbook_dir }}/../../scripts/aws/aws-env.sh) > /dev/null

    # 共通設定
    - name: Set common Pulumi settings
      block:
        # sudoを使用したPulumiコマンドのプレフィックス
        - name: Set Pulumi sudo command prefix
          ansible.builtin.set_fact:
            pulumi_sudo_cmd: "sudo -E {{ pulumi_bin_path }}"

        # Pulumi Cloudの場合のみログイン検証
        - name: Verify Pulumi Cloud login successful
          when: pulumi_backend_type == 'cloud'
          ansible.builtin.shell: |
            export PULUMI_ACCESS_TOKEN="{{ pulumi_access_token }}"
            {{ pulumi_sudo_cmd }} whoami
          register: pulumi_verify_login
          changed_when: false
          failed_when: pulumi_verify_login.rc != 0
          no_log: true

        # verbosity > 1 の場合のみログイン状態を表示
        - name: Display Pulumi login status
          ansible.builtin.debug:
            msg: |
              Pulumi backend type: {{ pulumi_backend_type }}
              {% if pulumi_backend_type == 'cloud' %}
              Authenticated as: {{ pulumi_verify_login.stdout }}
              {% else %}
              S3 backend configured (login will be performed per project)
              S3 bucket: {{ pulumi_s3_bucket }}
              Region: {{ pulumi_s3_region }}
              {% endif %}
          when: ansible_verbosity > 1

        # S3バケット名のソースを表示（S3バックエンドの場合）
        - name: Display S3 bucket source (debug mode)
          ansible.builtin.debug:
            msg: |
              S3 bucket name: {{ pulumi_s3_bucket }}
              Source: {{ 'SSM Parameter Store' if pulumi_s3_bucket_from_ssm is defined else 'all.yml configuration' }}
          when: 
            - pulumi_backend_type == 's3'
            - ansible_verbosity > 1

        # 認証完了フラグを設定（重複チェックを防ぐため）
        - name: Mark authentication as complete
          ansible.builtin.set_fact:
            pulumi_authenticated: true

  rescue:
    - name: Handle authentication failure
      ansible.builtin.fail:
        msg: |
          Failed to authenticate to Pulumi {{ pulumi_backend_type }} backend.
          {% if pulumi_backend_type == 'cloud' %}
          Please ensure:
          1. PULUMI_ACCESS_TOKEN is correctly set
          2. The token is valid and not expired
          3. You have internet connectivity to reach Pulumi service
          {% else %}
          Please ensure:
          1. PULUMI_CONFIG_PASSPHRASE is correctly set
          2. AWS credentials are properly configured
          3. S3 bucket '{{ pulumi_s3_bucket }}' exists and is accessible
          4. AWS region is set to '{{ pulumi_s3_region }}'
          {% endif %}
          
          Error details: {{ ansible_failed_result.msg | default('Unknown error') }}

# チェックモード用の処理
- name: Set mock authentication for check mode
  when: ansible_check_mode
  block:
    - name: Set mock values for check mode
      ansible.builtin.set_fact:
        pulumi_token_set: true
        pulumi_access_token: "mock-token-for-check-mode"
        pulumi_config_passphrase: "mock-passphrase-for-check-mode"
        pulumi_env_prefix: >-
          {% if pulumi_backend_type == 'cloud' %}
          export PULUMI_ACCESS_TOKEN='mock-token-for-check-mode'
          {% else %}
          export PULUMI_CONFIG_PASSPHRASE='mock-passphrase-for-check-mode';
          export AWS_REGION='{{ pulumi_s3_region }}';
          export AWS_DEFAULT_REGION='{{ pulumi_s3_region }}'
          {% endif %}
        pulumi_sudo_cmd: "pulumi"
        pulumi_bin_path: "/usr/local/bin/pulumi"
        pulumi_authenticated: true

    - name: Display check mode notice
      ansible.builtin.debug:
        msg: "Running in check mode - Pulumi {{ pulumi_backend_type }} authentication will be mocked"
      when: ansible_verbosity > 1
