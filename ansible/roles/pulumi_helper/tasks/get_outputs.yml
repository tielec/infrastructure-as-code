# Pulumiスタックの出力を取得するヘルパータスク

# 認証処理を実行（既に認証済みの場合はスキップ）
- name: Ensure Pulumi authentication
  ansible.builtin.include_tasks: login.yml
  when: pulumi_authenticated is not defined

# S3バックエンドの場合、プロジェクト別ログイン
- name: Handle S3 backend project login
  ansible.builtin.include_tasks: s3_backend_login.yml
  when: pulumi_backend_type == 's3'

- name: Get stack outputs
  block:
    # 操作内容を表示（output_nameにデフォルト値を設定）
    - name: Display operation info
      ansible.builtin.debug:
        msg: "Getting output '{{ output_name | default('all outputs') }}' from {{ pulumi_project_path | basename }}/{{ stack_name | default('current stack') }}"
    
    # スタックが選択されているか確認
    - name: Check current stack selection
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        {{ pulumi_env_prefix }} && {{ pulumi_sudo_cmd }} stack --show-name 2>/dev/null || echo "NO_STACK_SELECTED"
      register: current_stack_check
      changed_when: false
      when: not ansible_check_mode
    
    # スタックが選択されていない場合の処理
    - name: Select stack if not selected
      when:
        - not ansible_check_mode
        - current_stack_check.stdout == "NO_STACK_SELECTED"
      block:
        # stack_nameが指定されている場合
        - name: Select specified stack
          when: stack_name is defined
          ansible.builtin.shell: |
            cd {{ pulumi_project_path }}
            {{ pulumi_env_prefix }}
            
            # まず単純な名前で試す
            if {{ pulumi_sudo_cmd }} stack select {{ stack_name }} 2>/dev/null; then
              echo "Selected: {{ stack_name }}"
            else
              # 失敗したら、スタック名を含むものを検索
              MATCHING_STACK=$({{ pulumi_sudo_cmd }} stack ls --json | jq -r '.[].name | select(endswith("/{{ stack_name }}"))' | head -1)
              if [ -n "$MATCHING_STACK" ]; then
                {{ pulumi_sudo_cmd }} stack select "$MATCHING_STACK"
                echo "Selected: $MATCHING_STACK"
              else
                echo "ERROR: Stack {{ stack_name }} not found"
                exit 1
              fi
            fi
          register: stack_selection_result
          failed_when: stack_selection_result.rc != 0
        
        # stack_nameが未指定の場合（フォールバック）
        - name: Select first available stack
          when: stack_name is not defined
          ansible.builtin.shell: |
            cd {{ pulumi_project_path }}
            {{ pulumi_env_prefix }}
            
            FIRST_STACK=$({{ pulumi_sudo_cmd }} stack ls --json | jq -r '.[0].name // empty')
            if [ -n "$FIRST_STACK" ]; then
              {{ pulumi_sudo_cmd }} stack select "$FIRST_STACK"
              echo "Selected: $FIRST_STACK"
            else
              echo "ERROR: No stacks available"
              exit 1
            fi
          register: fallback_selection_result
          failed_when: fallback_selection_result.rc != 0
    
    # スタック出力を取得（output_nameにデフォルト値を設定）
    - name: Get stack output
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        {{ pulumi_env_prefix }}
        
        # output_nameが空文字列の場合は全出力を取得
        {% if output_name is defined and output_name | length > 0 %}
        # 特定の出力を取得
        OUTPUT=$({{ pulumi_sudo_cmd }} stack output {{ output_name }} 2>&1)
        if [ $? -eq 0 ]; then
          echo "$OUTPUT" | tail -1
        else
          echo "ERROR: Output '{{ output_name }}' not found"
          exit 1
        fi
        {% else %}
        # 全ての出力を取得（JSON形式）
        {{ pulumi_sudo_cmd }} stack output --json 2>/dev/null || echo "{}"
        {% endif %}
      register: stack_output_result
      changed_when: false
      when: not ansible_check_mode
    
    # エラーチェック
    - name: Check for output errors
      ansible.builtin.fail:
        msg: "Failed to get output '{{ output_name | default('all outputs') }}' from stack"
      when:
        - not ansible_check_mode
        - stack_output_result.stdout.startswith('ERROR:')
    
    # 成功時、重要な出力値を見やすく表示
    - name: Display output value
      ansible.builtin.debug:
        msg: >-
          {{ output_name | default('Stack outputs') }}: {{ stack_output_result.stdout }}
      when: 
        - not ansible_check_mode
        - not stack_output_result.stdout.startswith('ERROR:')
        - output_name is defined
      
    - name: Set output success status
      ansible.builtin.set_fact:
        stack_output_succeeded: true

    # 結果をfactとして設定（呼び出し元からアクセス可能にする）
    - name: Set output as fact for external access
      ansible.builtin.set_fact:
        pulumi_output_value: "{{ stack_output_result.stdout }}"
        pulumi_output_success: "{{ stack_output_succeeded }}"
      when: not ansible_check_mode

  rescue:
    # エラー時も詳細を表示（output_nameにデフォルト値を設定）
    - name: Handle output retrieval failure
      ansible.builtin.debug:
        msg: |
          Failed to get output '{{ output_name | default('all outputs') }}' from {{ pulumi_project_path | basename }}
          Error: {{ ansible_failed_result.msg | default('Unknown error') }}
    
    - name: Set fallback output
      ansible.builtin.set_fact:
        stack_output_result:
          stdout: "{{ mock_output | default('') }}"
          rc: 1
        stack_output_failed: true

# チェックモード用のモック出力
- name: Set mock outputs (check mode)
  ansible.builtin.set_fact:
    stack_output_result:
      stdout: "{{ mock_output | default('mock-output-for-check-mode') }}"
      rc: 0
  when: ansible_check_mode
