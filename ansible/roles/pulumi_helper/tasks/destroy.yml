# Pulumiスタックを削除するヘルパータスク

# 認証処理を実行（既に認証済みの場合はスキップ）
- name: Ensure Pulumi authentication
  ansible.builtin.include_tasks: login.yml
  when: pulumi_authenticated is not defined

# S3バックエンドの場合、プロジェクト別ログイン
- name: Handle S3 backend project login
  ansible.builtin.include_tasks: s3_backend_login.yml
  when: pulumi_backend_type == 's3'

# スタック存在確認（skip_stack_checkがfalseの場合のみ）
- name: Check if stack exists before destroy
  ansible.builtin.include_tasks: check_stack.yml
  when: not skip_stack_check | default(false) | bool

# スタックが存在しない場合の処理
- name: Skip destroy if stack does not exist
  block:
    - name: Report stack does not exist
      ansible.builtin.debug:
        msg: |
          Stack '{{ pulumi_stack_name }}' does not exist in project '{{ pulumi_project_path | basename }}'.
          Skipping destroy operation.
    
    - name: Set skip flag
      ansible.builtin.set_fact:
        pulumi_destroy_skipped: true
  when: 
    - not skip_stack_check | default(false) | bool
    - not pulumi_stack_exists | default(true) | bool

- name: Destroy Pulumi stack
  when: not pulumi_destroy_skipped | default(false) | bool
  block:
    # スタックを選択
    - name: Select stack for destroy
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        {{ pulumi_env_prefix }} && {{ pulumi_sudo_cmd }} stack select {{ pulumi_stack_name }} --non-interactive
      register: stack_select_result
      changed_when: false
      failed_when: false
      when: not ansible_check_mode
    
    # スタック選択に失敗した場合（スタックが存在しない）
    - name: Handle stack selection failure
      when: 
        - not ansible_check_mode
        - stack_select_result.rc != 0
      block:
        - name: Report stack not found
          ansible.builtin.debug:
            msg: |
              Stack '{{ pulumi_stack_name }}' not found in project '{{ pulumi_project_path | basename }}'.
              Skipping destroy operation.
        
        - name: Set skip flag for missing stack
          ansible.builtin.set_fact:
            pulumi_destroy_skipped: true
    
    # スタックが選択されているか確認（選択成功時のみ）
    - name: Ensure stack is selected
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        {{ pulumi_env_prefix }} && {{ pulumi_sudo_cmd }} stack --show-name || exit 1
      register: current_stack
      changed_when: false
      failed_when: current_stack.rc != 0
      when: 
        - not ansible_check_mode
        - not pulumi_destroy_skipped | default(false) | bool
    
    - name: Start destroy operation
      ansible.builtin.debug:
        msg: |
          Destroying Pulumi stack:
          Project: {{ pulumi_project_path | basename }}
          Stack: {{ current_stack.stdout | default(pulumi_stack_name) }}
      when: 
        - not ansible_check_mode
        - not pulumi_destroy_skipped | default(false) | bool
    
    # リソースを削除
    - name: Destroy resources
      ansible.builtin.shell: |
        cd {{ pulumi_project_path }}
        {{ pulumi_commands.destroy }}
      register: pulumi_destroy_result
      changed_when: "'No resources' not in pulumi_destroy_result.stdout"
      when: 
        - not ansible_check_mode
        - not pulumi_destroy_skipped | default(false) | bool
      async: "{{ pulumi_operation_timeout | default(600) }}"
      poll: "{{ pulumi_operation_poll | default(10) }}"
    
    # 削除結果は重要なので表示
    - name: Display destroy results
      ansible.builtin.debug:
        msg: "{{ pulumi_destroy_result.stdout_lines }}"
      when: 
        - not ansible_check_mode
        - pulumi_destroy_result is defined
        - not pulumi_destroy_skipped | default(false) | bool
        
  rescue:
    # 競合エラーの場合は再試行
    - name: Handle concurrent update error
      when: "'Another update is currently in progress' in pulumi_destroy_result.stderr | default('')"
      block:
        - name: Report concurrent update
          ansible.builtin.debug:
            msg: "Another Pulumi operation is in progress. Attempting to cancel and retry..."
        
        - name: Cancel current operation
          ansible.builtin.shell: |
            cd {{ pulumi_project_path }}
            {{ pulumi_env_prefix }} && {{ pulumi_sudo_cmd }} cancel
          ignore_errors: true
        
        - name: Wait before retry
          ansible.builtin.pause:
            seconds: 30
            prompt: "Waiting for previous operation to complete..."
        
        - name: Retry destroy
          ansible.builtin.shell: |
            cd {{ pulumi_project_path }}
            {{ pulumi_commands.destroy }}
          register: pulumi_destroy_retry_result
        
        - name: Display retry results
          ansible.builtin.debug:
            msg: "{{ pulumi_destroy_retry_result.stdout_lines }}"
          when: pulumi_destroy_retry_result is defined
    
    - name: Report destroy failure
      ansible.builtin.debug:
        msg: |
          ✗ Pulumi destroy operation failed
          {% if 'Another update is currently in progress' in pulumi_destroy_result.stderr | default('') %}
          Reason: Concurrent operation conflict (retry also failed)
          {% else %}
          Error code: {{ pulumi_destroy_result.rc | default('unknown') }}
          {% endif %}
    
    # エラー詳細は重要なので表示
    - name: Display error output
      ansible.builtin.debug:
        msg: |
          Error details:
          {{ pulumi_destroy_result.stdout | default('No output available') }}
      when: 
        - pulumi_destroy_result is defined 
        - pulumi_destroy_result.stdout is defined
    
    - name: Display error stderr
      ansible.builtin.debug:
        msg: |
          {{ pulumi_destroy_result.stderr }}
      when: 
        - pulumi_destroy_result is defined 
        - pulumi_destroy_result.stderr is defined 
        - pulumi_destroy_result.stderr
    
    - name: Set failure status
      ansible.builtin.set_fact:
        pulumi_destroy_failed: true
    
    - name: Fail the playbook
      ansible.builtin.fail:
        msg: "Pulumi destroy operation failed. See error details above."

# スタックがスキップされた場合の報告
- name: Report destroy was skipped
  ansible.builtin.debug:
    msg: |
      Pulumi destroy operation was skipped.
      Stack '{{ pulumi_stack_name }}' does not exist or was already deleted.
  when: pulumi_destroy_skipped | default(false) | bool

# チェックモード
- name: Mock destroy (check mode)
  ansible.builtin.debug:
    msg: "Would destroy Pulumi stack (check mode)"
  when: ansible_check_mode
