---
# Jenkins Agent AMI Builder deployment tasks

- name: Deploy Agent AMI Builder Infrastructure with Pulumi
  block:
    - name: Set deployment variables
      ansible.builtin.set_fact:
        stack_name: "jenkins-agent-ami"
        pulumi_dir: "{{ pulumi_path }}/jenkins-agent-ami"
        env: "{{ env_name }}"
        aws_region: "{{ aws_region_name }}"
        network_project_name: "{{ infra.pulumi.network_project | default('jenkins-network') }}"
        security_project_name: "{{ infra.pulumi.security_project | default('jenkins-security') }}"
    
    # Check for existing Image Builder resources and handle dependencies
    - name: Check for existing Image Builder pipelines
      ansible.builtin.include_tasks: "{{ role_path }}/../aws_cli_helper/tasks/execute.yml"
      vars:
        aws_command: "aws imagebuilder list-image-pipelines"
        operation_name: "List existing Image Builder pipelines"
        parse_output: true
      register: existing_pipelines
    
    - name: Check for existing Image Builder recipes with old versions
      when: aws_cli_success
      ansible.builtin.set_fact:
        old_recipes: >-
          {{
            (aws_cli_data.imagePipelineList | default([]))
            | selectattr('name', 'search', project_name + '-agent-.*-' + env)
            | list
          }}
    
    - name: Handle existing Image Builder resources
      when: old_recipes | length > 0
      block:
        - name: Display found old resources
          ansible.builtin.debug:
            msg: "Found {{ old_recipes | length }} existing Image Builder resources that may need cleanup"
        
        # Check for running builds
        - name: Check for running image builds
          ansible.builtin.include_tasks: "{{ role_path }}/../aws_cli_helper/tasks/execute.yml"
          loop: "{{ old_recipes }}"
          vars:
            aws_command: >-
              aws imagebuilder list-image-build-versions 
              --image-version-arn {{ item.arn | regex_replace('/image-pipeline/', '/image-recipe/') }}
              --filters name=state,values=BUILDING,DISTRIBUTING,INTEGRATING,TESTING
            operation_name: "Check for running builds for {{ item.name }}"
            parse_output: true
        
        # Try to delete old images first (they depend on recipes)
        - name: List old images for cleanup
          ansible.builtin.include_tasks: "{{ role_path }}/../aws_cli_helper/tasks/execute.yml"
          vars:
            aws_command: >-
              aws imagebuilder list-images 
              --owner Self
              --filters name=name,values={{ project_name }}-agent-*-{{ env }}*
            operation_name: "List old images for cleanup"
            parse_output: true
        
        - name: Delete old image versions
          when: 
            - aws_cli_success
            - aws_cli_data.imageVersionList is defined
            - aws_cli_data.imageVersionList | length > 0
          ansible.builtin.include_tasks: "{{ role_path }}/../aws_cli_helper/tasks/execute_with_retry.yml"
          loop: "{{ aws_cli_data.imageVersionList | default([]) }}"
          vars:
            aws_command: >-
              aws imagebuilder delete-image 
              --image-build-version-arn {{ item.arn }}
            operation_name: "Delete old image {{ item.name | default('unknown') }}"
            max_retries: 3
            retry_delay: 10
          ignore_errors: true
        
        # Update pipelines to remove recipe dependency
        - name: Disable old pipelines
          ansible.builtin.include_tasks: "{{ role_path }}/../aws_cli_helper/tasks/execute_with_retry.yml"
          loop: "{{ old_recipes }}"
          vars:
            aws_command: >-
              aws imagebuilder update-image-pipeline 
              --image-pipeline-arn {{ item.arn }}
              --status DISABLED
            operation_name: "Disable pipeline {{ item.name }}"
            max_retries: 3
            retry_delay: 5
          ignore_errors: true
        
        - name: Wait for resources to stabilize
          ansible.builtin.pause:
            seconds: 10
            prompt: "Waiting for Image Builder resources to stabilize before proceeding..."
    
    - name: Check if Pulumi directory exists
      ansible.builtin.stat:
        path: "{{ pulumi_dir }}"
      register: pulumi_dir_stat
    
    - name: Fail if Pulumi directory doesn't exist
      ansible.builtin.fail:
        msg: "Pulumi directory doesn't exist: {{ pulumi_dir }}"
      when: not pulumi_dir_stat.stat.exists
    
    # NPM dependencies
    - name: Install npm dependencies for Jenkins Agent AMI
      ansible.builtin.npm:
        path: "{{ pulumi_dir }}"
        state: present
    
    # TypeScript build
    - name: Build TypeScript for Jenkins Agent AMI
      ansible.builtin.shell: |
        source {{ scripts_dir }}/aws/aws-env.sh
        cd {{ pulumi_dir }}
        npm run build
      register: build_result
      changed_when: "'Built' in build_result.stdout"
    
    # Pulumi stack init
    - name: Initialize Pulumi stack for Jenkins Agent AMI
      ansible.builtin.shell: |
        source {{ scripts_dir }}/aws/aws-env.sh
        cd {{ pulumi_dir }}
        pulumi stack select {{ env }} --create
      register: stack_init_result
      failed_when: stack_init_result.rc != 0
      changed_when: "'Created stack' in stack_init_result.stdout"
    
    # Pulumi configuration
    - name: Set Pulumi configuration for Jenkins Agent AMI
      ansible.builtin.shell: |
        source {{ scripts_dir }}/aws/aws-env.sh
        cd {{ pulumi_dir }}
        pulumi config set aws:region {{ aws_region }}
        pulumi config set {{ stack_name }}:projectName {{ project_name }}
        pulumi config set {{ stack_name }}:networkStackName {{ network_project_name }}
        pulumi config set {{ stack_name }}:securityStackName {{ security_project_name }}
      register: pulumi_config_result
      changed_when: pulumi_config_result.rc == 0
    
    # Pulumi preview
    - name: Preview agent AMI deployment
      ansible.builtin.shell: |
        source {{ scripts_dir }}/aws/aws-env.sh
        cd {{ pulumi_dir }}
        pulumi preview
      register: preview_result
      changed_when: false
    
    # Pulumi deploy
    - name: Deploy Jenkins Agent AMI Builder infrastructure
      ansible.builtin.shell: |
        source {{ scripts_dir }}/aws/aws-env.sh
        cd {{ pulumi_dir }}
        pulumi up -y
      register: deploy_result
      changed_when: deploy_result.rc == 0
    
    # Get outputs
    - name: Get agent AMI stack outputs
      ansible.builtin.shell: |
        source {{ scripts_dir }}/aws/aws-env.sh
        cd {{ pulumi_dir }}
        pulumi stack output --json
      register: stack_outputs
      changed_when: false
    
    - name: Parse stack outputs
      ansible.builtin.set_fact:
        agent_ami_outputs: "{{ stack_outputs.stdout | from_json }}"
      when: stack_outputs.stdout is defined
    
    - name: Display Jenkins Agent AMI Builder information
      ansible.builtin.debug:
        msg:
          - "=========================================="
          - "Jenkins Agent AMI Builder Deployment Complete"
          - "=========================================="
          - "Stack: {{ stack_name }}"
          - "Environment: {{ env }}"
          - "Project: {{ project_name }}"
          - ""
          - "Image Pipeline x86_64 ARN:"
          - "  {{ agent_ami_outputs.imagePipelineX86Arn | default('N/A') }}"
          - ""
          - "Image Pipeline ARM64 ARN:"
          - "  {{ agent_ami_outputs.imagePipelineArmArn | default('N/A') }}"
          - ""
          - "To build AMIs manually, run:"
          - "  aws imagebuilder start-image-pipeline-execution \\"
          - "    --image-pipeline-arn {{ agent_ami_outputs.imagePipelineX86Arn | default('N/A') }}"
          - ""
          - "  aws imagebuilder start-image-pipeline-execution \\"
          - "    --image-pipeline-arn {{ agent_ami_outputs.imagePipelineArmArn | default('N/A') }}"
          - ""
          - "After AMIs are built, update SSM parameters:"
          - "  aws ssm put-parameter \\"
          - "    --name /{{ project_name }}/{{ env }}/jenkins/agent/custom-ami-x86 \\"
          - "    --value ami-xxxxxxxxx --overwrite"
          - ""
          - "  aws ssm put-parameter \\"
          - "    --name /{{ project_name }}/{{ env }}/jenkins/agent/custom-ami-arm \\"
          - "    --value ami-xxxxxxxxx --overwrite"
          - "=========================================="
      when: agent_ami_outputs is defined
    
    - name: Optionally trigger AMI build
      ansible.builtin.debug:
        msg: "Auto-build is disabled. Run Image Builder pipelines manually when ready."
      when: not (build_ami_on_deploy | default(false))
    
    - name: Set deployment success flag
      ansible.builtin.set_fact:
        agent_ami_deployed: true
  
  rescue:
    - name: Display deployment failure message
      ansible.builtin.debug:
        msg:
          - "ERROR: Agent AMI Builder deployment failed"
          - "Please check the error messages above for details"
    
    - name: Set deployment failure flag
      ansible.builtin.set_fact:
        agent_ami_deployed: false
    
    - name: Fail the playbook
      ansible.builtin.fail:
        msg: "Agent AMI Builder deployment failed"