---
# Jenkins Agent AMI images destroy tasks
# Image Builderで作成されたAMIとスナップショットを削除

- name: Destroy Agent AMI Images
  block:
    # AMIの検索 - CreatedByタグで検索
    - name: Find AMIs created by Image Builder (by CreatedBy tag)
      amazon.aws.ec2_ami_info:
        region: "{{ aws_region_name }}"
        owners: self
        filters:
          "tag:CreatedBy": "EC2 Image Builder"
          "tag:Environment": "{{ env_name }}"
      register: ami_list_by_creator
    
    # AMIの検索 - 名前パターンで検索
    - name: Find AMIs by name pattern
      amazon.aws.ec2_ami_info:
        region: "{{ aws_region_name }}"
        owners: self
        filters:
          name: "{{ project_name }}-agent-*"
      register: ami_list_by_name
    
    # AMIリストの結合と重複排除
    - name: Combine and deduplicate AMI lists
      ansible.builtin.set_fact:
        all_amis: "{{ (ami_list_by_creator.images + ami_list_by_name.images) | unique(attribute='image_id') }}"
    
    # さらに環境名でフィルタリング（名前に環境名が含まれるもの）
    - name: Filter AMIs by environment in name
      ansible.builtin.set_fact:
        filtered_amis: "{{ all_amis | selectattr('name', 'search', env_name) | list }}"
    
    - name: Display AMIs to be deleted
      ansible.builtin.debug:
        msg:
          - "=========================================="
          - "Found {{ filtered_amis | length }} AMI(s) to delete"
          - "=========================================="
      when: filtered_amis | length > 0
    
    - name: List each AMI to be deleted
      ansible.builtin.debug:
        msg:
          - "AMI ID: {{ item.image_id }}"
          - "Name: {{ item.name }}"
          - "Created: {{ item.creation_date }}"
          - "Architecture: {{ item.architecture }}"
          - "Snapshots: {{ item.block_device_mappings | map(attribute='ebs.snapshot_id') | select('defined') | list }}"
      loop: "{{ filtered_amis }}"
      loop_control:
        label: "{{ item.name }}"
      when: filtered_amis | length > 0
    
    - name: No AMIs found
      ansible.builtin.debug:
        msg: "No AMIs found for environment '{{ env_name }}'"
      when: filtered_amis | length == 0
    
    # ドライランモードの場合はここで終了
    - name: Skip deletion in dry run mode
      ansible.builtin.debug:
        msg: |
          ========================================
          Dry run mode - no AMIs will be deleted
          To actually delete, run without dry_run=true
          ========================================
      when: dry_run | default(false) | bool
    
    # 実際の削除処理
    - name: Deregister AMIs
      amazon.aws.ec2_ami:
        region: "{{ aws_region_name }}"
        image_id: "{{ item.image_id }}"
        state: absent
        delete_snapshot: true
        wait: true
        wait_timeout: 600
      loop: "{{ filtered_amis }}"
      loop_control:
        label: "{{ item.name }} ({{ item.image_id }})"
      when: 
        - filtered_amis | length > 0
        - not (dry_run | default(false) | bool)
      register: ami_deletion_results
    
    # スナップショットの追加クリーンアップ
    - name: Find orphaned snapshots by CreatedBy tag
      amazon.aws.ec2_snapshot_info:
        region: "{{ aws_region_name }}"
        owner_ids: self
        filters:
          "tag:CreatedBy": "EC2 Image Builder"
          "tag:Environment": "{{ env_name }}"
      register: snapshot_list
      when: not (dry_run | default(false) | bool)
    
    # 名前パターンでもスナップショットを検索
    - name: Find orphaned snapshots by description
      amazon.aws.ec2_snapshot_info:
        region: "{{ aws_region_name }}"
        owner_ids: self
      register: all_snapshots
      when: not (dry_run | default(false) | bool)
    
    - name: Filter snapshots by description pattern
      ansible.builtin.set_fact:
        filtered_snapshots: "{{ all_snapshots.snapshots | selectattr('description', 'search', project_name + '-agent') | list }}"
      when: 
        - not (dry_run | default(false) | bool)
        - all_snapshots is defined
    
    - name: Combine snapshot lists
      ansible.builtin.set_fact:
        orphaned_snapshots: "{{ (snapshot_list.snapshots | default([])) + (filtered_snapshots | default([])) | unique(attribute='snapshot_id') }}"
      when: not (dry_run | default(false) | bool)
    
    - name: Delete orphaned snapshots
      amazon.aws.ec2_snapshot:
        region: "{{ aws_region_name }}"
        snapshot_id: "{{ item.snapshot_id }}"
        state: absent
      loop: "{{ orphaned_snapshots | default([]) }}"
      loop_control:
        label: "{{ item.snapshot_id }}"
      when:
        - orphaned_snapshots is defined
        - orphaned_snapshots | length > 0
        - not (dry_run | default(false) | bool)
      ignore_errors: true  # スナップショットが使用中の場合はスキップ
    
    # Image Builderのイメージバージョンを削除（AMI削除後に実行）
    - name: List all Image Builder images
      ansible.builtin.command:
        cmd: |
          aws imagebuilder list-images \
            --owner Self \
            --region {{ aws_region_name }} \
            --output json
      register: all_images_result
      changed_when: false
      when: not (dry_run | default(false) | bool)
    
    - name: Parse and filter Image Builder images
      ansible.builtin.set_fact:
        builder_images: "{{ all_images_result.stdout | from_json | json_query(query) }}"
      vars:
        query: "imageList[?contains(name, '{{ project_name }}-agent')]"
      when: 
        - not (dry_run | default(false) | bool)
        - all_images_result is defined
        - all_images_result.rc == 0
    
    - name: Get Image Builder image build versions for each image
      ansible.builtin.command:
        cmd: |
          aws imagebuilder list-image-build-versions \
            --image-version-arn "{{ item.arn }}" \
            --region {{ aws_region_name }} \
            --output json
      loop: "{{ builder_images | default([]) }}"
      loop_control:
        label: "{{ item.name }}"
      register: image_build_versions_result
      when: 
        - not (dry_run | default(false) | bool)
        - builder_images | default([]) | length > 0
    
    - name: Extract all image build version ARNs
      ansible.builtin.set_fact:
        all_build_version_arns: "{{ all_build_version_arns | default([]) + (item.stdout | from_json).imageSummaryList | map(attribute='arn') | list }}"
      loop: "{{ image_build_versions_result.results | default([]) }}"
      loop_control:
        label: "{{ item.item.name | default('unknown') }}"
      when:
        - not (dry_run | default(false) | bool)
        - image_build_versions_result is defined
        - item.stdout is defined
    
    - name: Delete Image Builder image versions
      ansible.builtin.command:
        cmd: |
          aws imagebuilder delete-image \
            --image-build-version-arn "{{ item }}" \
            --region {{ aws_region_name }}
      loop: "{{ all_build_version_arns | default([]) }}"
      loop_control:
        label: "{{ item.split('/')[-1] }}"
      when: 
        - not (dry_run | default(false) | bool)
        - all_build_version_arns is defined
        - all_build_version_arns | length > 0
      failed_when: false  # 既に削除されている場合もあるため
      register: delete_image_version_results
    
    - name: Display Image Builder deletion summary
      ansible.builtin.debug:
        msg: "Deleted {{ all_build_version_arns | default([]) | length }} Image Builder image version(s)"
      when: 
        - not (dry_run | default(false) | bool)
        - all_build_version_arns is defined
        - all_build_version_arns | length > 0
    
    - name: Set success flag
      ansible.builtin.set_fact:
        agent_ami_images_destroyed: true
        ami_deletion_count: "{{ filtered_amis | length }}"
    
    - name: Display deletion summary
      ansible.builtin.debug:
        msg:
          - "=========================================="
          - "AMI and Image Builder Deletion Complete"
          - "=========================================="
          - "Deleted {{ filtered_amis | length }} AMI(s) and associated snapshots"
          - "Deleted {{ all_build_version_arns | default([]) | length }} Image Builder image version(s)"
          - "Environment: {{ env_name }}"
          - "=========================================="
      when: 
        - not (dry_run | default(false) | bool)
        - (filtered_amis | length > 0) or (all_build_version_arns | default([]) | length > 0)
  
  rescue:
    - name: Display error message
      ansible.builtin.debug:
        msg:
          - "WARNING: AMI deletion encountered errors"
          - "Some AMIs or snapshots may not have been deleted"
          - "Error: {{ ansible_failed_result.msg | default('Unknown error') }}"
    
    - name: Set failure flag
      ansible.builtin.set_fact:
        agent_ami_images_destroyed: false