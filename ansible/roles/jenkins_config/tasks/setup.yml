---
# Jenkins設定タスク - jenkins_applicationと同様のアプローチ

- name: Display jenkins configuration information
  ansible.builtin.debug:
    msg: |
      Configuring Jenkins Controller:
      - Project: {{ project_name }}
      - Config Pulumi Project: {{ config_project_name }}
      - Environment: {{ env_name }}
      - Jenkins Color: {{ jenkins_color | default('blue') }}

# JenkinsインスタンスIDの取得（Parameter Storeから）
- name: Get Jenkins instance ID from SSM Parameter Store
  ansible.builtin.include_role:
    name: ssm_parameter_store
    tasks_from: get_parameter
  vars:
    parameter_name: "/{{ project_name }}/{{ env_name }}/jenkins/instanceId"
    store_as: "jenkins_instance_id"

- name: Verify Jenkins instance ID
  ansible.builtin.fail:
    msg: "Invalid Jenkins instance ID format: {{ jenkins_instance_id }}"
  when: not (jenkins_instance_id | regex_search('^i-[a-f0-9]+$'))

- name: Display Jenkins instance ID
  ansible.builtin.debug:
    msg: "Using Jenkins Instance ID: {{ jenkins_instance_id }}"

# EFSファイルシステムIDの取得 - SSM Parameter Storeから優先的に取得
- name: Get EFS file system ID from Parameter Store
  when: efs_file_system_id is not defined or efs_file_system_id == ""
  ansible.builtin.include_role:
    name: ssm_parameter_store
    tasks_from: get_parameter
  vars:
    parameter_name: "/{{ project_name }}/{{ env_name }}/storage/efsFileSystemId"
    store_as: "efs_file_system_id"

- name: Display Jenkins EFS file system ID
  ansible.builtin.debug:
    msg: "Using EFS File System ID: {{ efs_file_system_id | default('Not defined') }}"

# ファイル権限設定
- name: Ensure aws-env.sh has execute permissions
  ansible.builtin.file:
    path: "{{ scripts_dir }}/aws/aws-env.sh"
    mode: '0755'
  register: aws_env_script_permission
  no_log: true

# 設定Pulumiスタックのデプロイ
- name: Deploy Jenkins Configuration with Pulumi
  block:
    # Pulumiヘルパータスクを呼び出す
    - name: Initialize config stack
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: init_stack
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-config"
        stack_name: "{{ env_name }}"
    
    - name: Configure config stack - AWS region
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: set_config
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-config"
        config_key: "aws:region"
        config_value: "{{ aws_region_name }}"

    - name: Configure config stack - project name
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: set_config
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-config"
        config_key: "{{ config_project_name }}:projectName"
        config_value: "{{ project_name }}"

    - name: Configure config stack - Jenkins version
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: set_config
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-config"
        config_key: "{{ config_project_name }}:jenkinsVersion"
        config_value: "{{ jenkins_version }}"

    - name: Configure config stack - recovery mode
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: set_config
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-config"
        config_key: "{{ config_project_name }}:recoveryMode"
        config_value: "{{ recovery_mode | string | lower }}"
    
    # Pulumiプレビュー
    - name: Preview config deployment
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: preview
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-config"
    
    # Pulumiデプロイ
    - name: Deploy config stack
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: deploy
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-config"
    
    # SSMドキュメント名の取得
    - name: Get SSM document names
      ansible.builtin.shell: |
        cd {{ pulumi_path }}/jenkins-config
        export PULUMI_ACCESS_TOKEN="{{ lookup('env', 'PULUMI_ACCESS_TOKEN') }}"
        pulumi stack output ssmDocuments --json 2>/dev/null || echo '{}'
      register: ssm_documents_output
      changed_when: false

    - name: Set SSM document names
      ansible.builtin.set_fact:
        ssm_documents: "{{ ssm_documents_output.stdout | from_json }}"
      when: 
        - ssm_documents_output.stdout | length > 0
        - ssm_documents_output.stdout != '{}'

    # フォールバック: デフォルト値を設定
    - name: Set default SSM document names if not found
      ansible.builtin.set_fact:
        ssm_documents:
          updateRepo: "jenkins-infra-jenkins-update-repo-{{ env_name }}"
          executeScript: "jenkins-infra-jenkins-config-execute-script-{{ env_name }}"
      when: ssm_documents is not defined or ssm_documents | length == 0
      
    - name: Display SSM document names
      ansible.builtin.debug:
        msg: |
          SSM Documents available:
          - Update Repo: {{ ssm_documents.updateRepo }}
          - Execute Script: {{ ssm_documents.executeScript }}
  
  rescue:
    - name: Display error on config deployment
      ansible.builtin.debug:
        msg: "Failed to deploy Jenkins configuration resources. See error details above."
      
    - name: Fail the playbook
      ansible.builtin.fail:
        msg: "Jenkins configuration deployment failed."

# インスタンスの設定処理
- name: Wait for SSM agent to be operational
  ansible.builtin.pause:
    seconds: 30
  when: not ansible_check_mode

# jenkins_applicationと同様のアプローチで、スクリプトを順次実行
- name: Execute Jenkins configuration scripts
  block:
    # ステップ0: Gitリポジトリの更新
    - name: Update Git repository
      ansible.builtin.include_tasks: execute_ssm_command.yml
      vars:
        ssm_document_name: "{{ ssm_documents.updateRepo }}"
        ssm_parameters: "ProjectName={{ project_name }},Environment={{ env_name }},GitBranch={{ git_branch }},GitRepo={{ git_repo }}"
        ssm_comment: "Updating Git repository"
        instance_id: "{{ jenkins_instance_id }}"
    
    # ステップ1: EFSマウント
    - name: Mount EFS
      ansible.builtin.include_tasks: execute_ssm_command.yml
      vars:
        ssm_document_name: "{{ ssm_documents.executeScript }}"
        ssm_parameters: "ScriptPath=scripts/jenkins/shell/controller-mount-efs.sh,EfsId={{ efs_file_system_id }},AwsRegion={{ aws_region_name }}"
        ssm_comment: "Mounting EFS"
        instance_id: "{{ jenkins_instance_id }}"
    
    # ステップ2: Jenkinsインストール
    - name: Install Jenkins
      ansible.builtin.include_tasks: execute_ssm_command.yml
      vars:
        ssm_document_name: "{{ ssm_documents.executeScript }}"
        ssm_parameters: "ScriptPath=scripts/jenkins/shell/controller-install.sh,JenkinsVersion={{ jenkins_version }},JenkinsColor={{ jenkins_color }}"
        ssm_comment: "Installing Jenkins"
        instance_id: "{{ jenkins_instance_id }}"
    
    # ステップ3: Jenkins設定
    - name: Configure Jenkins
      ansible.builtin.include_tasks: execute_ssm_command.yml
      vars:
        ssm_document_name: "{{ ssm_documents.executeScript }}"
        ssm_parameters: "ScriptPath=scripts/jenkins/shell/controller-configure.sh,JenkinsMode={{ recovery_mode | ternary('recovery', 'normal') }},JenkinsColor={{ jenkins_color }}"
        ssm_comment: "Configuring Jenkins"
        instance_id: "{{ jenkins_instance_id }}"
    
    # ステップ4: Jenkins起動
    - name: Start Jenkins
      ansible.builtin.include_tasks: execute_ssm_command.yml
      vars:
        ssm_document_name: "{{ ssm_documents.executeScript }}"
        ssm_parameters: "ScriptPath=scripts/jenkins/shell/controller-startup.sh,JenkinsColor={{ jenkins_color }}"
        ssm_comment: "Starting Jenkins"
        instance_id: "{{ jenkins_instance_id }}"

# 設定完了を示す変数設定
- name: Set config deployment status
  ansible.builtin.set_fact:
    config_deployed: true

# 設定結果のサマリー表示
- name: Display Jenkins setup completion status
  ansible.builtin.debug:
    msg: |
      Jenkins Setup Status:
      - Git Repository Updated: Success
      - EFS Mounted: Success
      - Jenkins Installed: Success
      - Jenkins Configured: Success
      - Jenkins Started: Success
      - Configuration Deployment: {{ config_deployed | ternary('Success', 'Failed') }}
