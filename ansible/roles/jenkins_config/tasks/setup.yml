---
# Jenkins設定タスク - jenkins_applicationと同様のアプローチ

- name: Display jenkins configuration information
  ansible.builtin.debug:
    msg: |
      Configuring Jenkins Controller:
      - Project: {{ project_name }}
      - Config Pulumi Project: {{ config_project_name }}
      - Environment: {{ env_name }}
      - Jenkins Instance ID: {{ jenkins_instance_id | default('未設定') }}
      - Jenkins Color: {{ jenkins_color | default('blue') }}

# 既存のSSMドキュメントを削除（クリーンアップ）
- name: Destroy existing SSM documents before update
  ansible.builtin.include_role:
    name: pulumi_helper
    tasks_from: destroy
  vars:
    pulumi_project_path: "{{ pulumi_path }}/jenkins-config"
    # 古いドキュメント名を指定して削除
    target_resources:
      - "aws:ssm/document:Document::jenkins-infra-jenkins-install-{{ env_name }}"
      - "aws:ssm/document:Document::jenkins-infra-jenkins-mount-efs-{{ env_name }}"
      - "aws:ssm/document:Document::jenkins-infra-jenkins-configure-{{ env_name }}"
      - "aws:ssm/document:Document::jenkins-infra-jenkins-startup-{{ env_name }}"
  ignore_errors: true

# コントローラースタックからJenkinsインスタンスIDを取得（未設定の場合）
- name: Get Jenkins instance ID from controller stack
  ansible.builtin.include_role:
    name: pulumi_helper
    tasks_from: get_outputs
  vars:
    pulumi_project_path: "{{ pulumi_path }}/jenkins-controller"
    output_name: "jenkinsInstanceId"
    mock_output: "mock-jenkins-instance-id"
  when: jenkins_instance_id is not defined or jenkins_instance_id == ""

# デバッグ: 直接Pulumiコマンドを実行して確認
- name: Debug - Get all Pulumi outputs directly
  ansible.builtin.shell: |
    cd {{ pulumi_path }}/jenkins-controller
    export PULUMI_ACCESS_TOKEN="{{ lookup('env', 'PULUMI_ACCESS_TOKEN') }}"
    sudo -E /root/.pulumi/bin/pulumi stack output --json
  register: pulumi_all_outputs
  when: jenkins_instance_id is not defined or jenkins_instance_id == ""

- name: Debug - Display all Pulumi outputs
  ansible.builtin.debug:
    msg: "All Pulumi outputs: {{ pulumi_all_outputs.stdout | from_json if pulumi_all_outputs.stdout else 'No outputs' }}"
  when: pulumi_all_outputs is defined

# デバッグ: 特定の出力を直接取得
- name: Debug - Get specific jenkinsInstanceId output
  ansible.builtin.shell: |
    cd {{ pulumi_path }}/jenkins-controller
    export PULUMI_ACCESS_TOKEN="{{ lookup('env', 'PULUMI_ACCESS_TOKEN') }}"
    sudo -E /root/.pulumi/bin/pulumi stack output jenkinsInstanceId 2>&1
  register: pulumi_instance_id_direct
  when: jenkins_instance_id is not defined or jenkins_instance_id == ""

- name: Debug - Display direct output result
  ansible.builtin.debug:
    msg: |
      Direct command result:
      stdout: {{ pulumi_instance_id_direct.stdout | default('None') }}
      stderr: {{ pulumi_instance_id_direct.stderr | default('None') }}
      rc: {{ pulumi_instance_id_direct.rc | default('None') }}
  when: pulumi_instance_id_direct is defined

- name: Set Jenkins instance ID from controller stack
  ansible.builtin.set_fact:
    jenkins_instance_id: "{{ stack_output_result.stdout | trim }}"
  when: 
    - jenkins_instance_id is not defined or jenkins_instance_id == ""
    - stack_output_result is defined and stack_output_result.stdout is defined

- name: Verify Jenkins instance ID
  ansible.builtin.fail:
    msg: "Unable to determine Jenkins instance ID. Please specify jenkins_instance_id or ensure controller is deployed."
  when: jenkins_instance_id is not defined or jenkins_instance_id == ""

- name: Display Jenkins instance ID
  ansible.builtin.debug:
    msg: "Using Jenkins Instance ID: {{ jenkins_instance_id }}"

# EFSファイルシステムIDの取得（未設定の場合）
- name: Get EFS file system ID from storage stack
  ansible.builtin.include_role:
    name: pulumi_helper
    tasks_from: get_outputs
  vars:
    pulumi_project_path: "{{ pulumi_path }}/jenkins-storage"
    output_name: "efsFileSystemId"
    mock_output: "mock-efs-id"
  when: efs_file_system_id is not defined or efs_file_system_id == ""

- name: Set EFS file system ID from storage stack
  ansible.builtin.set_fact:
    efs_file_system_id: "{{ stack_output_result.stdout | trim }}"
  when: efs_file_system_id is not defined or efs_file_system_id == ""

# ファイル権限設定
- name: Ensure aws-env.sh has execute permissions
  ansible.builtin.file:
    path: "{{ scripts_dir }}/aws-env.sh"
    mode: '0755'
  register: aws_env_script_permission
  no_log: true

# 設定Pulumiスタックのデプロイ
- name: Deploy Jenkins Configuration with Pulumi
  block:
    # Pulumiヘルパータスクを呼び出す
    - name: Initialize config stack
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: init_stack
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-config"
        stack_name: "{{ env_name }}"
    
    - name: Configure config stack
      ansible.builtin.shell: |
        {{ scripts_dir }}/aws-env.sh
        cd {{ pulumi_path }}/jenkins-config
        sudo -E /root/.pulumi/bin/pulumi config set aws:region {{ aws_region_name }}
        sudo -E /root/.pulumi/bin/pulumi config set {{ config_project_name }}:projectName {{ project_name }}
        sudo -E /root/.pulumi/bin/pulumi config set {{ config_project_name }}:jenkinsVersion {{ jenkins_version }}
        sudo -E /root/.pulumi/bin/pulumi config set {{ config_project_name }}:recoveryMode {{ recovery_mode | string | lower }}
      register: pulumi_config_result
      changed_when: pulumi_config_result.rc == 0
    
    # Pulumiプレビュー
    - name: Preview config deployment
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: preview
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-config"
    
    # Pulumiデプロイ
    - name: Deploy config stack
      ansible.builtin.include_role:
        name: pulumi_helper
        tasks_from: deploy
      vars:
        pulumi_project_path: "{{ pulumi_path }}/jenkins-config"
    
    # SSMドキュメント名の取得
    - name: Get SSM document names - Direct approach
      ansible.builtin.shell: |
        cd {{ pulumi_path }}/jenkins-config
        export PULUMI_ACCESS_TOKEN="{{ lookup('env', 'PULUMI_ACCESS_TOKEN') }}"
        sudo -E /root/.pulumi/bin/pulumi stack output ssmDocuments --json 2>/dev/null || echo '{}'
      register: ssm_documents_direct
      changed_when: false

    - name: Debug SSM documents output
      ansible.builtin.debug:
        var: ssm_documents_direct
      when: ansible_verbosity > 0

    - name: Set SSM document names
      ansible.builtin.set_fact:
        ssm_documents: "{{ ssm_documents_direct.stdout | from_json }}"
      when: ssm_documents_direct.stdout | length > 0

    # フォールバック: デフォルト値を設定
    - name: Set default SSM document names if not found
      ansible.builtin.set_fact:
        ssm_documents:
          updateRepo: "jenkins-infra-jenkins-update-repo-{{ env_name }}"
          executeScript: "jenkins-infra-jenkins-config-execute-script-{{ env_name }}"
      when: ssm_documents is not defined or ssm_documents | length == 0
 
    - name: Display SSM document names
      ansible.builtin.debug:
        msg: |
          SSM Documents available:
          - Update Repo: {{ ssm_documents.updateRepo }}
          - Execute Script: {{ ssm_documents.executeScript }}
  rescue:
    - name: Display error on config deployment
      ansible.builtin.debug:
        msg: "Failed to deploy Jenkins configuration resources. See error details above."
      
    - name: Fail the playbook
      ansible.builtin.fail:
        msg: "Jenkins configuration deployment failed."

# インスタンスの設定処理
- name: Wait for SSM agent to be operational
  ansible.builtin.pause:
    seconds: 30
  when: not ansible_check_mode

# jenkins_applicationと同様のアプローチで、スクリプトを順次実行
- name: Execute Jenkins configuration scripts
  block:
    # ステップ0: Gitリポジトリの更新
    - name: Update Git repository
      ansible.builtin.include_tasks: tasks/execute_ssm_command.yml
      vars:
        ssm_document_name: "{{ ssm_documents.updateRepo }}"
        ssm_parameters: "ProjectName={{ project_name }},Environment={{ env_name }},GitBranch={{ git_branch }},GitRepo={{ git_repo }}"
        ssm_comment: "Updating Git repository"
        instance_id: "{{ jenkins_instance_id }}"
    
    # ステップ1: EFSマウント
    - name: Mount EFS
      ansible.builtin.include_tasks: tasks/execute_ssm_command.yml
      vars:
        ssm_document_name: "{{ ssm_documents.executeScript }}"
        ssm_parameters: "ScriptPath=scripts/jenkins/shell/controller-mount-efs.sh,EfsId={{ efs_file_system_id }},AwsRegion={{ aws_region_name }}"
        ssm_comment: "Mounting EFS"
        instance_id: "{{ jenkins_instance_id }}"
    
    # ステップ2: Jenkinsインストール
    - name: Install Jenkins
      ansible.builtin.include_tasks: tasks/execute_ssm_command.yml
      vars:
        ssm_document_name: "{{ ssm_documents.executeScript }}"
        ssm_parameters: "ScriptPath=scripts/jenkins/shell/controller-install.sh,JenkinsVersion={{ jenkins_version }},JenkinsColor={{ jenkins_color }}"
        ssm_comment: "Installing Jenkins"
        instance_id: "{{ jenkins_instance_id }}"
    
    # ステップ3: Jenkins設定
    - name: Configure Jenkins
      ansible.builtin.include_tasks: tasks/execute_ssm_command.yml
      vars:
        ssm_document_name: "{{ ssm_documents.executeScript }}"
        ssm_parameters: "ScriptPath=scripts/jenkins/shell/controller-configure.sh,JenkinsMode={{ recovery_mode | ternary('recovery', 'normal') }},JenkinsColor={{ jenkins_color }}"
        ssm_comment: "Configuring Jenkins"
        instance_id: "{{ jenkins_instance_id }}"
    
    # ステップ4: Jenkins起動
    - name: Start Jenkins
      ansible.builtin.include_tasks: tasks/execute_ssm_command.yml
      vars:
        ssm_document_name: "{{ ssm_documents.executeScript }}"
        ssm_parameters: "ScriptPath=scripts/jenkins/shell/controller-startup.sh,JenkinsColor={{ jenkins_color }}"
        ssm_comment: "Starting Jenkins"
        instance_id: "{{ jenkins_instance_id }}"

# 設定完了を示す変数設定
- name: Set config deployment status
  ansible.builtin.set_fact:
    config_deployed: true

# 設定結果のサマリー表示
- name: Display Jenkins setup completion status
  ansible.builtin.debug:
    msg: |
      Jenkins Setup Status:
      - Git Repository Updated: Success
      - EFS Mounted: Success
      - Jenkins Installed: Success
      - Jenkins Configured: Success
      - Jenkins Started: Success
      - Configuration Deployment: {{ config_deployed | ternary('Success', 'Failed') }}
