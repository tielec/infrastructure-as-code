# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-355/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-355/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-355/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**UNIT_INTEGRATION**

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #355
- **タイトル**: [FEATURE] AI Workflow: Init時にドラフトPRを自動作成
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/355
- **ラベル**: なし

### 本文

## 概要

AI Workflowの初期化（`python main.py init --issue-url <URL>`）時に、metadata.jsonを作成した後、自動的にブランチをリモートにpushし、ドラフトPull Requestを作成する機能を追加したい。

## 背景

### 現在の動作
1. `python main.py init --issue-url https://github.com/tielec/infrastructure-as-code/issues/XXX` を実行
2. `.ai-workflow/issue-XXX/metadata.json` が作成される
3. ローカルブランチ `ai-workflow/issue-XXX` が作成される（または既存ブランチを使用）
4. **ここで処理が終了**

### 問題点
- ブランチがローカルにのみ存在し、リモートにpushされない
- Pull Requestが手動で作成する必要がある
- 作業の可視性が低い（GitHub上で進捗を追跡できない）
- 他の開発者がワークフローの状態を確認できない

## 提案機能

### Init時の自動化フロー

```bash
python main.py init --issue-url https://github.com/tielec/infrastructure-as-code/issues/XXX
```

実行時の処理フロー:
1. ✅ metadata.json作成（既存）
2. ✅ ブランチ作成/切り替え（既存）
3. 🆕 **Git commit & push**
4. 🆕 **ドラフトPR作成**

### 詳細仕様

#### 1. Git Commit
```bash
git add .ai-workflow/issue-XXX/metadata.json
git commit -m "[ai-workflow] Phase 0 (init) - metadata初期化

Issue #XXX のAIワークフローを開始しました。"
```

#### 2. Git Push
```bash
# リモートブランチが存在しない場合
git push -u origin ai-workflow/issue-XXX

# リモートブランチが存在する場合
git push origin ai-workflow/issue-XXX
```

#### 3. ドラフトPR作成
```bash
gh pr create \
  --draft \
  --title "[AI-Workflow] Issue #XXX" \
  --body "$(cat <<'EOF'
## AI Workflow自動生成PR

### 📋 関連Issue
Closes #XXX

### 🔄 ワークフロー進捗

- [x] Phase 0: Planning
- [ ] Phase 1: Requirements
- [ ] Phase 2: Design
- [ ] Phase 3: Test Scenario
- [ ] Phase 4: Implementation
- [ ] Phase 5: Test Implementation
- [ ] Phase 6: Testing
- [ ] Phase 7: Documentation
- [ ] Phase 8: Report

### 📁 成果物

`.ai-workflow/issue-XXX/` ディレクトリに各フェーズの成果物が格納されています。

### ⚙️ 実行環境

- **モデル**: Claude Code Pro Max (Sonnet 4.5)
- **ContentParser**: OpenAI GPT-4o mini
- **ブランチ**: ai-workflow/issue-XXX
EOF
)" \
  --base main \
  --head ai-workflow/issue-XXX
```

## 実装方針

### 変更ファイル
- `scripts/ai-workflow/main.py`
- `scripts/ai-workflow/core/git_manager.py`（既存のGit操作機能を活用）

### 実装ステップ

#### Phase 1: Git操作の実装
```python
# main.py の init コマンド内
def init_workflow(issue_url: str):
    # 既存処理
    metadata_manager.initialize(issue_url)

    # 🆕 Git commit & push
    git_manager = GitManager(repo_path=Path.cwd(), metadata_manager=metadata_manager)

    # metadata.jsonをコミット
    commit_result = git_manager.commit_phase_output(
        phase_name='init',
        status='completed',
        review_result='PASS'
    )

    if commit_result.get('success'):
        # リモートにpush
        push_result = git_manager.push_to_remote()

        if push_result.get('success'):
            print(f"[INFO] ブランチをリモートにpushしました: {git_manager.branch_name}")
        else:
            print(f"[WARNING] Push失敗: {push_result.get('error')}")
    else:
        print(f"[WARNING] Commit失敗: {commit_result.get('error')}")
```

#### Phase 2: ドラフトPR作成
```python
# main.py の init コマンド内（push成功後）
def create_draft_pr(issue_number: int, branch_name: str):
    """ドラフトPRを作成"""

    # PRタイトル
    title = f"[AI-Workflow] Issue #355"

    # PR本文テンプレート
    body_template = '''## AI Workflow自動生成PR

### 📋 関連Issue
Closes #355

### 🔄 ワークフロー進捗

- [x] Phase 0: Planning
- [ ] Phase 1: Requirements
- [ ] Phase 2: Design
- [ ] Phase 3: Test Scenario
- [ ] Phase 4: Implementation
- [ ] Phase 5: Test Implementation
- [ ] Phase 6: Testing
- [ ] Phase 7: Documentation
- [ ] Phase 8: Report

### 📁 成果物

`.ai-workflow/issue-355/` ディレクトリに各フェーズの成果物が格納されています。

### ⚙️ 実行環境

- **モデル**: Claude Code Pro Max (Sonnet 4.5)
- **ContentParser**: OpenAI GPT-4o mini
- **ブランチ**: {branch_name}
'''

    body = body_template.format(issue_number=issue_number, branch_name=branch_name)

    # gh CLI でドラフトPR作成
    import subprocess
    result = subprocess.run(
        [
            'gh', 'pr', 'create',
            '--draft',
            '--title', title,
            '--body', body,
            '--base', 'main',
            '--head', branch_name
        ],
        capture_output=True,
        text=True
    )

    if result.returncode == 0:
        pr_url = result.stdout.strip()
        print(f"[INFO] ドラフトPRを作成しました: {pr_url}")
        return {'success': True, 'pr_url': pr_url}
    else:
        print(f"[WARNING] PR作成失敗: {result.stderr}")
        return {'success': False, 'error': result.stderr}
```

#### Phase 3: エラーハンドリング

```python
def init_workflow_with_pr(issue_url: str):
    try:
        # 1. metadata.json初期化
        metadata_manager.initialize(issue_url)
        issue_number = metadata_manager.data['issue_number']

        # 2. Git commit
        git_manager = GitManager(repo_path=Path.cwd(), metadata_manager=metadata_manager)
        commit_result = git_manager.commit_phase_output(phase_name='init', status='completed')

        if not commit_result.get('success'):
            print(f"[WARNING] Commit失敗。PRは作成されません: {commit_result.get('error')}")
            return

        # 3. Git push
        push_result = git_manager.push_to_remote()

        if not push_result.get('success'):
            print(f"[WARNING] Push失敗。PRは作成されません: {push_result.get('error')}")
            return

        # 4. ドラフトPR作成
        pr_result = create_draft_pr(issue_number, git_manager.branch_name)

        if pr_result.get('success'):
            print(f"[SUCCESS] ワークフロー初期化完了: {pr_result['pr_url']}")

    except Exception as e:
        print(f"[ERROR] 初期化中にエラーが発生しました: {e}")
        raise
```

## 期待される効果

### 1. 作業の可視性向上
- GitHub上でワークフローの進捗をリアルタイムで確認可能
- ドラフトPRのタイムラインにフェーズごとのコミットが記録される

### 2. レビューの早期化
- ドラフトPRにより、作業中でもレビュアーがコードを確認可能
- フィードバックを早い段階で受け取れる

### 3. CI/CD統合の簡素化
- PRが存在することで、GitHub ActionsやJenkinsとの連携が容易

### 4. チーム協業の改善
- 他の開発者がワークフローの状態を把握しやすい
- ブランチ保護ルールとの統合が可能

## オプション機能（将来実装）

### 1. PR本文の動的更新
各フェーズ完了時にPR本文のチェックリストを自動更新:

```python
# Phase 1完了時
gh pr edit <PR番号> --body "$(cat updated_body.md)"
```

更新後:
```markdown
- [x] Phase 0: Planning
- [x] Phase 1: Requirements  ← 更新
- [ ] Phase 2: Design
...
```

### 2. `--no-pr` オプション
PR作成をスキップするオプション:

```bash
python main.py init --issue-url <URL> --no-pr
```

### 3. PR作成失敗時のリトライ
```python
# 最大3回リトライ
for attempt in range(3):
    pr_result = create_draft_pr(issue_number, branch_name)
    if pr_result.get('success'):
        break
    time.sleep(2 ** attempt)  # exponential backoff
```

## 実装時の注意事項

### 1. Git認証
- GitHub Token（`GITHUB_TOKEN`）が設定されているか確認
- gh CLIが認証済みか確認（`gh auth status`）

### 2. ブランチ保護
- mainブランチへの直接pushを防止
- ai-workflow/* ブランチは保護しない

### 3. 既存PRのチェック
```bash
# 既存PRが存在するかチェック
gh pr list --head ai-workflow/issue-XXX --json number --jq '.[0].number'
```

既存PRがある場合は作成をスキップまたはエラー表示

## CLIコマンド例

### 基本的な使用方法
```bash
# 1. ワークフロー初期化（ドラフトPR自動作成）
python main.py init --issue-url https://github.com/tielec/infrastructure-as-code/issues/320

# 出力例:
# [INFO] metadata.jsonを作成しました: .ai-workflow/issue-320/metadata.json
# [INFO] ブランチを作成しました: ai-workflow/issue-320
# [INFO] コミットを作成しました: abc1234
# [INFO] ブランチをリモートにpushしました: ai-workflow/issue-320
# [INFO] ドラフトPRを作成しました: https://github.com/tielec/infrastructure-as-code/pull/353

# 2. フェーズ実行（既存の動作）
python main.py execute --phase requirements --issue 320
```

### Docker環境での実行
```bash
docker run --rm \
  -e CLAUDE_CODE_OAUTH_TOKEN="${CLAUDE_CODE_OAUTH_TOKEN}" \
  -e OPENAI_API_KEY="${OPENAI_API_KEY}" \
  -e GITHUB_TOKEN="${GITHUB_TOKEN}" \
  -v "$(pwd):/workspace" \
  -w /workspace/scripts/ai-workflow \
  ai-workflow:latest \
  python main.py init --issue-url https://github.com/tielec/infrastructure-as-code/issues/320
```

## Jenkins統合

```groovy
stage('Initialize Workflow') {
    steps {
        script {
            dir(env.WORKFLOW_DIR) {
                // ワークフロー初期化 + ドラフトPR自動作成
                sh """
                    python main.py init --issue-url ${params.ISSUE_URL}
                """

                // PR URLを取得してBuild Descriptionに設定
                def prUrl = sh(
                    script: "gh pr list --head ai-workflow/issue-${env.ISSUE_NUMBER} --json url --jq '.[0].url'",
                    returnStdout: true
                ).trim()

                if (prUrl) {
                    currentBuild.description = "PR: <a href='${prUrl}'>#${env.ISSUE_NUMBER}</a>"
                }
            }
        }
    }
}
```

## セキュリティ考慮事項

1. **GitHub Token権限**
   - `repo` スコープが必要（PR作成のため）
   - 最小権限の原則に従う

2. **認証情報の管理**
   - Jenkins Credentialsで管理
   - 環境変数として安全に注入

3. **ブランチ保護ルール**
   - ai-workflow/* ブランチは保護しない
   - mainブランチへの直接pushは禁止

## 関連Issue

- #320: AIワークフロー全フェーズ一括実行機能
- #352: AI Workflow認証アーキテクチャの混乱によりHaikuモデルが使用され失敗

## タスク

- [ ] Phase 1: Git commit & push機能の実装
- [ ] Phase 2: ドラフトPR作成機能の実装
- [ ] Phase 3: エラーハンドリングとリトライロジック
- [ ] Phase 4: 既存PRチェック機能
- [ ] Phase 5: PR本文テンプレートの作成
- [ ] Phase 6: `--no-pr` オプションの実装（オプション）
- [ ] Phase 7: Jenkins統合の更新
- [ ] Phase 8: README.md更新（使用例追加）
- [ ] E2Eテストの追加

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-355/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
