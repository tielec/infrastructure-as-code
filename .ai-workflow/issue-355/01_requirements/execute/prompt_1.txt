# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-355/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue情報

- **Issue番号**: #355
- **タイトル**: [FEATURE] AI Workflow: Init時にドラフトPRを自動作成
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/355
- **ラベル**: なし

### 本文

## 概要

AI Workflowの初期化（`python main.py init --issue-url <URL>`）時に、metadata.jsonを作成した後、自動的にブランチをリモートにpushし、ドラフトPull Requestを作成する機能を追加したい。

## 背景

### 現在の動作
1. `python main.py init --issue-url https://github.com/tielec/infrastructure-as-code/issues/XXX` を実行
2. `.ai-workflow/issue-XXX/metadata.json` が作成される
3. ローカルブランチ `ai-workflow/issue-XXX` が作成される（または既存ブランチを使用）
4. **ここで処理が終了**

### 問題点
- ブランチがローカルにのみ存在し、リモートにpushされない
- Pull Requestが手動で作成する必要がある
- 作業の可視性が低い（GitHub上で進捗を追跡できない）
- 他の開発者がワークフローの状態を確認できない

## 提案機能

### Init時の自動化フロー

```bash
python main.py init --issue-url https://github.com/tielec/infrastructure-as-code/issues/XXX
```

実行時の処理フロー:
1. ✅ metadata.json作成（既存）
2. ✅ ブランチ作成/切り替え（既存）
3. 🆕 **Git commit & push**
4. 🆕 **ドラフトPR作成**

### 詳細仕様

#### 1. Git Commit
```bash
git add .ai-workflow/issue-XXX/metadata.json
git commit -m "[ai-workflow] Phase 0 (init) - metadata初期化

Issue #XXX のAIワークフローを開始しました。"
```

#### 2. Git Push
```bash
# リモートブランチが存在しない場合
git push -u origin ai-workflow/issue-XXX

# リモートブランチが存在する場合
git push origin ai-workflow/issue-XXX
```

#### 3. ドラフトPR作成
```bash
gh pr create \
  --draft \
  --title "[AI-Workflow] Issue #XXX" \
  --body "$(cat <<'EOF'
## AI Workflow自動生成PR

### 📋 関連Issue
Closes #XXX

### 🔄 ワークフロー進捗

- [x] Phase 0: Planning
- [ ] Phase 1: Requirements
- [ ] Phase 2: Design
- [ ] Phase 3: Test Scenario
- [ ] Phase 4: Implementation
- [ ] Phase 5: Test Implementation
- [ ] Phase 6: Testing
- [ ] Phase 7: Documentation
- [ ] Phase 8: Report

### 📁 成果物

`.ai-workflow/issue-XXX/` ディレクトリに各フェーズの成果物が格納されています。

### ⚙️ 実行環境

- **モデル**: Claude Code Pro Max (Sonnet 4.5)
- **ContentParser**: OpenAI GPT-4o mini
- **ブランチ**: ai-workflow/issue-XXX
EOF
)" \
  --base main \
  --head ai-workflow/issue-XXX
```

## 実装方針

### 変更ファイル
- `scripts/ai-workflow/main.py`
- `scripts/ai-workflow/core/git_manager.py`（既存のGit操作機能を活用）

### 実装ステップ

#### Phase 1: Git操作の実装
```python
# main.py の init コマンド内
def init_workflow(issue_url: str):
    # 既存処理
    metadata_manager.initialize(issue_url)

    # 🆕 Git commit & push
    git_manager = GitManager(repo_path=Path.cwd(), metadata_manager=metadata_manager)

    # metadata.jsonをコミット
    commit_result = git_manager.commit_phase_output(
        phase_name='init',
        status='completed',
        review_result='PASS'
    )

    if commit_result.get('success'):
        # リモートにpush
        push_result = git_manager.push_to_remote()

        if push_result.get('success'):
            print(f"[INFO] ブランチをリモートにpushしました: {git_manager.branch_name}")
        else:
            print(f"[WARNING] Push失敗: {push_result.get('error')}")
    else:
        print(f"[WARNING] Commit失敗: {commit_result.get('error')}")
```

#### Phase 2: ドラフトPR作成
```python
# main.py の init コマンド内（push成功後）
def create_draft_pr(issue_number: int, branch_name: str):
    """ドラフトPRを作成"""

    # PRタイトル
    title = f"[AI-Workflow] Issue #355"

    # PR本文テンプレート
    body_template = '''## AI Workflow自動生成PR

### 📋 関連Issue
Closes #355

### 🔄 ワークフロー進捗

- [x] Phase 0: Planning
- [ ] Phase 1: Requirements
- [ ] Phase 2: Design
- [ ] Phase 3: Test Scenario
- [ ] Phase 4: Implementation
- [ ] Phase 5: Test Implementation
- [ ] Phase 6: Testing
- [ ] Phase 7: Documentation
- [ ] Phase 8: Report

### 📁 成果物

`.ai-workflow/issue-355/` ディレクトリに各フェーズの成果物が格納されています。

### ⚙️ 実行環境

- **モデル**: Claude Code Pro Max (Sonnet 4.5)
- **ContentParser**: OpenAI GPT-4o mini
- **ブランチ**: {branch_name}
'''

    body = body_template.format(issue_number=issue_number, branch_name=branch_name)

    # gh CLI でドラフトPR作成
    import subprocess
    result = subprocess.run(
        [
            'gh', 'pr', 'create',
            '--draft',
            '--title', title,
            '--body', body,
            '--base', 'main',
            '--head', branch_name
        ],
        capture_output=True,
        text=True
    )

    if result.returncode == 0:
        pr_url = result.stdout.strip()
        print(f"[INFO] ドラフトPRを作成しました: {pr_url}")
        return {'success': True, 'pr_url': pr_url}
    else:
        print(f"[WARNING] PR作成失敗: {result.stderr}")
        return {'success': False, 'error': result.stderr}
```

#### Phase 3: エラーハンドリング

```python
def init_workflow_with_pr(issue_url: str):
    try:
        # 1. metadata.json初期化
        metadata_manager.initialize(issue_url)
        issue_number = metadata_manager.data['issue_number']

        # 2. Git commit
        git_manager = GitManager(repo_path=Path.cwd(), metadata_manager=metadata_manager)
        commit_result = git_manager.commit_phase_output(phase_name='init', status='completed')

        if not commit_result.get('success'):
            print(f"[WARNING] Commit失敗。PRは作成されません: {commit_result.get('error')}")
            return

        # 3. Git push
        push_result = git_manager.push_to_remote()

        if not push_result.get('success'):
            print(f"[WARNING] Push失敗。PRは作成されません: {push_result.get('error')}")
            return

        # 4. ドラフトPR作成
        pr_result = create_draft_pr(issue_number, git_manager.branch_name)

        if pr_result.get('success'):
            print(f"[SUCCESS] ワークフロー初期化完了: {pr_result['pr_url']}")

    except Exception as e:
        print(f"[ERROR] 初期化中にエラーが発生しました: {e}")
        raise
```

## 期待される効果

### 1. 作業の可視性向上
- GitHub上でワークフローの進捗をリアルタイムで確認可能
- ドラフトPRのタイムラインにフェーズごとのコミットが記録される

### 2. レビューの早期化
- ドラフトPRにより、作業中でもレビュアーがコードを確認可能
- フィードバックを早い段階で受け取れる

### 3. CI/CD統合の簡素化
- PRが存在することで、GitHub ActionsやJenkinsとの連携が容易

### 4. チーム協業の改善
- 他の開発者がワークフローの状態を把握しやすい
- ブランチ保護ルールとの統合が可能

## オプション機能（将来実装）

### 1. PR本文の動的更新
各フェーズ完了時にPR本文のチェックリストを自動更新:

```python
# Phase 1完了時
gh pr edit <PR番号> --body "$(cat updated_body.md)"
```

更新後:
```markdown
- [x] Phase 0: Planning
- [x] Phase 1: Requirements  ← 更新
- [ ] Phase 2: Design
...
```

### 2. `--no-pr` オプション
PR作成をスキップするオプション:

```bash
python main.py init --issue-url <URL> --no-pr
```

### 3. PR作成失敗時のリトライ
```python
# 最大3回リトライ
for attempt in range(3):
    pr_result = create_draft_pr(issue_number, branch_name)
    if pr_result.get('success'):
        break
    time.sleep(2 ** attempt)  # exponential backoff
```

## 実装時の注意事項

### 1. Git認証
- GitHub Token（`GITHUB_TOKEN`）が設定されているか確認
- gh CLIが認証済みか確認（`gh auth status`）

### 2. ブランチ保護
- mainブランチへの直接pushを防止
- ai-workflow/* ブランチは保護しない

### 3. 既存PRのチェック
```bash
# 既存PRが存在するかチェック
gh pr list --head ai-workflow/issue-XXX --json number --jq '.[0].number'
```

既存PRがある場合は作成をスキップまたはエラー表示

## CLIコマンド例

### 基本的な使用方法
```bash
# 1. ワークフロー初期化（ドラフトPR自動作成）
python main.py init --issue-url https://github.com/tielec/infrastructure-as-code/issues/320

# 出力例:
# [INFO] metadata.jsonを作成しました: .ai-workflow/issue-320/metadata.json
# [INFO] ブランチを作成しました: ai-workflow/issue-320
# [INFO] コミットを作成しました: abc1234
# [INFO] ブランチをリモートにpushしました: ai-workflow/issue-320
# [INFO] ドラフトPRを作成しました: https://github.com/tielec/infrastructure-as-code/pull/353

# 2. フェーズ実行（既存の動作）
python main.py execute --phase requirements --issue 320
```

### Docker環境での実行
```bash
docker run --rm \
  -e CLAUDE_CODE_OAUTH_TOKEN="${CLAUDE_CODE_OAUTH_TOKEN}" \
  -e OPENAI_API_KEY="${OPENAI_API_KEY}" \
  -e GITHUB_TOKEN="${GITHUB_TOKEN}" \
  -v "$(pwd):/workspace" \
  -w /workspace/scripts/ai-workflow \
  ai-workflow:latest \
  python main.py init --issue-url https://github.com/tielec/infrastructure-as-code/issues/320
```

## Jenkins統合

```groovy
stage('Initialize Workflow') {
    steps {
        script {
            dir(env.WORKFLOW_DIR) {
                // ワークフロー初期化 + ドラフトPR自動作成
                sh """
                    python main.py init --issue-url ${params.ISSUE_URL}
                """

                // PR URLを取得してBuild Descriptionに設定
                def prUrl = sh(
                    script: "gh pr list --head ai-workflow/issue-${env.ISSUE_NUMBER} --json url --jq '.[0].url'",
                    returnStdout: true
                ).trim()

                if (prUrl) {
                    currentBuild.description = "PR: <a href='${prUrl}'>#${env.ISSUE_NUMBER}</a>"
                }
            }
        }
    }
}
```

## セキュリティ考慮事項

1. **GitHub Token権限**
   - `repo` スコープが必要（PR作成のため）
   - 最小権限の原則に従う

2. **認証情報の管理**
   - Jenkins Credentialsで管理
   - 環境変数として安全に注入

3. **ブランチ保護ルール**
   - ai-workflow/* ブランチは保護しない
   - mainブランチへの直接pushは禁止

## 関連Issue

- #320: AIワークフロー全フェーズ一括実行機能
- #352: AI Workflow認証アーキテクチャの混乱によりHaikuモデルが使用され失敗

## タスク

- [ ] Phase 1: Git commit & push機能の実装
- [ ] Phase 2: ドラフトPR作成機能の実装
- [ ] Phase 3: エラーハンドリングとリトライロジック
- [ ] Phase 4: 既存PRチェック機能
- [ ] Phase 5: PR本文テンプレートの作成
- [ ] Phase 6: `--no-pr` オプションの実装（オプション）
- [ ] Phase 7: Jenkins統合の更新
- [ ] Phase 8: README.md更新（使用例追加）
- [ ] E2Eテストの追加

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-355/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
