# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-385/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-385/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-385/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**INTEGRATION_ONLY**

### GitHub Issue情報（参考）
## Issue概要

- **Issue番号**: #385
- **タイトル**: [TASK] SSMバックアップジョブをマルチリージョン対応化（us-west-2対応追加）
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/385
- **ラベル**: なし

### 本文

## 概要

現在、SSM Parameter Storeバックアップジョブ（Admin_Jobs/ssm-backup）は ap-northeast-1 リージョンのみ対応しています。
us-west-2 リージョンにも対応できるように、リージョンをパラメータ化して複数リージョンでバックアップを実行できるようにします。

## 背景

- 現在の実装では Jenkinsfile で AWS_REGION='ap-northeast-1' がハードコードされている
- us-west-2 リージョンでもSSMパラメータを運用しており、同様にバックアップが必要
- リージョンごとにバックアップを実行できるようにする必要がある

## 現在の実装

### 1. Jenkinsfile (jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile:21)
```groovy
AWS_REGION = 'ap-northeast-1'  // ハードコード
```

### 2. DSL (jenkins/jobs/dsl/admin/admin_ssm_backup_job.groovy)
- リージョン選択のパラメータなし
- ENVIRONMENT, DRY_RUN, JENKINSFILE_BRANCH のみ

### 3. Pulumi (pulumi/jenkins-ssm-backup-s3/index.ts:11)
```typescript
const region = aws.config.region || "ap-northeast-1";
```

## 実装タスク

### Phase 1: Pulumiスタックのデプロイ
- [ ] us-west-2リージョン用のPulumiスタックをデプロイ
  - [ ] バケット名にリージョンが含まれることを確認
  - [ ] SSMパラメータ `/jenkins/{env}/backup/s3-bucket-name` がus-west-2に作成されることを確認
  - [ ] 必要に応じて IAM権限の確認

### Phase 2: Jenkins Job DSLの修正
- [ ] `jenkins/jobs/dsl/admin/admin_ssm_backup_job.groovy` にリージョンパラメータを追加
  ```groovy
  choiceParam('AWS_REGION', ['ap-northeast-1', 'us-west-2'], 'バックアップ対象のAWSリージョン')
  ```

### Phase 3: Jenkinsfileの修正
- [ ] `jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile` のAWS_REGIONをパラメータから取得するように変更
  ```groovy
  AWS_REGION = params.AWS_REGION
  ```
- [ ] リージョン表示を追加
  - ビルド表示名やログにリージョン情報を含める

### Phase 4: 動作確認
- [ ] ap-northeast-1 での動作確認（既存機能の互換性）
- [ ] us-west-2 での動作確認（新規対応）
- [ ] ドライランモードでの動作確認
- [ ] S3バケットへの正しいアップロード確認

### Phase 5: ドキュメント更新
- [ ] jenkins/README.md の更新
  - SSMバックアップジョブの説明にマルチリージョン対応を追加
- [ ] jenkins/CONTRIBUTION.md の更新（必要に応じて）

## 検証項目

- [ ] ap-northeast-1 で既存パラメータが正常にバックアップされる
- [ ] us-west-2 で新しいS3バケットに正常にバックアップされる
- [ ] リージョンごとに異なるS3バケットが使用される
- [ ] 環境（dev/prod）とリージョンの組み合わせが正しく動作する
- [ ] ドライランモードで正しいリージョン情報が表示される

## 成功基準

- [ ] ap-northeast-1 と us-west-2 の両リージョンでSSMバックアップが実行できる
- [ ] リージョンごとに独立したS3バケットにバックアップが保存される
- [ ] 既存の ap-northeast-1 バックアップ機能が影響を受けない
- [ ] ドキュメントが更新されている

## 参考情報

- Jenkinsfile: `jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile`
- DSL: `jenkins/jobs/dsl/admin/admin_ssm_backup_job.groovy`
- Pulumi: `pulumi/jenkins-ssm-backup-s3/`
- Jenkins開発ガイド: `jenkins/CONTRIBUTION.md`


## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-385/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
