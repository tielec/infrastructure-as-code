# 実装フェーズ - レビュープロンプト

## レビュー対象

### 実装ログ
@.ai-workflow/issue-385/04_implementation/output/implementation.md

### 実装されたコード
実装ログに記載されたファイルを確認してください。

### 設計書（参考）
@.ai-workflow/issue-385/02_design/output/design.md

### テストシナリオ（参考）
@.ai-workflow/issue-385/03_test_scenario/output/test-scenario.md

### 実装戦略（Phase 2で決定）
**EXTEND**

## 品質ゲート（Phase 4）

実装は以下の品質ゲートをクリアする必要があります：

- [ ] **Phase 2の設計に沿った実装である**
- [ ] **既存コードの規約に準拠している**
- [ ] **基本的なエラーハンドリングがある**
- [ ] **明らかなバグがない**

**注意**:
- Phase 4では**実コード（ビジネスロジック）の実装**のみを対象とします
- テストコードの実装はPhase 5（test_implementation）で行います
- 8フェーズワークフロー（Issue #324以降）での変更点です

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 実装が次フェーズ（テスト実行）に進める状態であれば合格
   - 細かい最適化は改善提案として記載

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テスト実行）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - テストフェーズで検出可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「間違い」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 設計との整合性（最重要）

- 設計書の内容に沿っているか
- 設計書に記載されたファイルが実装されているか
- 設計から逸脱していないか

### 2. コーディング規約への準拠

- プロジェクトのコーディング規約に従っているか
- 既存コードのスタイルと一貫性があるか
- 命名規則が適切か

### 3. エラーハンドリング

- 基本的なエラーハンドリングがあるか
- 例外が適切に処理されているか
- エラーメッセージが明確か

### 4. バグの有無

- 明らかな論理エラーがないか
- Null参照エラーの可能性がないか
- 境界値の扱いが適切か

### 5. 保守性

- コードが読みやすいか
- コメント・ドキュメントが適切か
- 複雑すぎないか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 設計書と完全に不一致の実装
- 明らかな論理エラー（動作しない）
- セキュリティ上の重大な脆弱性
- 既存システムを破壊する変更

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- パフォーマンス最適化
- コードの可読性向上
- エッジケースの追加処理
- テストカバレッジの拡大
- コメントの充実

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **Phase 2の設計に沿った実装である**: PASS/FAIL - （コメント）
- [x/  ] **既存コードの規約に準拠している**: PASS/FAIL - （コメント）
- [x/  ] **基本的なエラーハンドリングがある**: PASS/FAIL - （コメント）
- [x/  ] **明らかなバグがない**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. 設計との整合性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. コーディング規約への準拠

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. エラーハンドリング

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 4. バグの有無

**良好な点**:
- （明らかなバグがないことを確認）

**懸念点**:
- （潜在的なバグがあれば記載）

### 5. 保守性

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（実装全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、実装のクリティカルシンキングレビューを実施してください。

**注意**: 実装ログだけでなく、実際に実装されたコードファイルも確認してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
