# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-385/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue概要

- **Issue番号**: #385
- **タイトル**: [TASK] SSMバックアップジョブをマルチリージョン対応化（us-west-2対応追加）
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/385
- **ラベル**: なし

### 本文

## 概要

現在、SSM Parameter Storeバックアップジョブ（Admin_Jobs/ssm-backup）は ap-northeast-1 リージョンのみ対応しています。
us-west-2 リージョンにも対応できるように、リージョンをパラメータ化して複数リージョンでバックアップを実行できるようにします。

## 背景

- 現在の実装では Jenkinsfile で AWS_REGION='ap-northeast-1' がハードコードされている
- us-west-2 リージョンでもSSMパラメータを運用しており、同様にバックアップが必要
- リージョンごとにバックアップを実行できるようにする必要がある

## 現在の実装

### 1. Jenkinsfile (jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile:21)
```groovy
AWS_REGION = 'ap-northeast-1'  // ハードコード
```

### 2. DSL (jenkins/jobs/dsl/admin/admin_ssm_backup_job.groovy)
- リージョン選択のパラメータなし
- ENVIRONMENT, DRY_RUN, JENKINSFILE_BRANCH のみ

### 3. Pulumi (pulumi/jenkins-ssm-backup-s3/index.ts:11)
```typescript
const region = aws.config.region || "ap-northeast-1";
```

## 実装タスク

### Phase 1: Pulumiスタックのデプロイ
- [ ] us-west-2リージョン用のPulumiスタックをデプロイ
  - [ ] バケット名にリージョンが含まれることを確認
  - [ ] SSMパラメータ `/jenkins/{env}/backup/s3-bucket-name` がus-west-2に作成されることを確認
  - [ ] 必要に応じて IAM権限の確認

### Phase 2: Jenkins Job DSLの修正
- [ ] `jenkins/jobs/dsl/admin/admin_ssm_backup_job.groovy` にリージョンパラメータを追加
  ```groovy
  choiceParam('AWS_REGION', ['ap-northeast-1', 'us-west-2'], 'バックアップ対象のAWSリージョン')
  ```

### Phase 3: Jenkinsfileの修正
- [ ] `jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile` のAWS_REGIONをパラメータから取得するように変更
  ```groovy
  AWS_REGION = params.AWS_REGION
  ```
- [ ] リージョン表示を追加
  - ビルド表示名やログにリージョン情報を含める

### Phase 4: 動作確認
- [ ] ap-northeast-1 での動作確認（既存機能の互換性）
- [ ] us-west-2 での動作確認（新規対応）
- [ ] ドライランモードでの動作確認
- [ ] S3バケットへの正しいアップロード確認

### Phase 5: ドキュメント更新
- [ ] jenkins/README.md の更新
  - SSMバックアップジョブの説明にマルチリージョン対応を追加
- [ ] jenkins/CONTRIBUTION.md の更新（必要に応じて）

## 検証項目

- [ ] ap-northeast-1 で既存パラメータが正常にバックアップされる
- [ ] us-west-2 で新しいS3バケットに正常にバックアップされる
- [ ] リージョンごとに異なるS3バケットが使用される
- [ ] 環境（dev/prod）とリージョンの組み合わせが正しく動作する
- [ ] ドライランモードで正しいリージョン情報が表示される

## 成功基準

- [ ] ap-northeast-1 と us-west-2 の両リージョンでSSMバックアップが実行できる
- [ ] リージョンごとに独立したS3バケットにバックアップが保存される
- [ ] 既存の ap-northeast-1 バックアップ機能が影響を受けない
- [ ] ドキュメントが更新されている

## 参考情報

- Jenkinsfile: `jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile`
- DSL: `jenkins/jobs/dsl/admin/admin_ssm_backup_job.groovy`
- Pulumi: `pulumi/jenkins-ssm-backup-s3/`
- Jenkins開発ガイド: `jenkins/CONTRIBUTION.md`


## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-385/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
