# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-385/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-385/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue概要

- **Issue番号**: #385
- **タイトル**: [TASK] SSMバックアップジョブをマルチリージョン対応化（us-west-2対応追加）
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/385
- **ラベル**: なし

### 本文

## 概要

現在、SSM Parameter Storeバックアップジョブ（Admin_Jobs/ssm-backup）は ap-northeast-1 リージョンのみ対応しています。
us-west-2 リージョンにも対応できるように、リージョンをパラメータ化して複数リージョンでバックアップを実行できるようにします。

## 背景

- 現在の実装では Jenkinsfile で AWS_REGION='ap-northeast-1' がハードコードされている
- us-west-2 リージョンでもSSMパラメータを運用しており、同様にバックアップが必要
- リージョンごとにバックアップを実行できるようにする必要がある

## 現在の実装

### 1. Jenkinsfile (jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile:21)
```groovy
AWS_REGION = 'ap-northeast-1'  // ハードコード
```

### 2. DSL (jenkins/jobs/dsl/admin/admin_ssm_backup_job.groovy)
- リージョン選択のパラメータなし
- ENVIRONMENT, DRY_RUN, JENKINSFILE_BRANCH のみ

### 3. Pulumi (pulumi/jenkins-ssm-backup-s3/index.ts:11)
```typescript
const region = aws.config.region || "ap-northeast-1";
```

## 実装タスク

### Phase 1: Pulumiスタックのデプロイ
- [ ] us-west-2リージョン用のPulumiスタックをデプロイ
  - [ ] バケット名にリージョンが含まれることを確認
  - [ ] SSMパラメータ `/jenkins/{env}/backup/s3-bucket-name` がus-west-2に作成されることを確認
  - [ ] 必要に応じて IAM権限の確認

### Phase 2: Jenkins Job DSLの修正
- [ ] `jenkins/jobs/dsl/admin/admin_ssm_backup_job.groovy` にリージョンパラメータを追加
  ```groovy
  choiceParam('AWS_REGION', ['ap-northeast-1', 'us-west-2'], 'バックアップ対象のAWSリージョン')
  ```

### Phase 3: Jenkinsfileの修正
- [ ] `jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile` のAWS_REGIONをパラメータから取得するように変更
  ```groovy
  AWS_REGION = params.AWS_REGION
  ```
- [ ] リージョン表示を追加
  - ビルド表示名やログにリージョン情報を含める

### Phase 4: 動作確認
- [ ] ap-northeast-1 での動作確認（既存機能の互換性）
- [ ] us-west-2 での動作確認（新規対応）
- [ ] ドライランモードでの動作確認
- [ ] S3バケットへの正しいアップロード確認

### Phase 5: ドキュメント更新
- [ ] jenkins/README.md の更新
  - SSMバックアップジョブの説明にマルチリージョン対応を追加
- [ ] jenkins/CONTRIBUTION.md の更新（必要に応じて）

## 検証項目

- [ ] ap-northeast-1 で既存パラメータが正常にバックアップされる
- [ ] us-west-2 で新しいS3バケットに正常にバックアップされる
- [ ] リージョンごとに異なるS3バケットが使用される
- [ ] 環境（dev/prod）とリージョンの組み合わせが正しく動作する
- [ ] ドライランモードで正しいリージョン情報が表示される

## 成功基準

- [ ] ap-northeast-1 と us-west-2 の両リージョンでSSMバックアップが実行できる
- [ ] リージョンごとに独立したS3バケットにバックアップが保存される
- [ ] 既存の ap-northeast-1 バックアップ機能が影響を受けない
- [ ] ドキュメントが更新されている

## 参考情報

- Jenkinsfile: `jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile`
- DSL: `jenkins/jobs/dsl/admin/admin_ssm_backup_job.groovy`
- Pulumi: `pulumi/jenkins-ssm-backup-s3/`
- Jenkins開発ガイド: `jenkins/CONTRIBUTION.md`


## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **実装戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **テスト戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **既存コードへの影響範囲が分析されている**: PASS/FAIL - （コメント）
- [x/  ] **変更が必要なファイルがリストアップされている**: PASS/FAIL - （コメント）
- [x/  ] **設計が実装可能である**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、設計書のクリティカルシンキングレビューを実施してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
