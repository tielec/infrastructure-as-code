# 詳細設計フェーズ - 修正プロンプト

## タスク概要
レビューで指摘された問題を修正し、改善された設計書を作成してください。

## 元の成果物
@.ai-workflow/issue-310/02_design/output/design.md

## レビュー結果
レビュー結果に判定が含まれていませんでした。



## 参考情報

### 要件定義書
@.ai-workflow/issue-310/01_requirements/output/requirements.md

### GitHub Issue情報
## Issue情報

- **Issue番号**: #310
- **タイトル**: [ai-workflow] feat: 全フェーズの成果物をGitHub Issueコメントに投稿する機能を追加
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/310
- **ラベル**: なし

### 本文

## 概要

現在、Phase 6（documentation）のみが成果物をGitHub Issueコメントに投稿していますが、他の全フェーズ（requirements, design, test_scenario, implementation, testing, report）でも同様に成果物を投稿する機能を追加したい。

## 背景

- Phase 6（documentation）では `post_output()` メソッドを使用して成果物をGitHub Issueコメントに投稿している
- 他のフェーズでは成果物がファイルシステムにのみ保存され、GitHubコメントには投稿されていない
- 全フェーズで成果物を投稿することで、GitHub Issue上でワークフロー全体の進捗と成果物を確認できるようにしたい

## 実装内容

各フェーズの `execute()` メソッドに成果物投稿処理を追加する：

### Phase 1: Requirements
- ファイル: `scripts/ai-workflow/phases/requirements.py`
- 成果物: `requirements.md`
- タイトル: "要件定義書"

### Phase 2: Design
- ファイル: `scripts/ai-workflow/phases/design.py`
- 成果物: `design.md`
- タイトル: "詳細設計書"

### Phase 3: Test Scenario
- ファイル: `scripts/ai-workflow/phases/test_scenario.py`
- 成果物: `test-scenario.md`
- タイトル: "テストシナリオ"

### Phase 4: Implementation
- ファイル: `scripts/ai-workflow/phases/implementation.py`
- 成果物: `implementation.md`
- タイトル: "実装ログ"

### Phase 5: Testing
- ファイル: `scripts/ai-workflow/phases/testing.py`
- 成果物: `test-result.md`
- タイトル: "テスト結果"

### Phase 7: Report
- ファイル: `scripts/ai-workflow/phases/report.py`
- 成果物: `final-report.md`
- タイトル: "最終レポート"

## 実装例（Phase 6を参考）

```python
# GitHub Issueに成果物を投稿
try:
    output_content = output_file.read_text(encoding='utf-8')
    self.post_output(
        output_content=output_content,
        title="成果物タイトル"
    )
except Exception as e:
    print(f"[WARNING] 成果物のGitHub投稿に失敗しました: {e}")
```

## 参考実装

`scripts/ai-workflow/phases/documentation.py` の96-103行目:

```python
# GitHub Issueに成果物を投稿
try:
    output_content = output_file.read_text(encoding='utf-8')
    self.post_output(
        output_content=output_content,
        title="ドキュメント更新ログ"
    )
except Exception as e:
    print(f"[WARNING] 成果物のGitHub投稿に失敗しました: {e}")
```

## 期待される効果

- GitHub Issue上で各フェーズの成果物を即座に確認できる
- ワークフロー全体の進捗状況が可視化される
- 成果物のレビューがGitHub上で容易になる
- フェーズ間の一貫性が向上する

## テスト観点

- [ ] 各フェーズで成果物が正しくGitHub Issueコメントに投稿されること
- [ ] 投稿失敗時でもワークフローが正常に継続すること（WARNING表示）
- [ ] 投稿されたコメントのタイトルが適切であること
- [ ] UTF-8エンコーディングが正しく処理されること

## 関連ファイル

- `scripts/ai-workflow/phases/base_phase.py` - `post_output()` メソッドの実装
- `scripts/ai-workflow/phases/documentation.py` - 参考実装
- `scripts/ai-workflow/phases/requirements.py`
- `scripts/ai-workflow/phases/design.py`
- `scripts/ai-workflow/phases/test_scenario.py`
- `scripts/ai-workflow/phases/implementation.py`
- `scripts/ai-workflow/phases/testing.py`
- `scripts/ai-workflow/phases/report.py`

## 修正指示

### ブロッカー（BLOCKER）の解消

レビュー結果の「ブロッカー」セクションに記載された問題は、**次フェーズに進めない重大な問題**です。これらを必ず解消してください。

**ブロッカーの典型例**:
- 3つの戦略判断（実装・テスト・テストコード）が欠落 → 追加する
- 判断根拠が不十分 → 具体的かつ論理的に補強する
- ファイルリストが未記載 → リストアップする
- 設計が実装不可能 → 実装可能な設計に修正する
- 重大なセキュリティリスク → 対策を追加する

### 改善提案（SUGGESTION）の検討

レビュー結果の「改善提案」セクションに記載された項目は、可能な範囲で反映してください。

**改善提案の優先度**:
1. 設計の品質を大きく向上させる提案 → 優先的に反映
2. ドキュメントの充実（図表追加等） → 可能であれば反映
3. 細かい表現の改善 → 時間があれば反映

## 品質ゲート（Phase 2）

修正後の設計書は、以下の品質ゲートをすべて満たす必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## 修正方針

### 1. ブロッカー対応（最優先）

レビューで指摘されたブロッカーを1つずつ解消してください。

**対応方法**:
- 元の設計書を読み込む
- ブロッカー指摘箇所を特定
- 指摘内容を理解し、適切に修正
- 修正後、ブロッカーが解消されたか確認

### 2. 改善提案の反映（推奨）

可能な範囲で、レビューの改善提案を反映してください。

**対応方法**:
- 改善提案を読み込む
- 実装可能かつ効果的な提案を選択
- 元の設計書に追記・修正
- 全体の整合性を確認

### 3. 元の成果物の尊重

レビューで問題がなかった部分は、基本的に変更しないでください。

**注意点**:
- ブロッカー解消に必要な修正のみ実施
- 不必要な変更は避ける
- 元の設計の良い部分は維持する

## 修正後の確認事項

修正完了後、以下を確認してください：

1. **ブロッカーが解消されたか**
   - レビューで指摘されたすべてのブロッカーに対応したか
   - 対応内容が適切か

2. **品質ゲートを満たしているか**
   - 5つの品質ゲートすべてをクリアしているか

3. **全体の整合性**
   - 修正によって新たな矛盾が生まれていないか
   - ドキュメント全体が一貫しているか

4. **実装可能性**
   - 修正後の設計が実装可能か
   - 次フェーズ（テストシナリオ）に進めるか

## 出力形式

修正した設計書を `.ai-workflow/issue-310/02_design/output/design.md` として保存してください。

**上書き形式**で保存してください（元のファイルを置き換え）。

## 修正開始

上記を踏まえ、レビュー指摘事項を反映した改善版の設計書を作成してください。
