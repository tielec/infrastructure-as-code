# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### 要件定義書
@.ai-workflow/issue-310/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-310/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**UNIT_INTEGRATION**

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #310
- **タイトル**: [ai-workflow] feat: 全フェーズの成果物をGitHub Issueコメントに投稿する機能を追加
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/310
- **ラベル**: なし

### 本文

## 概要

現在、Phase 6（documentation）のみが成果物をGitHub Issueコメントに投稿していますが、他の全フェーズ（requirements, design, test_scenario, implementation, testing, report）でも同様に成果物を投稿する機能を追加したい。

## 背景

- Phase 6（documentation）では `post_output()` メソッドを使用して成果物をGitHub Issueコメントに投稿している
- 他のフェーズでは成果物がファイルシステムにのみ保存され、GitHubコメントには投稿されていない
- 全フェーズで成果物を投稿することで、GitHub Issue上でワークフロー全体の進捗と成果物を確認できるようにしたい

## 実装内容

各フェーズの `execute()` メソッドに成果物投稿処理を追加する：

### Phase 1: Requirements
- ファイル: `scripts/ai-workflow/phases/requirements.py`
- 成果物: `requirements.md`
- タイトル: "要件定義書"

### Phase 2: Design
- ファイル: `scripts/ai-workflow/phases/design.py`
- 成果物: `design.md`
- タイトル: "詳細設計書"

### Phase 3: Test Scenario
- ファイル: `scripts/ai-workflow/phases/test_scenario.py`
- 成果物: `test-scenario.md`
- タイトル: "テストシナリオ"

### Phase 4: Implementation
- ファイル: `scripts/ai-workflow/phases/implementation.py`
- 成果物: `implementation.md`
- タイトル: "実装ログ"

### Phase 5: Testing
- ファイル: `scripts/ai-workflow/phases/testing.py`
- 成果物: `test-result.md`
- タイトル: "テスト結果"

### Phase 7: Report
- ファイル: `scripts/ai-workflow/phases/report.py`
- 成果物: `final-report.md`
- タイトル: "最終レポート"

## 実装例（Phase 6を参考）

```python
# GitHub Issueに成果物を投稿
try:
    output_content = output_file.read_text(encoding='utf-8')
    self.post_output(
        output_content=output_content,
        title="成果物タイトル"
    )
except Exception as e:
    print(f"[WARNING] 成果物のGitHub投稿に失敗しました: {e}")
```

## 参考実装

`scripts/ai-workflow/phases/documentation.py` の96-103行目:

```python
# GitHub Issueに成果物を投稿
try:
    output_content = output_file.read_text(encoding='utf-8')
    self.post_output(
        output_content=output_content,
        title="ドキュメント更新ログ"
    )
except Exception as e:
    print(f"[WARNING] 成果物のGitHub投稿に失敗しました: {e}")
```

## 期待される効果

- GitHub Issue上で各フェーズの成果物を即座に確認できる
- ワークフロー全体の進捗状況が可視化される
- 成果物のレビューがGitHub上で容易になる
- フェーズ間の一貫性が向上する

## テスト観点

- [ ] 各フェーズで成果物が正しくGitHub Issueコメントに投稿されること
- [ ] 投稿失敗時でもワークフローが正常に継続すること（WARNING表示）
- [ ] 投稿されたコメントのタイトルが適切であること
- [ ] UTF-8エンコーディングが正しく処理されること

## 関連ファイル

- `scripts/ai-workflow/phases/base_phase.py` - `post_output()` メソッドの実装
- `scripts/ai-workflow/phases/documentation.py` - 参考実装
- `scripts/ai-workflow/phases/requirements.py`
- `scripts/ai-workflow/phases/design.py`
- `scripts/ai-workflow/phases/test_scenario.py`
- `scripts/ai-workflow/phases/implementation.py`
- `scripts/ai-workflow/phases/testing.py`
- `scripts/ai-workflow/phases/report.py`

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-310/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
