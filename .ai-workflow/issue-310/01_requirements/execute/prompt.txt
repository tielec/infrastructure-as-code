# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## Issue情報

## Issue情報

- **Issue番号**: #310
- **タイトル**: [ai-workflow] feat: 全フェーズの成果物をGitHub Issueコメントに投稿する機能を追加
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/310
- **ラベル**: なし

### 本文

## 概要

現在、Phase 6（documentation）のみが成果物をGitHub Issueコメントに投稿していますが、他の全フェーズ（requirements, design, test_scenario, implementation, testing, report）でも同様に成果物を投稿する機能を追加したい。

## 背景

- Phase 6（documentation）では `post_output()` メソッドを使用して成果物をGitHub Issueコメントに投稿している
- 他のフェーズでは成果物がファイルシステムにのみ保存され、GitHubコメントには投稿されていない
- 全フェーズで成果物を投稿することで、GitHub Issue上でワークフロー全体の進捗と成果物を確認できるようにしたい

## 実装内容

各フェーズの `execute()` メソッドに成果物投稿処理を追加する：

### Phase 1: Requirements
- ファイル: `scripts/ai-workflow/phases/requirements.py`
- 成果物: `requirements.md`
- タイトル: "要件定義書"

### Phase 2: Design
- ファイル: `scripts/ai-workflow/phases/design.py`
- 成果物: `design.md`
- タイトル: "詳細設計書"

### Phase 3: Test Scenario
- ファイル: `scripts/ai-workflow/phases/test_scenario.py`
- 成果物: `test-scenario.md`
- タイトル: "テストシナリオ"

### Phase 4: Implementation
- ファイル: `scripts/ai-workflow/phases/implementation.py`
- 成果物: `implementation.md`
- タイトル: "実装ログ"

### Phase 5: Testing
- ファイル: `scripts/ai-workflow/phases/testing.py`
- 成果物: `test-result.md`
- タイトル: "テスト結果"

### Phase 7: Report
- ファイル: `scripts/ai-workflow/phases/report.py`
- 成果物: `final-report.md`
- タイトル: "最終レポート"

## 実装例（Phase 6を参考）

```python
# GitHub Issueに成果物を投稿
try:
    output_content = output_file.read_text(encoding='utf-8')
    self.post_output(
        output_content=output_content,
        title="成果物タイトル"
    )
except Exception as e:
    print(f"[WARNING] 成果物のGitHub投稿に失敗しました: {e}")
```

## 参考実装

`scripts/ai-workflow/phases/documentation.py` の96-103行目:

```python
# GitHub Issueに成果物を投稿
try:
    output_content = output_file.read_text(encoding='utf-8')
    self.post_output(
        output_content=output_content,
        title="ドキュメント更新ログ"
    )
except Exception as e:
    print(f"[WARNING] 成果物のGitHub投稿に失敗しました: {e}")
```

## 期待される効果

- GitHub Issue上で各フェーズの成果物を即座に確認できる
- ワークフロー全体の進捗状況が可視化される
- 成果物のレビューがGitHub上で容易になる
- フェーズ間の一貫性が向上する

## テスト観点

- [ ] 各フェーズで成果物が正しくGitHub Issueコメントに投稿されること
- [ ] 投稿失敗時でもワークフローが正常に継続すること（WARNING表示）
- [ ] 投稿されたコメントのタイトルが適切であること
- [ ] UTF-8エンコーディングが正しく処理されること

## 関連ファイル

- `scripts/ai-workflow/phases/base_phase.py` - `post_output()` メソッドの実装
- `scripts/ai-workflow/phases/documentation.py` - 参考実装
- `scripts/ai-workflow/phases/requirements.py`
- `scripts/ai-workflow/phases/design.py`
- `scripts/ai-workflow/phases/test_scenario.py`
- `scripts/ai-workflow/phases/implementation.py`
- `scripts/ai-workflow/phases/testing.py`
- `scripts/ai-workflow/phases/report.py`

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-310/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
