# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### 要件定義書
@.ai-workflow/issue-305/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-305/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**UNIT_INTEGRATION**

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #305
- **タイトル**: [TASK] AI Workflow: Jenkins統合完成とPhase終了後の自動commit & push機能
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/305
- **ラベル**: なし

### 本文

## 概要
Issue #304のPhase 7完了後、既存のJenkins統合を完成させ、Phase終了後の自動commit & push機能を実装します。

## 背景
- Issue #304でPhase 1-7の全フェーズ実装が完了
- Jenkins統合は途中まで実装済み（ai-workflow-orchestratorジョブ）
- Phase実行部分とGit自動commit機能が未実装

## 既存実装の確認
- ✅ Jenkinsfile: `jenkins/jobs/pipeline/ai-workflow/ai-workflow-orchestrator/Jenkinsfile`
- ✅ Job DSL: `jenkins/jobs/dsl/ai-workflow/ai-workflow-orchestrator.groovy`
- ✅ job-config.yaml登録済み
- ⚠️ Phase 1-7実行部分は未実装（コメントアウト状態: 行156-233）

## 実装タスク

### 1. Phase終了後の自動commit & push機能（優先度: 高）

#### 実装内容
- [ ] `scripts/ai-workflow/core/git_manager.py` 新規作成
  - GitManagerクラス
  - `commit_phase_output()` メソッド
  - `push_to_remote()` メソッド
- [ ] `scripts/ai-workflow/phases/base_phase.py` 修正
  - `run()`メソッド内でGitManagerを呼び出し
  - Phase完了後（成功・失敗問わず）に自動commit & push
- [ ] `scripts/ai-workflow/requirements.txt` 更新
  - gitpython追加

#### コミットメッセージフォーマット
```
[ai-workflow] Phase X (phase_name) - status

Issue: #XXX
Phase: X (phase_name)
Status: completed/failed
Review: PASS/PASS_WITH_SUGGESTIONS/FAIL

Auto-generated by AI Workflow
```

#### 設計方針
- BasePhase.run()の最後にGit操作を追加
- 失敗時も必ずcommit（トラブルシューティング用）
- コミット対象: `.ai-workflow/issue-XXX/` 配下のみ

### 2. Jenkins統合の完成（優先度: 高）

#### 実装内容
- [ ] Jenkinsfileの未実装部分を完成
  - Phase 1-7実行ステージの実装（行148-233）
  - Docker環境での実行
  - レビュー処理の追加
- [ ] 環境変数の追加
  - `CLAUDE_CODE_OAUTH_TOKEN` (credentials)
  - `GITHUB_REPOSITORY` 設定

#### 修正箇所
`jenkins/jobs/pipeline/ai-workflow/ai-workflow-orchestrator/Jenkinsfile`

**Phase 1の実装例:**
```groovy
stage('Phase 1: Requirements') {
    steps {
        script {
            echo "Phase 1: Requirements Definition"
            
            dir(env.WORKFLOW_DIR) {
                // Phase実行
                sh """
                    ${env.PYTHON_PATH} main.py execute --phase requirements --issue ${env.ISSUE_NUMBER}
                """
                
                // レビュー実行
                if (!params.SKIP_REVIEW) {
                    sh """
                        ${env.PYTHON_PATH} main.py review --phase requirements --issue ${env.ISSUE_NUMBER}
                    """
                }
            }
        }
    }
}
```

### 3. テスト（優先度: 中）

- [ ] Git操作のUnitテスト
  - `tests/unit/core/test_git_manager.py`
- [ ] Jenkins Job手動実行テスト
  - 各フェーズの動作確認
- [ ] 自動commit & push動作確認

### 4. ドキュメント更新（優先度: 中）

- [ ] `scripts/ai-workflow/README.md`
  - Git自動commit機能の説明
- [ ] `jenkins/README.md`
  - ai-workflow-orchestratorジョブの説明
- [ ] `scripts/ai-workflow/ARCHITECTURE.md`
  - GitManagerコンポーネント追加

## 受け入れ基準

- [ ] Phase実行後、自動的に成果物がcommit & pushされる
- [ ] JenkinsからPhase 1-7を実行できる
- [ ] 各Phase完了後にレビューが実行される
- [ ] すべてのテストが成功
- [ ] ドキュメント更新完了

## 参考ファイル

- `jenkins/jobs/pipeline/ai-workflow/ai-workflow-orchestrator/Jenkinsfile`
- `jenkins/jobs/dsl/ai-workflow/ai-workflow-orchestrator.groovy`
- `scripts/ai-workflow/phases/base_phase.py`
- `scripts/ai-workflow/core/github_client.py` (参考実装)

## 備考

- Jenkins統合は既存のJenkinsfileを完成させる形で実装
- Git操作は新規でGitManagerクラスを作成

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-305/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
