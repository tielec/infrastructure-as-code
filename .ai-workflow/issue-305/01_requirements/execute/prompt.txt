# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## Issue情報

## Issue情報

- **Issue番号**: #305
- **タイトル**: [TASK] AI Workflow: Jenkins統合完成とPhase終了後の自動commit & push機能
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/305
- **ラベル**: なし

### 本文

## 概要
Issue #304のPhase 7完了後、既存のJenkins統合を完成させ、Phase終了後の自動commit & push機能を実装します。

## 背景
- Issue #304でPhase 1-7の全フェーズ実装が完了
- Jenkins統合は途中まで実装済み（ai-workflow-orchestratorジョブ）
- Phase実行部分とGit自動commit機能が未実装

## 既存実装の確認
- ✅ Jenkinsfile: `jenkins/jobs/pipeline/ai-workflow/ai-workflow-orchestrator/Jenkinsfile`
- ✅ Job DSL: `jenkins/jobs/dsl/ai-workflow/ai-workflow-orchestrator.groovy`
- ✅ job-config.yaml登録済み
- ⚠️ Phase 1-7実行部分は未実装（コメントアウト状態: 行156-233）

## 実装タスク

### 1. Phase終了後の自動commit & push機能（優先度: 高）

#### 実装内容
- [ ] `scripts/ai-workflow/core/git_manager.py` 新規作成
  - GitManagerクラス
  - `commit_phase_output()` メソッド
  - `push_to_remote()` メソッド
- [ ] `scripts/ai-workflow/phases/base_phase.py` 修正
  - `run()`メソッド内でGitManagerを呼び出し
  - Phase完了後（成功・失敗問わず）に自動commit & push
- [ ] `scripts/ai-workflow/requirements.txt` 更新
  - gitpython追加

#### コミットメッセージフォーマット
```
[ai-workflow] Phase X (phase_name) - status

Issue: #XXX
Phase: X (phase_name)
Status: completed/failed
Review: PASS/PASS_WITH_SUGGESTIONS/FAIL

Auto-generated by AI Workflow
```

#### 設計方針
- BasePhase.run()の最後にGit操作を追加
- 失敗時も必ずcommit（トラブルシューティング用）
- コミット対象: `.ai-workflow/issue-XXX/` 配下のみ

### 2. Jenkins統合の完成（優先度: 高）

#### 実装内容
- [ ] Jenkinsfileの未実装部分を完成
  - Phase 1-7実行ステージの実装（行148-233）
  - Docker環境での実行
  - レビュー処理の追加
- [ ] 環境変数の追加
  - `CLAUDE_CODE_OAUTH_TOKEN` (credentials)
  - `GITHUB_REPOSITORY` 設定

#### 修正箇所
`jenkins/jobs/pipeline/ai-workflow/ai-workflow-orchestrator/Jenkinsfile`

**Phase 1の実装例:**
```groovy
stage('Phase 1: Requirements') {
    steps {
        script {
            echo "Phase 1: Requirements Definition"
            
            dir(env.WORKFLOW_DIR) {
                // Phase実行
                sh """
                    ${env.PYTHON_PATH} main.py execute --phase requirements --issue ${env.ISSUE_NUMBER}
                """
                
                // レビュー実行
                if (!params.SKIP_REVIEW) {
                    sh """
                        ${env.PYTHON_PATH} main.py review --phase requirements --issue ${env.ISSUE_NUMBER}
                    """
                }
            }
        }
    }
}
```

### 3. テスト（優先度: 中）

- [ ] Git操作のUnitテスト
  - `tests/unit/core/test_git_manager.py`
- [ ] Jenkins Job手動実行テスト
  - 各フェーズの動作確認
- [ ] 自動commit & push動作確認

### 4. ドキュメント更新（優先度: 中）

- [ ] `scripts/ai-workflow/README.md`
  - Git自動commit機能の説明
- [ ] `jenkins/README.md`
  - ai-workflow-orchestratorジョブの説明
- [ ] `scripts/ai-workflow/ARCHITECTURE.md`
  - GitManagerコンポーネント追加

## 受け入れ基準

- [ ] Phase実行後、自動的に成果物がcommit & pushされる
- [ ] JenkinsからPhase 1-7を実行できる
- [ ] 各Phase完了後にレビューが実行される
- [ ] すべてのテストが成功
- [ ] ドキュメント更新完了

## 参考ファイル

- `jenkins/jobs/pipeline/ai-workflow/ai-workflow-orchestrator/Jenkinsfile`
- `jenkins/jobs/dsl/ai-workflow/ai-workflow-orchestrator.groovy`
- `scripts/ai-workflow/phases/base_phase.py`
- `scripts/ai-workflow/core/github_client.py` (参考実装)

## 備考

- Jenkins統合は既存のJenkinsfileを完成させる形で実装
- Git操作は新規でGitManagerクラスを作成

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-305/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
