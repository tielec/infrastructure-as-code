# 詳細設計フェーズ - 実行プロンプト

## タスク概要
要件定義書とGitHub Issueの内容から、詳細な設計書を作成してください。このフェーズでは、**実装戦略・テスト戦略・テストコード戦略の判断**も行います。

## 入力情報

### 要件定義書
@.ai-workflow/issue-305/01_requirements/output/requirements.md

### GitHub Issue情報
## Issue情報

- **Issue番号**: #305
- **タイトル**: [TASK] AI Workflow: Jenkins統合完成とPhase終了後の自動commit & push機能
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/305
- **ラベル**: なし

### 本文

## 概要
Issue #304のPhase 7完了後、既存のJenkins統合を完成させ、Phase終了後の自動commit & push機能を実装します。

## 背景
- Issue #304でPhase 1-7の全フェーズ実装が完了
- Jenkins統合は途中まで実装済み（ai-workflow-orchestratorジョブ）
- Phase実行部分とGit自動commit機能が未実装

## 既存実装の確認
- ✅ Jenkinsfile: `jenkins/jobs/pipeline/ai-workflow/ai-workflow-orchestrator/Jenkinsfile`
- ✅ Job DSL: `jenkins/jobs/dsl/ai-workflow/ai-workflow-orchestrator.groovy`
- ✅ job-config.yaml登録済み
- ⚠️ Phase 1-7実行部分は未実装（コメントアウト状態: 行156-233）

## 実装タスク

### 1. Phase終了後の自動commit & push機能（優先度: 高）

#### 実装内容
- [ ] `scripts/ai-workflow/core/git_manager.py` 新規作成
  - GitManagerクラス
  - `commit_phase_output()` メソッド
  - `push_to_remote()` メソッド
- [ ] `scripts/ai-workflow/phases/base_phase.py` 修正
  - `run()`メソッド内でGitManagerを呼び出し
  - Phase完了後（成功・失敗問わず）に自動commit & push
- [ ] `scripts/ai-workflow/requirements.txt` 更新
  - gitpython追加

#### コミットメッセージフォーマット
```
[ai-workflow] Phase X (phase_name) - status

Issue: #XXX
Phase: X (phase_name)
Status: completed/failed
Review: PASS/PASS_WITH_SUGGESTIONS/FAIL

Auto-generated by AI Workflow
```

#### 設計方針
- BasePhase.run()の最後にGit操作を追加
- 失敗時も必ずcommit（トラブルシューティング用）
- コミット対象: `.ai-workflow/issue-XXX/` 配下のみ

### 2. Jenkins統合の完成（優先度: 高）

#### 実装内容
- [ ] Jenkinsfileの未実装部分を完成
  - Phase 1-7実行ステージの実装（行148-233）
  - Docker環境での実行
  - レビュー処理の追加
- [ ] 環境変数の追加
  - `CLAUDE_CODE_OAUTH_TOKEN` (credentials)
  - `GITHUB_REPOSITORY` 設定

#### 修正箇所
`jenkins/jobs/pipeline/ai-workflow/ai-workflow-orchestrator/Jenkinsfile`

**Phase 1の実装例:**
```groovy
stage('Phase 1: Requirements') {
    steps {
        script {
            echo "Phase 1: Requirements Definition"
            
            dir(env.WORKFLOW_DIR) {
                // Phase実行
                sh """
                    ${env.PYTHON_PATH} main.py execute --phase requirements --issue ${env.ISSUE_NUMBER}
                """
                
                // レビュー実行
                if (!params.SKIP_REVIEW) {
                    sh """
                        ${env.PYTHON_PATH} main.py review --phase requirements --issue ${env.ISSUE_NUMBER}
                    """
                }
            }
        }
    }
}
```

### 3. テスト（優先度: 中）

- [ ] Git操作のUnitテスト
  - `tests/unit/core/test_git_manager.py`
- [ ] Jenkins Job手動実行テスト
  - 各フェーズの動作確認
- [ ] 自動commit & push動作確認

### 4. ドキュメント更新（優先度: 中）

- [ ] `scripts/ai-workflow/README.md`
  - Git自動commit機能の説明
- [ ] `jenkins/README.md`
  - ai-workflow-orchestratorジョブの説明
- [ ] `scripts/ai-workflow/ARCHITECTURE.md`
  - GitManagerコンポーネント追加

## 受け入れ基準

- [ ] Phase実行後、自動的に成果物がcommit & pushされる
- [ ] JenkinsからPhase 1-7を実行できる
- [ ] 各Phase完了後にレビューが実行される
- [ ] すべてのテストが成功
- [ ] ドキュメント更新完了

## 参考ファイル

- `jenkins/jobs/pipeline/ai-workflow/ai-workflow-orchestrator/Jenkinsfile`
- `jenkins/jobs/dsl/ai-workflow/ai-workflow-orchestrator.groovy`
- `scripts/ai-workflow/phases/base_phase.py`
- `scripts/ai-workflow/core/github_client.py` (参考実装)

## 備考

- Jenkins統合は既存のJenkinsfileを完成させる形で実装
- Git操作は新規でGitManagerクラスを作成

### 既存コードベースの理解

このリポジトリのプロジェクト構造、アーキテクチャ、コーディング規約を理解するため、以下のドキュメントを参照してください：

- プロジェクト全体のガイドライン: @CLAUDE.md（存在する場合）
- アーキテクチャ設計: @ARCHITECTURE.md（存在する場合）
- プロジェクトREADME: @README.md
- その他、関連するREADME、CONTRIBUTION.md等のドキュメント

上記ドキュメントから以下を把握してください：
- プロジェクトの目的とアーキテクチャ
- ディレクトリ構造とコンポーネント構成
- 既存のコーディング規約やパターン
- 開発ワークフロー

## 設計書作成手順

### 1. 既存コードベース分析

要件定義書とIssue内容から、以下を分析してください：

1. **影響範囲の特定**
   - どのコンポーネント（Ansible/Pulumi/Jenkins/Scripts）が影響を受けるか
   - 既存ファイルの修正が必要か、新規ファイルの作成が必要か
   - 依存関係のあるコンポーネントは何か

2. **既存パターンの調査**
   - 類似の機能実装がないか調査
   - 既存のコーディング規約やパターンを確認
   - 再利用可能なコンポーネントの特定

### 2. 実装戦略の判断（必須）

以下の3つから選択し、**判断根拠を明記**してください：

- **CREATE（新規作成）**: 既存コードとの依存関係がなく、完全に新しい機能
- **EXTEND（拡張）**: 既存コードを拡張・修正する必要がある
- **REFACTOR（リファクタリング）**: 既存コードの構造改善が主目的

**判断基準**：
- 既存ファイルへの影響範囲
- 新規ファイルの作成数
- 既存機能との統合度

**出力形式**：
```markdown
### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- （理由1）
- （理由2）
```

### 3. テスト戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **UNIT_ONLY**: Unitテストのみ
- **INTEGRATION_ONLY**: Integrationテストのみ
- **BDD_ONLY**: BDDテストのみ
- **UNIT_INTEGRATION**: Unit + Integration
- **UNIT_BDD**: Unit + BDD
- **INTEGRATION_BDD**: Integration + BDD
- **ALL**: すべて

**判断基準**：
- 機能の複雑度
- ユーザーストーリーの有無
- 既存テストとの整合性

**出力形式**：
```markdown
### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- （理由1）
- （理由2）
```

### 4. テストコード戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **EXTEND_TEST（既存テストの拡張）**: 既存テストファイルに追加
- **CREATE_TEST（新規テスト作成）**: 新しいテストファイルを作成
- **BOTH_TEST（両方）**: 既存テストの拡張と新規テストの作成

**判断基準**：
- 既存テストファイルの有無
- 既存テストとの関連性

**出力形式**：
```markdown
### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- （理由1）
- （理由2）
```

### 5. 設計書の構成

以下のセクションを含む設計書を作成してください：

#### 必須セクション：

1. **アーキテクチャ設計**
   - システム全体図
   - コンポーネント間の関係
   - データフロー

2. **実装戦略判断**（セクション2で記載）

3. **テスト戦略判断**（セクション3で記載）

4. **テストコード戦略判断**（セクション4で記載）

5. **影響範囲分析**
   - 既存コードへの影響
   - 依存関係の変更
   - マイグレーション要否

6. **変更・追加ファイルリスト**
   - 新規作成ファイル（相対パス）
   - 修正が必要な既存ファイル（相対パス）
   - 削除が必要なファイル（相対パス）

7. **詳細設計**
   - クラス設計（必要な場合）
   - 関数設計（主要な関数のみ）
   - データ構造設計
   - インターフェース設計

8. **セキュリティ考慮事項**
   - 認証・認可
   - データ保護
   - セキュリティリスクと対策

9. **非機能要件への対応**
   - パフォーマンス
   - スケーラビリティ
   - 保守性

10. **実装の順序**
    - 実装順序の推奨
    - 依存関係の考慮

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **既存プロジェクト構造を尊重**: 既存のディレクトリ構造やコーディング規約に従ってください
2. **トレーサビリティ**: 要件定義書の各要件に対応する設計を明示してください
3. **実装可能性**: 実装できない設計や曖昧な設計は避けてください
4. **判断の明示**: 3つの戦略判断（実装・テスト・テストコード）は必ず明記してください
5. **レビューされることを意識**: 設計書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（5つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 判断根拠は具体的かつ論理的に記載すること

## 出力形式

設計書は `.ai-workflow/issue-305/02_design/output/design.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。図表が必要な場合はMarkdownのコードブロックやテーブルを活用してください。

## 実装開始

上記を踏まえ、詳細設計書を作成してください。
