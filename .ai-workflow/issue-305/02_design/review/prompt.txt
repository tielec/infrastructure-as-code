# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-305/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-305/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #305
- **タイトル**: [TASK] AI Workflow: Jenkins統合完成とPhase終了後の自動commit & push機能
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/305
- **ラベル**: なし

### 本文

## 概要
Issue #304のPhase 7完了後、既存のJenkins統合を完成させ、Phase終了後の自動commit & push機能を実装します。

## 背景
- Issue #304でPhase 1-7の全フェーズ実装が完了
- Jenkins統合は途中まで実装済み（ai-workflow-orchestratorジョブ）
- Phase実行部分とGit自動commit機能が未実装

## 既存実装の確認
- ✅ Jenkinsfile: `jenkins/jobs/pipeline/ai-workflow/ai-workflow-orchestrator/Jenkinsfile`
- ✅ Job DSL: `jenkins/jobs/dsl/ai-workflow/ai-workflow-orchestrator.groovy`
- ✅ job-config.yaml登録済み
- ⚠️ Phase 1-7実行部分は未実装（コメントアウト状態: 行156-233）

## 実装タスク

### 1. Phase終了後の自動commit & push機能（優先度: 高）

#### 実装内容
- [ ] `scripts/ai-workflow/core/git_manager.py` 新規作成
  - GitManagerクラス
  - `commit_phase_output()` メソッド
  - `push_to_remote()` メソッド
- [ ] `scripts/ai-workflow/phases/base_phase.py` 修正
  - `run()`メソッド内でGitManagerを呼び出し
  - Phase完了後（成功・失敗問わず）に自動commit & push
- [ ] `scripts/ai-workflow/requirements.txt` 更新
  - gitpython追加

#### コミットメッセージフォーマット
```
[ai-workflow] Phase X (phase_name) - status

Issue: #XXX
Phase: X (phase_name)
Status: completed/failed
Review: PASS/PASS_WITH_SUGGESTIONS/FAIL

Auto-generated by AI Workflow
```

#### 設計方針
- BasePhase.run()の最後にGit操作を追加
- 失敗時も必ずcommit（トラブルシューティング用）
- コミット対象: `.ai-workflow/issue-XXX/` 配下のみ

### 2. Jenkins統合の完成（優先度: 高）

#### 実装内容
- [ ] Jenkinsfileの未実装部分を完成
  - Phase 1-7実行ステージの実装（行148-233）
  - Docker環境での実行
  - レビュー処理の追加
- [ ] 環境変数の追加
  - `CLAUDE_CODE_OAUTH_TOKEN` (credentials)
  - `GITHUB_REPOSITORY` 設定

#### 修正箇所
`jenkins/jobs/pipeline/ai-workflow/ai-workflow-orchestrator/Jenkinsfile`

**Phase 1の実装例:**
```groovy
stage('Phase 1: Requirements') {
    steps {
        script {
            echo "Phase 1: Requirements Definition"
            
            dir(env.WORKFLOW_DIR) {
                // Phase実行
                sh """
                    ${env.PYTHON_PATH} main.py execute --phase requirements --issue ${env.ISSUE_NUMBER}
                """
                
                // レビュー実行
                if (!params.SKIP_REVIEW) {
                    sh """
                        ${env.PYTHON_PATH} main.py review --phase requirements --issue ${env.ISSUE_NUMBER}
                    """
                }
            }
        }
    }
}
```

### 3. テスト（優先度: 中）

- [ ] Git操作のUnitテスト
  - `tests/unit/core/test_git_manager.py`
- [ ] Jenkins Job手動実行テスト
  - 各フェーズの動作確認
- [ ] 自動commit & push動作確認

### 4. ドキュメント更新（優先度: 中）

- [ ] `scripts/ai-workflow/README.md`
  - Git自動commit機能の説明
- [ ] `jenkins/README.md`
  - ai-workflow-orchestratorジョブの説明
- [ ] `scripts/ai-workflow/ARCHITECTURE.md`
  - GitManagerコンポーネント追加

## 受け入れ基準

- [ ] Phase実行後、自動的に成果物がcommit & pushされる
- [ ] JenkinsからPhase 1-7を実行できる
- [ ] 各Phase完了後にレビューが実行される
- [ ] すべてのテストが成功
- [ ] ドキュメント更新完了

## 参考ファイル

- `jenkins/jobs/pipeline/ai-workflow/ai-workflow-orchestrator/Jenkinsfile`
- `jenkins/jobs/dsl/ai-workflow/ai-workflow-orchestrator.groovy`
- `scripts/ai-workflow/phases/base_phase.py`
- `scripts/ai-workflow/core/github_client.py` (参考実装)

## 備考

- Jenkins統合は既存のJenkinsfileを完成させる形で実装
- Git操作は新規でGitManagerクラスを作成

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **実装戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **テスト戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **既存コードへの影響範囲が分析されている**: PASS/FAIL - （コメント）
- [x/  ] **変更が必要なファイルがリストアップされている**: PASS/FAIL - （コメント）
- [x/  ] **設計が実装可能である**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、設計書のクリティカルシンキングレビューを実施してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
