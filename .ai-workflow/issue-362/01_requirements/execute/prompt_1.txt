# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-362/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue情報

- **Issue番号**: #362
- **タイトル**: [FEATURE] Project Evaluation フェーズの追加
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/362
- **ラベル**: なし

### 本文

## 概要

AI Workflow の Phase 1-8 完了後にプロジェクト全体を評価し、次のアクションを判定する Project Evaluation フェーズを追加する。

プロジェクトマネージャー（PM）がプロジェクトの成果を総合的に評価し、次のアクションを決定できるようにする。

## 背景

現在のワークフローでは Phase 1-8を自動的に実行するが、以下のケースに対応できない：

1. **残タスクの管理**: プロジェクト完了後に発見された追加タスクを新しい Issue として管理
2. **品質判定**: 各フェーズの成果物が要件を満たしているか総合評価
3. **再実行判定**: 特定フェーズの成果物に問題がある場合の再実行
4. **プロジェクト中止**: 致命的な問題が発見された場合の中止判断

## ワークフロー

```
Phase 0: Planning
 ↓
Phase 1-8: Execute
 ↓
Phase 9: Evaluation (新規追加)
 ↓
 Decision
 ↓
PASS  : 何もしない
PASS_WITH_ISSUES: 新issue 作成 
FAIL_PHASE_X : phase x から再実行できるようにmetadata.json を修正
ABORT : PRにコメントをつけてクローズ、Isssueもクローズ
```

## 判定タイプ

### 1. PASS（合格）
- 全フェーズが要件を満たしている
- 追加作業なし

### 2. PASS_WITH_ISSUES（条件付き合格）
- 基本要件は満たしているが、改善点や追加タスクが存在
- **残タスクを新しい Issue として自動作成**
- 例: パフォーマンス最適化、追加テストケース、ドキュメント改善

### 3. FAIL_PHASE_X（特定フェーズ不合格）
- Phase X の成果物に問題がある
- **Phase X から再実行**
- 例: FAIL_PHASE_4 → Implementation フェーズから再実行

### 4. ABORT（中止）
- 致命的な問題が発見され、プロジェクトを中止
- ワークフロー停止
- Issue にクローズ理由を記載

## 実装TODO

- [ ] Evaluation の基本実装
  - [ ] 成果物の総合評価ロジック
  - [ ] 判定タイプの決定アルゴリズム
  - [ ] 評価レポートの生成

- [ ] PASS_WITH_ISSUES 機能
  - [ ] 残タスクの抽出
  - [ ] 新しい Issue の自動作成
  - [ ] Issue テンプレートの設計

- [ ] FAIL_PHASE_X 機能
  - [ ] フェーズ再実行の実装
  - [ ] ワークフロー状態の巻き戻し
  - [ ] 再実行履歴の記録

- [ ] ABORT 機能
  - [ ] プロジェクト中止ロジック
  - [ ] クローズ理由の記録
  - [ ] ロールバック処理（必要に応じて）

- [ ] ドキュメント整備
  - [ ] Evaluation の使用方法
  - [ ] 判定基準のガイドライン
  - [ ] トラブルシューティング

## 参考

元提案: Issue #313

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-362/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
