# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-362/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-362/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-362/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**ALL**

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #362
- **タイトル**: [FEATURE] Project Evaluation フェーズの追加
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/362
- **ラベル**: なし

### 本文

## 概要

AI Workflow の Phase 1-8 完了後にプロジェクト全体を評価し、次のアクションを判定する Project Evaluation フェーズを追加する。

プロジェクトマネージャー（PM）がプロジェクトの成果を総合的に評価し、次のアクションを決定できるようにする。

## 背景

現在のワークフローでは Phase 1-8を自動的に実行するが、以下のケースに対応できない：

1. **残タスクの管理**: プロジェクト完了後に発見された追加タスクを新しい Issue として管理
2. **品質判定**: 各フェーズの成果物が要件を満たしているか総合評価
3. **再実行判定**: 特定フェーズの成果物に問題がある場合の再実行
4. **プロジェクト中止**: 致命的な問題が発見された場合の中止判断

## ワークフロー

```
Phase 0: Planning
 ↓
Phase 1-8: Execute
 ↓
Phase 9: Evaluation (新規追加)
 ↓
 Decision
 ↓
PASS  : 何もしない
PASS_WITH_ISSUES: 新issue 作成 
FAIL_PHASE_X : phase x から再実行できるようにmetadata.json を修正
ABORT : PRにコメントをつけてクローズ、Isssueもクローズ
```

## 判定タイプ

### 1. PASS（合格）
- 全フェーズが要件を満たしている
- 追加作業なし

### 2. PASS_WITH_ISSUES（条件付き合格）
- 基本要件は満たしているが、改善点や追加タスクが存在
- **残タスクを新しい Issue として自動作成**
- 例: パフォーマンス最適化、追加テストケース、ドキュメント改善

### 3. FAIL_PHASE_X（特定フェーズ不合格）
- Phase X の成果物に問題がある
- **Phase X から再実行**
- 例: FAIL_PHASE_4 → Implementation フェーズから再実行

### 4. ABORT（中止）
- 致命的な問題が発見され、プロジェクトを中止
- ワークフロー停止
- Issue にクローズ理由を記載

## 実装TODO

- [ ] Evaluation の基本実装
  - [ ] 成果物の総合評価ロジック
  - [ ] 判定タイプの決定アルゴリズム
  - [ ] 評価レポートの生成

- [ ] PASS_WITH_ISSUES 機能
  - [ ] 残タスクの抽出
  - [ ] 新しい Issue の自動作成
  - [ ] Issue テンプレートの設計

- [ ] FAIL_PHASE_X 機能
  - [ ] フェーズ再実行の実装
  - [ ] ワークフロー状態の巻き戻し
  - [ ] 再実行履歴の記録

- [ ] ABORT 機能
  - [ ] プロジェクト中止ロジック
  - [ ] クローズ理由の記録
  - [ ] ロールバック処理（必要に応じて）

- [ ] ドキュメント整備
  - [ ] Evaluation の使用方法
  - [ ] 判定基準のガイドライン
  - [ ] トラブルシューティング

## 参考

元提案: Issue #313

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-362/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
