# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## Issue情報

## Issue情報

- **Issue番号**: #315
- **タイトル**: [機能追加] AI WorkflowでIssue番号に連動したブランチを自動作成
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/315
- **ラベル**: なし

### 本文

## 概要

AI Workflowの実行時に、Issue番号に連動したブランチを自動作成し、そのブランチ上で作業を行うようにする。

## 目的

- 各Issueの作業を独立したブランチで管理
- コード変更の追跡を容易にする
- Pull Request作成を自動化する準備

## 実装内容

### ブランチ命名規則

```
ai-workflow/issue-315
```

例: `ai-workflow/issue-310`

### 実装場所

`main.py` の `execute` コマンド実行時、または `init` コマンド実行時にブランチを作成。

### 動作

1. `main.py init --issue-url <URL>` 実行時:
   - Issue番号を取得
   - `ai-workflow/issue-{番号}` ブランチを作成
   - ブランチをチェックアウト

2. `main.py execute --phase <phase> --issue <番号>` 実行時:
   - 対象ブランチが存在しない場合は作成
   - 対象ブランチに切り替え
   - Phase実行

3. 各Phase完了後:
   - 変更をコミット
   - ブランチにプッシュ

## 検証

```bash
# 初期化
python main.py init --issue-url https://github.com/tielec/infrastructure-as-code/issues/310

# ブランチが作成されていることを確認
git branch | grep "ai-workflow/issue-310"

# Phase実行
python main.py execute --phase requirements --issue 310

# コミットとプッシュが行われていることを確認
git log -1
git status
```

## 参考

既存のGit自動commit機能（GitManager）を拡張する形で実装。

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-315/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
