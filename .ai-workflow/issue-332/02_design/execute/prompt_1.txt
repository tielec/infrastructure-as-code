# 詳細設計フェーズ - 実行プロンプト

## タスク概要
要件定義書とGitHub Issueの内容から、詳細な設計書を作成してください。このフェーズでは、**実装戦略・テスト戦略・テストコード戦略の判断**も行います。

## 入力情報

### 要件定義書
@.ai-workflow/issue-332/01_requirements/output/requirements.md

### GitHub Issue情報
## Issue情報

- **Issue番号**: #332
- **タイトル**: [FEATURE] Planning PhaseのJenkins統合とプロンプト修正
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/332
- **ラベル**: enhancement

### 本文

## 概要

AI WorkflowのPlanning Phaseを以下2点対応する：
1. Jenkinsジョブに統合
2. Planning Phaseの成果物を他のPhaseでも参照できるようにプロンプトとロジックを修正

## 背景

現在、Planning Phaseは実装されているが：
- Jenkinsジョブから実行できない
- 他のPhase（requirements, design, test_scenario, implementation, testing, documentation, report）がPlanning Phaseの成果物を参照していない

Planning Phaseは全体の開発計画を策定する重要なフェーズであり、その成果物（`planning.md`）を後続フェーズで活用すべき。

## 対応内容

### 1. Jenkinsジョブへの統合

#### 1.1 Job DSLファイルの修正

#### 1.2 パイプラインスクリプトの修正

### 2. プロンプトとロジックの修正

#### 2.1 各Phaseプロンプトの修正

全てのPhaseで Planning Phase の成果物を参照できるようにする。

**対象ファイル**:
- `scripts/ai-workflow/prompts/requirements/execute.md`
- `scripts/ai-workflow/prompts/design/execute.md`
- `scripts/ai-workflow/prompts/test_scenario/execute.md`
- `scripts/ai-workflow/prompts/implementation/execute.md`
- `scripts/ai-workflow/prompts/testing/execute.md`
- `scripts/ai-workflow/prompts/documentation/execute.md`
- `scripts/ai-workflow/prompts/report/execute.md`

**修正例** (`requirements/execute.md`):

```markdown
# Phase 1: 要件定義

## 入力情報

### Planning Phase成果物
- Planning Document: {planning_document_path}

### GitHub Issue情報
- Issue URL: {issue_url}
- Issue Title: {issue_title}
- Issue Body: {issue_body}

## タスク

Planning Documentで策定された開発計画を踏まえて、以下の要件定義を実施してください：

1. **Planning Documentの確認**
   - 開発計画の全体像を把握
   - スコープ、技術選定、リスク、スケジュールを確認

2. **機能要件の定義**
   ...
```

#### 2.2 各Phaseクラスの修正

Planning Phase成果物のパスを取得し、プロンプトに埋め込むロジックを追加。

**対象ファイル**:
- `scripts/ai-workflow/phases/requirements.py`
- `scripts/ai-workflow/phases/design.py`
- `scripts/ai-workflow/phases/test_scenario.py`
- `scripts/ai-workflow/phases/implementation.py`
- `scripts/ai-workflow/phases/testing.py`
- `scripts/ai-workflow/phases/documentation.py`
- `scripts/ai-workflow/phases/report.py`

**修正例** (`requirements.py`):

```python
def execute(self) -> Dict[str, Any]:
    try:
        # Issue情報を取得
        issue_number = int(self.metadata.data['issue_number'])
        
        # Planning Phase成果物のパス取得
        planning_file = self.metadata.workflow_dir.parent / f'issue-332' / '00_planning' / 'output' / 'planning.md'
        
        # Planning Phaseが完了していない場合の処理
        if not planning_file.exists():
            print("[WARNING] Planning Phase成果物が見つかりません。Planning Phaseをスキップします。")
            planning_path_str = "Planning Phaseは実行されていません"
        else:
            # working_dirからの相対パスを使用
            rel_path_planning = planning_file.relative_to(self.claude.working_dir)
            planning_path_str = f'@{rel_path_planning}'
        
        # 実行プロンプトを読み込み
        execute_prompt_template = self.load_prompt('execute')
        
        # プロンプトに情報を埋め込み
        execute_prompt = execute_prompt_template.replace(
            '{planning_document_path}',
            planning_path_str
        ).replace(
            '{issue_url}',
            self.metadata.data['issue_url']
        ).replace(
            '332',
            str(issue_number)
        )
        
        # 以下既存のロジック...
```

#### 2.3 BasePhaseヘルパーメソッドの追加

全Phaseで共通利用できるヘルパーメソッドを追加。

**ファイル**: `scripts/ai-workflow/phases/base_phase.py`

```python
def _get_planning_document_path(self, issue_number: int) -> str:
    """
    Planning Phase成果物のパスを取得
    
    Args:
        issue_number: Issue番号
        
    Returns:
        str: Planning Documentのパス（@付きまたは警告メッセージ）
    """
    planning_file = self.metadata.workflow_dir.parent / f'issue-332' / '00_planning' / 'output' / 'planning.md'
    
    if not planning_file.exists():
        return "Planning Phaseは実行されていません"
    
    rel_path = planning_file.relative_to(self.claude.working_dir)
    return f'@{rel_path}'
```

### 3. ドキュメント更新

#### 3.1 jenkins/README.md

Planning Phaseジョブの使用方法を追加。

#### 3.2 scripts/ai-workflow/README.md

Planning Phaseの位置づけと、各Phaseでの参照方法を記載。

## 実装順序

1. **Phase 1**: Jenkinsジョブ統合
   - Job DSLファイル作成
   - パイプラインスクリプト作成
   - job-config.yaml更新
   - シードジョブ実行

2. **Phase 2**: BasePhaseヘルパーメソッド追加
   - `_get_planning_document_path()`実装
   - テスト実施

3. **Phase 3**: 各Phaseプロンプト修正
   - 全7フェーズのexecute.md更新
   - review.md, revise.mdも必要に応じて更新

4. **Phase 4**: 各Phaseクラスロジック修正
   - Planning Document参照ロジック追加
   - 全7フェーズのexecute()メソッド修正

5. **Phase 5**: ドキュメント更新
   - jenkins/README.md更新
   - scripts/ai-workflow/README.md更新

## テスト計画

1. Planning Phaseジョブの単体テスト
2. Planning Phase → Requirements Phase の連携テスト
3. 全Phase（Planning → Report）のE2Eテスト
4. Planning Phaseスキップ時の動作確認

## 期待される効果

- Planning Phaseの開発計画が全Phaseで参照可能になり、一貫性のある開発が実現
- Jenkinsから Planning Phase を実行可能になり、ワークフロー全体が自動化
- 各Phaseが Planning の意図を理解して作業を進められる

## 関連Issue

- #305: AI Workflowの全Phase E2Eテスト
- #313: Planning Phase実装

### 既存コードベースの理解

このリポジトリのプロジェクト構造、アーキテクチャ、コーディング規約を理解するため、以下のドキュメントを参照してください：

- プロジェクト全体のガイドライン: @CLAUDE.md（存在する場合）
- アーキテクチャ設計: @ARCHITECTURE.md（存在する場合）
- プロジェクトREADME: @README.md
- その他、関連するREADME、CONTRIBUTION.md等のドキュメント

上記ドキュメントから以下を把握してください：
- プロジェクトの目的とアーキテクチャ
- ディレクトリ構造とコンポーネント構成
- 既存のコーディング規約やパターン
- 開発ワークフロー

## 設計書作成手順

### 1. 既存コードベース分析

要件定義書とIssue内容から、以下を分析してください：

1. **影響範囲の特定**
   - どのコンポーネント（Ansible/Pulumi/Jenkins/Scripts）が影響を受けるか
   - 既存ファイルの修正が必要か、新規ファイルの作成が必要か
   - 依存関係のあるコンポーネントは何か

2. **既存パターンの調査**
   - 類似の機能実装がないか調査
   - 既存のコーディング規約やパターンを確認
   - 再利用可能なコンポーネントの特定

### 2. 実装戦略の判断（必須）

以下の3つから選択し、**判断根拠を明記**してください：

- **CREATE（新規作成）**: 既存コードとの依存関係がなく、完全に新しい機能
- **EXTEND（拡張）**: 既存コードを拡張・修正する必要がある
- **REFACTOR（リファクタリング）**: 既存コードの構造改善が主目的

**判断基準**：
- 既存ファイルへの影響範囲
- 新規ファイルの作成数
- 既存機能との統合度

**出力形式**：
```markdown
### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- （理由1）
- （理由2）
```

### 3. テスト戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **UNIT_ONLY**: Unitテストのみ
- **INTEGRATION_ONLY**: Integrationテストのみ
- **BDD_ONLY**: BDDテストのみ
- **UNIT_INTEGRATION**: Unit + Integration
- **UNIT_BDD**: Unit + BDD
- **INTEGRATION_BDD**: Integration + BDD
- **ALL**: すべて

**判断基準**：
- 機能の複雑度
- ユーザーストーリーの有無
- 既存テストとの整合性

**出力形式**：
```markdown
### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- （理由1）
- （理由2）
```

### 4. テストコード戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **EXTEND_TEST（既存テストの拡張）**: 既存テストファイルに追加
- **CREATE_TEST（新規テスト作成）**: 新しいテストファイルを作成
- **BOTH_TEST（両方）**: 既存テストの拡張と新規テストの作成

**判断基準**：
- 既存テストファイルの有無
- 既存テストとの関連性

**出力形式**：
```markdown
### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- （理由1）
- （理由2）
```

### 5. 設計書の構成

以下のセクションを含む設計書を作成してください：

#### 必須セクション：

1. **アーキテクチャ設計**
   - システム全体図
   - コンポーネント間の関係
   - データフロー

2. **実装戦略判断**（セクション2で記載）

3. **テスト戦略判断**（セクション3で記載）

4. **テストコード戦略判断**（セクション4で記載）

5. **影響範囲分析**
   - 既存コードへの影響
   - 依存関係の変更
   - マイグレーション要否

6. **変更・追加ファイルリスト**
   - 新規作成ファイル（相対パス）
   - 修正が必要な既存ファイル（相対パス）
   - 削除が必要なファイル（相対パス）

7. **詳細設計**
   - クラス設計（必要な場合）
   - 関数設計（主要な関数のみ）
   - データ構造設計
   - インターフェース設計

8. **セキュリティ考慮事項**
   - 認証・認可
   - データ保護
   - セキュリティリスクと対策

9. **非機能要件への対応**
   - パフォーマンス
   - スケーラビリティ
   - 保守性

10. **実装の順序**
    - 実装順序の推奨
    - 依存関係の考慮

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **既存プロジェクト構造を尊重**: 既存のディレクトリ構造やコーディング規約に従ってください
2. **トレーサビリティ**: 要件定義書の各要件に対応する設計を明示してください
3. **実装可能性**: 実装できない設計や曖昧な設計は避けてください
4. **判断の明示**: 3つの戦略判断（実装・テスト・テストコード）は必ず明記してください
5. **レビューされることを意識**: 設計書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（5つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 判断根拠は具体的かつ論理的に記載すること

## 出力形式

設計書は `.ai-workflow/issue-332/02_design/output/design.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。図表が必要な場合はMarkdownのコードブロックやテーブルを活用してください。

## 実装開始

上記を踏まえ、詳細設計書を作成してください。
