# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-332/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-332/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #332
- **タイトル**: [FEATURE] Planning PhaseのJenkins統合とプロンプト修正
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/332
- **ラベル**: enhancement

### 本文

## 概要

AI WorkflowのPlanning Phaseを以下2点対応する：
1. Jenkinsジョブに統合
2. Planning Phaseの成果物を他のPhaseでも参照できるようにプロンプトとロジックを修正

## 背景

現在、Planning Phaseは実装されているが：
- Jenkinsジョブから実行できない
- 他のPhase（requirements, design, test_scenario, implementation, testing, documentation, report）がPlanning Phaseの成果物を参照していない

Planning Phaseは全体の開発計画を策定する重要なフェーズであり、その成果物（`planning.md`）を後続フェーズで活用すべき。

## 対応内容

### 1. Jenkinsジョブへの統合

#### 1.1 Job DSLファイルの修正

#### 1.2 パイプラインスクリプトの修正

### 2. プロンプトとロジックの修正

#### 2.1 各Phaseプロンプトの修正

全てのPhaseで Planning Phase の成果物を参照できるようにする。

**対象ファイル**:
- `scripts/ai-workflow/prompts/requirements/execute.md`
- `scripts/ai-workflow/prompts/design/execute.md`
- `scripts/ai-workflow/prompts/test_scenario/execute.md`
- `scripts/ai-workflow/prompts/implementation/execute.md`
- `scripts/ai-workflow/prompts/testing/execute.md`
- `scripts/ai-workflow/prompts/documentation/execute.md`
- `scripts/ai-workflow/prompts/report/execute.md`

**修正例** (`requirements/execute.md`):

```markdown
# Phase 1: 要件定義

## 入力情報

### Planning Phase成果物
- Planning Document: {planning_document_path}

### GitHub Issue情報
- Issue URL: {issue_url}
- Issue Title: {issue_title}
- Issue Body: {issue_body}

## タスク

Planning Documentで策定された開発計画を踏まえて、以下の要件定義を実施してください：

1. **Planning Documentの確認**
   - 開発計画の全体像を把握
   - スコープ、技術選定、リスク、スケジュールを確認

2. **機能要件の定義**
   ...
```

#### 2.2 各Phaseクラスの修正

Planning Phase成果物のパスを取得し、プロンプトに埋め込むロジックを追加。

**対象ファイル**:
- `scripts/ai-workflow/phases/requirements.py`
- `scripts/ai-workflow/phases/design.py`
- `scripts/ai-workflow/phases/test_scenario.py`
- `scripts/ai-workflow/phases/implementation.py`
- `scripts/ai-workflow/phases/testing.py`
- `scripts/ai-workflow/phases/documentation.py`
- `scripts/ai-workflow/phases/report.py`

**修正例** (`requirements.py`):

```python
def execute(self) -> Dict[str, Any]:
    try:
        # Issue情報を取得
        issue_number = int(self.metadata.data['issue_number'])
        
        # Planning Phase成果物のパス取得
        planning_file = self.metadata.workflow_dir.parent / f'issue-{issue_number}' / '00_planning' / 'output' / 'planning.md'
        
        # Planning Phaseが完了していない場合の処理
        if not planning_file.exists():
            print("[WARNING] Planning Phase成果物が見つかりません。Planning Phaseをスキップします。")
            planning_path_str = "Planning Phaseは実行されていません"
        else:
            # working_dirからの相対パスを使用
            rel_path_planning = planning_file.relative_to(self.claude.working_dir)
            planning_path_str = f'@{rel_path_planning}'
        
        # 実行プロンプトを読み込み
        execute_prompt_template = self.load_prompt('execute')
        
        # プロンプトに情報を埋め込み
        execute_prompt = execute_prompt_template.replace(
            '{planning_document_path}',
            planning_path_str
        ).replace(
            '{issue_url}',
            self.metadata.data['issue_url']
        ).replace(
            '{issue_number}',
            str(issue_number)
        )
        
        # 以下既存のロジック...
```

#### 2.3 BasePhaseヘルパーメソッドの追加

全Phaseで共通利用できるヘルパーメソッドを追加。

**ファイル**: `scripts/ai-workflow/phases/base_phase.py`

```python
def _get_planning_document_path(self, issue_number: int) -> str:
    """
    Planning Phase成果物のパスを取得
    
    Args:
        issue_number: Issue番号
        
    Returns:
        str: Planning Documentのパス（@付きまたは警告メッセージ）
    """
    planning_file = self.metadata.workflow_dir.parent / f'issue-{issue_number}' / '00_planning' / 'output' / 'planning.md'
    
    if not planning_file.exists():
        return "Planning Phaseは実行されていません"
    
    rel_path = planning_file.relative_to(self.claude.working_dir)
    return f'@{rel_path}'
```

### 3. ドキュメント更新

#### 3.1 jenkins/README.md

Planning Phaseジョブの使用方法を追加。

#### 3.2 scripts/ai-workflow/README.md

Planning Phaseの位置づけと、各Phaseでの参照方法を記載。

## 実装順序

1. **Phase 1**: Jenkinsジョブ統合
   - Job DSLファイル作成
   - パイプラインスクリプト作成
   - job-config.yaml更新
   - シードジョブ実行

2. **Phase 2**: BasePhaseヘルパーメソッド追加
   - `_get_planning_document_path()`実装
   - テスト実施

3. **Phase 3**: 各Phaseプロンプト修正
   - 全7フェーズのexecute.md更新
   - review.md, revise.mdも必要に応じて更新

4. **Phase 4**: 各Phaseクラスロジック修正
   - Planning Document参照ロジック追加
   - 全7フェーズのexecute()メソッド修正

5. **Phase 5**: ドキュメント更新
   - jenkins/README.md更新
   - scripts/ai-workflow/README.md更新

## テスト計画

1. Planning Phaseジョブの単体テスト
2. Planning Phase → Requirements Phase の連携テスト
3. 全Phase（Planning → Report）のE2Eテスト
4. Planning Phaseスキップ時の動作確認

## 期待される効果

- Planning Phaseの開発計画が全Phaseで参照可能になり、一貫性のある開発が実現
- Jenkinsから Planning Phase を実行可能になり、ワークフロー全体が自動化
- 各Phaseが Planning の意図を理解して作業を進められる

## 関連Issue

- #305: AI Workflowの全Phase E2Eテスト
- #313: Planning Phase実装

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **実装戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **テスト戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **既存コードへの影響範囲が分析されている**: PASS/FAIL - （コメント）
- [x/  ] **変更が必要なファイルがリストアップされている**: PASS/FAIL - （コメント）
- [x/  ] **設計が実装可能である**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、設計書のクリティカルシンキングレビューを実施してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
