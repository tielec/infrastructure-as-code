# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### 要件定義書
@.ai-workflow/issue-332/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-332/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**INTEGRATION_ONLY**

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #332
- **タイトル**: [FEATURE] Planning PhaseのJenkins統合とプロンプト修正
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/332
- **ラベル**: enhancement

### 本文

## 概要

AI WorkflowのPlanning Phaseを以下2点対応する：
1. Jenkinsジョブに統合
2. Planning Phaseの成果物を他のPhaseでも参照できるようにプロンプトとロジックを修正

## 背景

現在、Planning Phaseは実装されているが：
- Jenkinsジョブから実行できない
- 他のPhase（requirements, design, test_scenario, implementation, testing, documentation, report）がPlanning Phaseの成果物を参照していない

Planning Phaseは全体の開発計画を策定する重要なフェーズであり、その成果物（`planning.md`）を後続フェーズで活用すべき。

## 対応内容

### 1. Jenkinsジョブへの統合

#### 1.1 Job DSLファイルの修正

#### 1.2 パイプラインスクリプトの修正

### 2. プロンプトとロジックの修正

#### 2.1 各Phaseプロンプトの修正

全てのPhaseで Planning Phase の成果物を参照できるようにする。

**対象ファイル**:
- `scripts/ai-workflow/prompts/requirements/execute.md`
- `scripts/ai-workflow/prompts/design/execute.md`
- `scripts/ai-workflow/prompts/test_scenario/execute.md`
- `scripts/ai-workflow/prompts/implementation/execute.md`
- `scripts/ai-workflow/prompts/testing/execute.md`
- `scripts/ai-workflow/prompts/documentation/execute.md`
- `scripts/ai-workflow/prompts/report/execute.md`

**修正例** (`requirements/execute.md`):

```markdown
# Phase 1: 要件定義

## 入力情報

### Planning Phase成果物
- Planning Document: {planning_document_path}

### GitHub Issue情報
- Issue URL: {issue_url}
- Issue Title: {issue_title}
- Issue Body: {issue_body}

## タスク

Planning Documentで策定された開発計画を踏まえて、以下の要件定義を実施してください：

1. **Planning Documentの確認**
   - 開発計画の全体像を把握
   - スコープ、技術選定、リスク、スケジュールを確認

2. **機能要件の定義**
   ...
```

#### 2.2 各Phaseクラスの修正

Planning Phase成果物のパスを取得し、プロンプトに埋め込むロジックを追加。

**対象ファイル**:
- `scripts/ai-workflow/phases/requirements.py`
- `scripts/ai-workflow/phases/design.py`
- `scripts/ai-workflow/phases/test_scenario.py`
- `scripts/ai-workflow/phases/implementation.py`
- `scripts/ai-workflow/phases/testing.py`
- `scripts/ai-workflow/phases/documentation.py`
- `scripts/ai-workflow/phases/report.py`

**修正例** (`requirements.py`):

```python
def execute(self) -> Dict[str, Any]:
    try:
        # Issue情報を取得
        issue_number = int(self.metadata.data['issue_number'])
        
        # Planning Phase成果物のパス取得
        planning_file = self.metadata.workflow_dir.parent / f'issue-332' / '00_planning' / 'output' / 'planning.md'
        
        # Planning Phaseが完了していない場合の処理
        if not planning_file.exists():
            print("[WARNING] Planning Phase成果物が見つかりません。Planning Phaseをスキップします。")
            planning_path_str = "Planning Phaseは実行されていません"
        else:
            # working_dirからの相対パスを使用
            rel_path_planning = planning_file.relative_to(self.claude.working_dir)
            planning_path_str = f'@{rel_path_planning}'
        
        # 実行プロンプトを読み込み
        execute_prompt_template = self.load_prompt('execute')
        
        # プロンプトに情報を埋め込み
        execute_prompt = execute_prompt_template.replace(
            '{planning_document_path}',
            planning_path_str
        ).replace(
            '{issue_url}',
            self.metadata.data['issue_url']
        ).replace(
            '332',
            str(issue_number)
        )
        
        # 以下既存のロジック...
```

#### 2.3 BasePhaseヘルパーメソッドの追加

全Phaseで共通利用できるヘルパーメソッドを追加。

**ファイル**: `scripts/ai-workflow/phases/base_phase.py`

```python
def _get_planning_document_path(self, issue_number: int) -> str:
    """
    Planning Phase成果物のパスを取得
    
    Args:
        issue_number: Issue番号
        
    Returns:
        str: Planning Documentのパス（@付きまたは警告メッセージ）
    """
    planning_file = self.metadata.workflow_dir.parent / f'issue-332' / '00_planning' / 'output' / 'planning.md'
    
    if not planning_file.exists():
        return "Planning Phaseは実行されていません"
    
    rel_path = planning_file.relative_to(self.claude.working_dir)
    return f'@{rel_path}'
```

### 3. ドキュメント更新

#### 3.1 jenkins/README.md

Planning Phaseジョブの使用方法を追加。

#### 3.2 scripts/ai-workflow/README.md

Planning Phaseの位置づけと、各Phaseでの参照方法を記載。

## 実装順序

1. **Phase 1**: Jenkinsジョブ統合
   - Job DSLファイル作成
   - パイプラインスクリプト作成
   - job-config.yaml更新
   - シードジョブ実行

2. **Phase 2**: BasePhaseヘルパーメソッド追加
   - `_get_planning_document_path()`実装
   - テスト実施

3. **Phase 3**: 各Phaseプロンプト修正
   - 全7フェーズのexecute.md更新
   - review.md, revise.mdも必要に応じて更新

4. **Phase 4**: 各Phaseクラスロジック修正
   - Planning Document参照ロジック追加
   - 全7フェーズのexecute()メソッド修正

5. **Phase 5**: ドキュメント更新
   - jenkins/README.md更新
   - scripts/ai-workflow/README.md更新

## テスト計画

1. Planning Phaseジョブの単体テスト
2. Planning Phase → Requirements Phase の連携テスト
3. 全Phase（Planning → Report）のE2Eテスト
4. Planning Phaseスキップ時の動作確認

## 期待される効果

- Planning Phaseの開発計画が全Phaseで参照可能になり、一貫性のある開発が実現
- Jenkinsから Planning Phase を実行可能になり、ワークフロー全体が自動化
- 各Phaseが Planning の意図を理解して作業を進められる

## 関連Issue

- #305: AI Workflowの全Phase E2Eテスト
- #313: Planning Phase実装

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-332/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
