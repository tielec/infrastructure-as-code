# プロジェクト計画フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細なプロジェクト計画書を作成してください。
Phase 0はプロジェクトマネージャの役割を担い、開発作業を計画的かつ効率的に進められるようにします。

## Issue情報

## Issue情報

- **Issue番号**: #363
- **タイトル**: [AI-WORKFLOW] 全フェーズ完了後のPull Request内容の自動更新
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/363
- **ラベル**: なし

### 本文

## 概要

AI Workflowの全フェーズ（Phase 0-7）実行完了後、Pull Requestの本文を実際の成果物に基づいて適切に更新する機能を実装する。

現在はPhase 0で作成されたテンプレート本文のままになっているため、レビュアーが変更内容を把握しづらい状態となっている。

## 現状の問題

### Phase 0でのPR作成時
- テンプレートベースのPR本文を使用
- チェックリストは初期状態（Phase 0のみチェック済み）
- 変更内容の詳細は未記載

### 各フェーズ実行中
- ワークフロー進捗チェックリストは更新される
- しかし、実装内容のサマリーや詳細は更新されない

### Phase 7 (Report) 完了後
- 最終的な成果物が揃っているが、PR本文には反映されない
- レビュアーがIssueやコミット履歴を追わないと変更内容を把握できない

## 実装内容

### Phase 7完了時にPR本文を更新

以下の情報を含めた詳細なPR本文を生成し、既存PRを更新する：

#### 1. 変更サマリー
- Issue要件の概要
- 実装した機能・修正内容の要約
- 影響範囲（変更されたコンポーネント）

#### 2. 実装詳細
- Phase 4 (Implementation) の成果物から抽出
- 主要な変更ファイルとその説明
- アーキテクチャ上の変更点

#### 3. テスト結果
- Phase 6 (Testing) の結果サマリー
- テストカバレッジ
- 発見・修正された問題

#### 4. ドキュメント更新
- Phase 7 (Documentation) で更新されたドキュメント一覧
- README、CONTRIBUTION、その他関連ドキュメント

#### 5. レビューポイント
- レビュアーが特に確認すべき箇所
- 設計判断の理由
- トレードオフや制約事項

## PR本文の構成案

```markdown
## AI Workflow自動生成PR

### 📋 関連Issue
Closes #XXX

### 📝 変更サマリー
{Issueから抽出した要件概要}

{実装した機能・修正内容の要約}

### 🔄 ワークフロー進捗
- [x] Phase 0: Planning
- [x] Phase 1: Requirements
- [x] Phase 2: Design
- [x] Phase 3: Test Scenario
- [x] Phase 4: Implementation
- [x] Phase 5: Test Implementation
- [x] Phase 6: Testing
- [x] Phase 7: Documentation
- [x] Phase 8: Report

### 🔧 実装詳細

#### 変更ファイル
- `path/to/file.py`: {変更内容の説明}
- `path/to/another.py`: {変更内容の説明}

#### アーキテクチャ変更
{設計ドキュメントから抽出}

### ✅ テスト結果

#### テストカバレッジ
- 単体テスト: XX件 (全てPASS)
- 統合テスト: XX件 (全てPASS)

#### 修正された問題
- {発見・修正された問題のリスト}

### 📚 ドキュメント更新
- [ ] README.md
- [ ] CONTRIBUTION.md
- [ ] {その他のドキュメント}

### 👀 レビューポイント
1. {重要な確認ポイント1}
2. {重要な確認ポイント2}
3. {重要な確認ポイント3}

### 📁 成果物
`.ai-workflow/issue-XXX/` ディレクトリに各フェーズの成果物が格納されています。

### ⚙️ 実行環境
- **モデル**: Claude Code Pro Max (Sonnet 4.5)
- **ContentParser**: OpenAI GPT-4o mini
- **ブランチ**: {branch_name}
```

## 実装TODO

- [ ] PR本文更新機能の実装
  - [ ] `GitHubClient.update_pull_request()` メソッドの追加
  - [ ] PR本文テンプレートの拡張（詳細版）
  - [ ] 各フェーズ成果物からの情報抽出ロジック

- [ ] Phase 7完了時の統合
  - [ ] Phase 7 (Documentation) 完了後にPR更新を実行
  - [ ] 全フェーズの成果物を収集
  - [ ] PR本文の生成と更新

- [ ] 情報抽出ロジック
  - [ ] Issue要件からサマリー抽出
  - [ ] Phase 4から実装詳細抽出
  - [ ] Phase 6からテスト結果抽出
  - [ ] Phase 7からドキュメント更新リスト抽出
  - [ ] Gitコミット履歴から変更ファイル一覧取得

- [ ] テンプレート管理
  - [ ] 詳細版PR本文テンプレートの作成
  - [ ] `scripts/ai-workflow/templates/pr_body_detailed_template.md`
  - [ ] プレースホルダー設計

- [ ] エラーハンドリング
  - [ ] PR更新失敗時の処理
  - [ ] 必須情報が不足している場合の処理
  - [ ] GitHub API制限への対応

- [ ] ドキュメント整備
  - [ ] PR更新機能の使用方法
  - [ ] カスタマイズ方法
  - [ ] トラブルシューティング

## 期待される効果

1. **レビュー効率向上**: PR本文だけで変更内容を把握可能
2. **品質向上**: テスト結果や実装詳細が明示され、レビューが容易に
3. **ドキュメント性**: PRそのものが完結したドキュメントとして機能
4. **トレーサビリティ**: Issue → 実装 → テスト → ドキュメント の流れが明確

## 技術的考慮事項

### GitHub API制限
- PR本文の更新は `repository.get_pull(number).edit(body=new_body)` を使用
- API rate limitに注意（認証済みで5000リクエスト/時間）

### 成果物の解析
- 各フェーズの成果物は `.ai-workflow/issue-XXX/phaseX/` に格納
- YAMLやMarkdownファイルから構造化データを抽出
- コミット履歴からファイル変更を取得

### テンプレート設計
- 初期作成時: `pr_body_template.md`（簡易版）
- 最終更新時: `pr_body_detailed_template.md`（詳細版）
- 両方のテンプレートを `scripts/ai-workflow/templates/` で管理

## 関連Issue

- Issue #355: テンプレート外部ファイル化（完了）
- Issue #362: Phase 8 Project Evaluation の追加（今後）

## プロジェクト計画書の構成

以下のセクションを含むプロジェクト計画書を作成してください：

### 1. Issue分析
- **複雑度**: 簡単/中程度/複雑を判定
  - 簡単: 単一ファイルの修正、シンプルな機能追加（見積もり: ~4時間）
  - 中程度: 複数ファイルの修正、既存機能の拡張（見積もり: 4~16時間）
  - 複雑: アーキテクチャ変更、新規サブシステム追加（見積もり: 16時間~）
- **見積もり工数**: X時間（根拠を記載）
- **リスク評価**: 低/中/高

### 2. 実装戦略判断

**重要**: このセクションは最も重要です。Phase 2（Design）で使用されるため、必ず明記してください。

#### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- CREATE: 新規ファイル・クラス・モジュールの作成が中心
- EXTEND: 既存コードの拡張（機能追加）が中心
- REFACTOR: 既存コードのリファクタリング（構造改善）が中心

（判断理由を具体的に記載）

#### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- UNIT_ONLY: ユニットテストのみ（単純なロジック、外部依存なし）
- INTEGRATION_ONLY: インテグレーションテストのみ（外部システム連携中心）
- BDD_ONLY: BDDテストのみ（ユーザーストーリー中心）
- UNIT_INTEGRATION: ユニット + インテグレーション（一般的な機能開発）
- UNIT_BDD: ユニット + BDD（エンドユーザー向け機能）
- INTEGRATION_BDD: インテグレーション + BDD（システム間連携＋ユーザーストーリー）
- ALL: すべてのテストレベル（大規模な変更、高リスク）

（判断理由を具体的に記載）

#### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- EXTEND_TEST: 既存テストファイルに追加（既存機能の拡張時）
- CREATE_TEST: 新規テストファイル作成（新規機能追加時）
- BOTH_TEST: 両方（既存テスト拡張 + 新規テスト作成）

（判断理由を具体的に記載）

### 3. 影響範囲分析
- **既存コードへの影響**: 変更が必要なファイル・モジュール
- **依存関係の変更**: 新規依存の追加、既存依存の変更
- **マイグレーション要否**: データベーススキーマ変更、設定ファイル変更等

### 4. タスク分割

各フェーズについて、サブタスクを洗い出してください：

#### Phase 1: 要件定義 (見積もり: Xh)
- サブタスク1
- サブタスク2
...

#### Phase 2: 設計 (見積もり: Xh)
...

#### Phase 3: テストシナリオ (見積もり: Xh)
...

#### Phase 4: 実装 (見積もり: Xh)
...

#### Phase 5: テスト (見積もり: Xh)
...

#### Phase 6: ドキュメント (見積もり: Xh)
...

#### Phase 7: レポート (見積もり: Xh)
...

**タスク粒度基準**:
- 1タスク = 1~4時間程度で完了可能な作業単位
- 明確な完了条件（Done criteria）を持つ
- 他のタスクから独立して実装・テスト可能

### 5. 依存関係

タスク間の依存関係をMermaid形式で図示してください：

```mermaid
graph TD
    P1[Phase 1] --> P2[Phase 2]
    P2 --> P3[Phase 3]
    P3 --> P4[Phase 4]
    P4 --> P5[Phase 5]
    P5 --> P6[Phase 6]
    P6 --> P7[Phase 7]
```

### 6. リスクと軽減策

潜在的なリスクを洗い出し、各リスクに対する軽減策を記載してください：

#### リスク1: （リスク名）
- **影響度**: 低/中/高
- **確率**: 低/中/高
- **軽減策**: （具体的な対策）

#### リスク2: （リスク名）
...

**リスクカテゴリ**:
- 技術的リスク: 新技術の学習コスト、既存システムとの統合問題
- スコープリスク: 要件の曖昧さ、スコープクリープ
- リソースリスク: 工数不足、スキル不足
- 依存リスク: 外部システム依存、ブロッキング問題

### 7. 品質ゲート

各フェーズの合格基準を定義してください：

#### Phase 1: 要件定義
- [ ] 機能要件が明確に記載されている
- [ ] 受け入れ基準が定義されている
...

#### Phase 2: 設計
- [ ] 実装戦略の判断根拠が明記されている
- [ ] テスト戦略の判断根拠が明記されている
...

（以下、Phase 3~7についても記載）

## 出力形式

Markdown形式でプロジェクト計画書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-363/00_planning/output/planning.md
```

## 品質ゲート（Phase 0）

作成するプロジェクト計画書は、以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略が明確に決定されている**（CREATE/EXTEND/REFACTOR）
- [ ] **テスト戦略が明確に決定されている**（UNIT_ONLY/.../ALL）
- [ ] **テストコード戦略が明確に決定されている**（EXTEND_TEST/CREATE_TEST/BOTH_TEST）
- [ ] **影響範囲が分析されている**
- [ ] **タスク分割が適切な粒度である**（1タスク = 1~4時間）
- [ ] **リスクが洗い出されている**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **実装戦略の判断**: Phase 2で使用されるため、必ず明記してください
   - 実装戦略: CREATE/EXTEND/REFACTOR
   - テスト戦略: UNIT_ONLY/.../ALL
   - テストコード戦略: EXTEND_TEST/CREATE_TEST/BOTH_TEST

2. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な計画を記述
   - NG例: "適切に対応する"、"必要に応じて実施"
   - OK例: "Phase 2で詳細設計を実施"、"最大3回のリトライを実施"

3. **実現可能性**: 見積もりが現実的か、リソースは十分か確認
   - タスク粒度が大きすぎないか（1タスク = 1~4時間）
   - 依存関係が正確に記載されているか

4. **リスク分析の網羅性**: 重要なリスクが見逃されていないか確認
   - 技術的リスク、スコープリスク、リソースリスク、依存リスク

5. **レビューされることを意識**: 作成した計画書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（6つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント

## プロジェクト計画書の作成を開始してください
