# 詳細設計フェーズ - 実行プロンプト

## タスク概要
要件定義書とGitHub Issueの内容から、詳細な設計書を作成してください。このフェーズでは、**実装戦略・テスト戦略・テストコード戦略の判断**も行います。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-363/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-363/01_requirements/output/requirements.md

### GitHub Issue情報
## Issue情報

- **Issue番号**: #363
- **タイトル**: [AI-WORKFLOW] 全フェーズ完了後のPull Request内容の自動更新
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/363
- **ラベル**: なし

### 本文

## 概要

AI Workflowの全フェーズ（Phase 0-7）実行完了後、Pull Requestの本文を実際の成果物に基づいて適切に更新する機能を実装する。

現在はPhase 0で作成されたテンプレート本文のままになっているため、レビュアーが変更内容を把握しづらい状態となっている。

## 現状の問題

### Phase 0でのPR作成時
- テンプレートベースのPR本文を使用
- チェックリストは初期状態（Phase 0のみチェック済み）
- 変更内容の詳細は未記載

### 各フェーズ実行中
- ワークフロー進捗チェックリストは更新される
- しかし、実装内容のサマリーや詳細は更新されない

### Phase 7 (Report) 完了後
- 最終的な成果物が揃っているが、PR本文には反映されない
- レビュアーがIssueやコミット履歴を追わないと変更内容を把握できない

## 実装内容

### Phase 7完了時にPR本文を更新

以下の情報を含めた詳細なPR本文を生成し、既存PRを更新する：

#### 1. 変更サマリー
- Issue要件の概要
- 実装した機能・修正内容の要約
- 影響範囲（変更されたコンポーネント）

#### 2. 実装詳細
- Phase 4 (Implementation) の成果物から抽出
- 主要な変更ファイルとその説明
- アーキテクチャ上の変更点

#### 3. テスト結果
- Phase 6 (Testing) の結果サマリー
- テストカバレッジ
- 発見・修正された問題

#### 4. ドキュメント更新
- Phase 7 (Documentation) で更新されたドキュメント一覧
- README、CONTRIBUTION、その他関連ドキュメント

#### 5. レビューポイント
- レビュアーが特に確認すべき箇所
- 設計判断の理由
- トレードオフや制約事項

## PR本文の構成案

```markdown
## AI Workflow自動生成PR

### 📋 関連Issue
Closes #XXX

### 📝 変更サマリー
{Issueから抽出した要件概要}

{実装した機能・修正内容の要約}

### 🔄 ワークフロー進捗
- [x] Phase 0: Planning
- [x] Phase 1: Requirements
- [x] Phase 2: Design
- [x] Phase 3: Test Scenario
- [x] Phase 4: Implementation
- [x] Phase 5: Test Implementation
- [x] Phase 6: Testing
- [x] Phase 7: Documentation
- [x] Phase 8: Report

### 🔧 実装詳細

#### 変更ファイル
- `path/to/file.py`: {変更内容の説明}
- `path/to/another.py`: {変更内容の説明}

#### アーキテクチャ変更
{設計ドキュメントから抽出}

### ✅ テスト結果

#### テストカバレッジ
- 単体テスト: XX件 (全てPASS)
- 統合テスト: XX件 (全てPASS)

#### 修正された問題
- {発見・修正された問題のリスト}

### 📚 ドキュメント更新
- [ ] README.md
- [ ] CONTRIBUTION.md
- [ ] {その他のドキュメント}

### 👀 レビューポイント
1. {重要な確認ポイント1}
2. {重要な確認ポイント2}
3. {重要な確認ポイント3}

### 📁 成果物
`.ai-workflow/issue-XXX/` ディレクトリに各フェーズの成果物が格納されています。

### ⚙️ 実行環境
- **モデル**: Claude Code Pro Max (Sonnet 4.5)
- **ContentParser**: OpenAI GPT-4o mini
- **ブランチ**: {branch_name}
```

## 実装TODO

- [ ] PR本文更新機能の実装
  - [ ] `GitHubClient.update_pull_request()` メソッドの追加
  - [ ] PR本文テンプレートの拡張（詳細版）
  - [ ] 各フェーズ成果物からの情報抽出ロジック

- [ ] Phase 7完了時の統合
  - [ ] Phase 7 (Documentation) 完了後にPR更新を実行
  - [ ] 全フェーズの成果物を収集
  - [ ] PR本文の生成と更新

- [ ] 情報抽出ロジック
  - [ ] Issue要件からサマリー抽出
  - [ ] Phase 4から実装詳細抽出
  - [ ] Phase 6からテスト結果抽出
  - [ ] Phase 7からドキュメント更新リスト抽出
  - [ ] Gitコミット履歴から変更ファイル一覧取得

- [ ] テンプレート管理
  - [ ] 詳細版PR本文テンプレートの作成
  - [ ] `scripts/ai-workflow/templates/pr_body_detailed_template.md`
  - [ ] プレースホルダー設計

- [ ] エラーハンドリング
  - [ ] PR更新失敗時の処理
  - [ ] 必須情報が不足している場合の処理
  - [ ] GitHub API制限への対応

- [ ] ドキュメント整備
  - [ ] PR更新機能の使用方法
  - [ ] カスタマイズ方法
  - [ ] トラブルシューティング

## 期待される効果

1. **レビュー効率向上**: PR本文だけで変更内容を把握可能
2. **品質向上**: テスト結果や実装詳細が明示され、レビューが容易に
3. **ドキュメント性**: PRそのものが完結したドキュメントとして機能
4. **トレーサビリティ**: Issue → 実装 → テスト → ドキュメント の流れが明確

## 技術的考慮事項

### GitHub API制限
- PR本文の更新は `repository.get_pull(number).edit(body=new_body)` を使用
- API rate limitに注意（認証済みで5000リクエスト/時間）

### 成果物の解析
- 各フェーズの成果物は `.ai-workflow/issue-XXX/phaseX/` に格納
- YAMLやMarkdownファイルから構造化データを抽出
- コミット履歴からファイル変更を取得

### テンプレート設計
- 初期作成時: `pr_body_template.md`（簡易版）
- 最終更新時: `pr_body_detailed_template.md`（詳細版）
- 両方のテンプレートを `scripts/ai-workflow/templates/` で管理

## 関連Issue

- Issue #355: テンプレート外部ファイル化（完了）
- Issue #362: Phase 8 Project Evaluation の追加（今後）

### 既存コードベースの理解

このリポジトリのプロジェクト構造、アーキテクチャ、コーディング規約を理解するため、以下のドキュメントを参照してください：

- プロジェクト全体のガイドライン: @CLAUDE.md（存在する場合）
- アーキテクチャ設計: @ARCHITECTURE.md（存在する場合）
- プロジェクトREADME: @README.md
- その他、関連するREADME、CONTRIBUTION.md等のドキュメント

上記ドキュメントから以下を把握してください：
- プロジェクトの目的とアーキテクチャ
- ディレクトリ構造とコンポーネント構成
- 既存のコーディング規約やパターン
- 開発ワークフロー

## 設計書作成手順

### 1. 既存コードベース分析

要件定義書とIssue内容から、以下を分析してください：

1. **影響範囲の特定**
   - どのコンポーネント（Ansible/Pulumi/Jenkins/Scripts）が影響を受けるか
   - 既存ファイルの修正が必要か、新規ファイルの作成が必要か
   - 依存関係のあるコンポーネントは何か

2. **既存パターンの調査**
   - 類似の機能実装がないか調査
   - 既存のコーディング規約やパターンを確認
   - 再利用可能なコンポーネントの特定

### 2. 実装戦略の判断（必須）

以下の3つから選択し、**判断根拠を明記**してください：

- **CREATE（新規作成）**: 既存コードとの依存関係がなく、完全に新しい機能
- **EXTEND（拡張）**: 既存コードを拡張・修正する必要がある
- **REFACTOR（リファクタリング）**: 既存コードの構造改善が主目的

**判断基準**：
- 既存ファイルへの影響範囲
- 新規ファイルの作成数
- 既存機能との統合度

**出力形式**：
```markdown
### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- （理由1）
- （理由2）
```

### 3. テスト戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **UNIT_ONLY**: Unitテストのみ
- **INTEGRATION_ONLY**: Integrationテストのみ
- **BDD_ONLY**: BDDテストのみ
- **UNIT_INTEGRATION**: Unit + Integration
- **UNIT_BDD**: Unit + BDD
- **INTEGRATION_BDD**: Integration + BDD
- **ALL**: すべて

**判断基準**：
- 機能の複雑度
- ユーザーストーリーの有無
- 既存テストとの整合性

**出力形式**：
```markdown
### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- （理由1）
- （理由2）
```

### 4. テストコード戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **EXTEND_TEST（既存テストの拡張）**: 既存テストファイルに追加
- **CREATE_TEST（新規テスト作成）**: 新しいテストファイルを作成
- **BOTH_TEST（両方）**: 既存テストの拡張と新規テストの作成

**判断基準**：
- 既存テストファイルの有無
- 既存テストとの関連性

**出力形式**：
```markdown
### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- （理由1）
- （理由2）
```

### 5. 設計書の構成

以下のセクションを含む設計書を作成してください：

#### 必須セクション：

1. **アーキテクチャ設計**
   - システム全体図
   - コンポーネント間の関係
   - データフロー

2. **実装戦略判断**（セクション2で記載）

3. **テスト戦略判断**（セクション3で記載）

4. **テストコード戦略判断**（セクション4で記載）

5. **影響範囲分析**
   - 既存コードへの影響
   - 依存関係の変更
   - マイグレーション要否

6. **変更・追加ファイルリスト**
   - 新規作成ファイル（相対パス）
   - 修正が必要な既存ファイル（相対パス）
   - 削除が必要なファイル（相対パス）

7. **詳細設計**
   - クラス設計（必要な場合）
   - 関数設計（主要な関数のみ）
   - データ構造設計
   - インターフェース設計

8. **セキュリティ考慮事項**
   - 認証・認可
   - データ保護
   - セキュリティリスクと対策

9. **非機能要件への対応**
   - パフォーマンス
   - スケーラビリティ
   - 保守性

10. **実装の順序**
    - 実装順序の推奨
    - 依存関係の考慮

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **既存プロジェクト構造を尊重**: 既存のディレクトリ構造やコーディング規約に従ってください
2. **トレーサビリティ**: 要件定義書の各要件に対応する設計を明示してください
3. **実装可能性**: 実装できない設計や曖昧な設計は避けてください
4. **判断の明示**: 3つの戦略判断（実装・テスト・テストコード）は必ず明記してください
5. **レビューされることを意識**: 設計書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（5つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 判断根拠は具体的かつ論理的に記載すること

## 出力形式

設計書は `.ai-workflow/issue-363/02_design/output/design.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。図表が必要な場合はMarkdownのコードブロックやテーブルを活用してください。

## 実装開始

上記を踏まえ、詳細設計書を作成してください。
