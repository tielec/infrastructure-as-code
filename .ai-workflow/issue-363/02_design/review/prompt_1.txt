# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-363/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-363/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #363
- **タイトル**: [AI-WORKFLOW] 全フェーズ完了後のPull Request内容の自動更新
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/363
- **ラベル**: なし

### 本文

## 概要

AI Workflowの全フェーズ（Phase 0-7）実行完了後、Pull Requestの本文を実際の成果物に基づいて適切に更新する機能を実装する。

現在はPhase 0で作成されたテンプレート本文のままになっているため、レビュアーが変更内容を把握しづらい状態となっている。

## 現状の問題

### Phase 0でのPR作成時
- テンプレートベースのPR本文を使用
- チェックリストは初期状態（Phase 0のみチェック済み）
- 変更内容の詳細は未記載

### 各フェーズ実行中
- ワークフロー進捗チェックリストは更新される
- しかし、実装内容のサマリーや詳細は更新されない

### Phase 7 (Report) 完了後
- 最終的な成果物が揃っているが、PR本文には反映されない
- レビュアーがIssueやコミット履歴を追わないと変更内容を把握できない

## 実装内容

### Phase 7完了時にPR本文を更新

以下の情報を含めた詳細なPR本文を生成し、既存PRを更新する：

#### 1. 変更サマリー
- Issue要件の概要
- 実装した機能・修正内容の要約
- 影響範囲（変更されたコンポーネント）

#### 2. 実装詳細
- Phase 4 (Implementation) の成果物から抽出
- 主要な変更ファイルとその説明
- アーキテクチャ上の変更点

#### 3. テスト結果
- Phase 6 (Testing) の結果サマリー
- テストカバレッジ
- 発見・修正された問題

#### 4. ドキュメント更新
- Phase 7 (Documentation) で更新されたドキュメント一覧
- README、CONTRIBUTION、その他関連ドキュメント

#### 5. レビューポイント
- レビュアーが特に確認すべき箇所
- 設計判断の理由
- トレードオフや制約事項

## PR本文の構成案

```markdown
## AI Workflow自動生成PR

### 📋 関連Issue
Closes #XXX

### 📝 変更サマリー
{Issueから抽出した要件概要}

{実装した機能・修正内容の要約}

### 🔄 ワークフロー進捗
- [x] Phase 0: Planning
- [x] Phase 1: Requirements
- [x] Phase 2: Design
- [x] Phase 3: Test Scenario
- [x] Phase 4: Implementation
- [x] Phase 5: Test Implementation
- [x] Phase 6: Testing
- [x] Phase 7: Documentation
- [x] Phase 8: Report

### 🔧 実装詳細

#### 変更ファイル
- `path/to/file.py`: {変更内容の説明}
- `path/to/another.py`: {変更内容の説明}

#### アーキテクチャ変更
{設計ドキュメントから抽出}

### ✅ テスト結果

#### テストカバレッジ
- 単体テスト: XX件 (全てPASS)
- 統合テスト: XX件 (全てPASS)

#### 修正された問題
- {発見・修正された問題のリスト}

### 📚 ドキュメント更新
- [ ] README.md
- [ ] CONTRIBUTION.md
- [ ] {その他のドキュメント}

### 👀 レビューポイント
1. {重要な確認ポイント1}
2. {重要な確認ポイント2}
3. {重要な確認ポイント3}

### 📁 成果物
`.ai-workflow/issue-XXX/` ディレクトリに各フェーズの成果物が格納されています。

### ⚙️ 実行環境
- **モデル**: Claude Code Pro Max (Sonnet 4.5)
- **ContentParser**: OpenAI GPT-4o mini
- **ブランチ**: {branch_name}
```

## 実装TODO

- [ ] PR本文更新機能の実装
  - [ ] `GitHubClient.update_pull_request()` メソッドの追加
  - [ ] PR本文テンプレートの拡張（詳細版）
  - [ ] 各フェーズ成果物からの情報抽出ロジック

- [ ] Phase 7完了時の統合
  - [ ] Phase 7 (Documentation) 完了後にPR更新を実行
  - [ ] 全フェーズの成果物を収集
  - [ ] PR本文の生成と更新

- [ ] 情報抽出ロジック
  - [ ] Issue要件からサマリー抽出
  - [ ] Phase 4から実装詳細抽出
  - [ ] Phase 6からテスト結果抽出
  - [ ] Phase 7からドキュメント更新リスト抽出
  - [ ] Gitコミット履歴から変更ファイル一覧取得

- [ ] テンプレート管理
  - [ ] 詳細版PR本文テンプレートの作成
  - [ ] `scripts/ai-workflow/templates/pr_body_detailed_template.md`
  - [ ] プレースホルダー設計

- [ ] エラーハンドリング
  - [ ] PR更新失敗時の処理
  - [ ] 必須情報が不足している場合の処理
  - [ ] GitHub API制限への対応

- [ ] ドキュメント整備
  - [ ] PR更新機能の使用方法
  - [ ] カスタマイズ方法
  - [ ] トラブルシューティング

## 期待される効果

1. **レビュー効率向上**: PR本文だけで変更内容を把握可能
2. **品質向上**: テスト結果や実装詳細が明示され、レビューが容易に
3. **ドキュメント性**: PRそのものが完結したドキュメントとして機能
4. **トレーサビリティ**: Issue → 実装 → テスト → ドキュメント の流れが明確

## 技術的考慮事項

### GitHub API制限
- PR本文の更新は `repository.get_pull(number).edit(body=new_body)` を使用
- API rate limitに注意（認証済みで5000リクエスト/時間）

### 成果物の解析
- 各フェーズの成果物は `.ai-workflow/issue-XXX/phaseX/` に格納
- YAMLやMarkdownファイルから構造化データを抽出
- コミット履歴からファイル変更を取得

### テンプレート設計
- 初期作成時: `pr_body_template.md`（簡易版）
- 最終更新時: `pr_body_detailed_template.md`（詳細版）
- 両方のテンプレートを `scripts/ai-workflow/templates/` で管理

## 関連Issue

- Issue #355: テンプレート外部ファイル化（完了）
- Issue #362: Phase 8 Project Evaluation の追加（今後）

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **実装戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **テスト戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **既存コードへの影響範囲が分析されている**: PASS/FAIL - （コメント）
- [x/  ] **変更が必要なファイルがリストアップされている**: PASS/FAIL - （コメント）
- [x/  ] **設計が実装可能である**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、設計書のクリティカルシンキングレビューを実施してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
