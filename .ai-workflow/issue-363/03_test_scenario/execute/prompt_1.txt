# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-363/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-363/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-363/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**UNIT_INTEGRATION**

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #363
- **タイトル**: [AI-WORKFLOW] 全フェーズ完了後のPull Request内容の自動更新
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/363
- **ラベル**: なし

### 本文

## 概要

AI Workflowの全フェーズ（Phase 0-7）実行完了後、Pull Requestの本文を実際の成果物に基づいて適切に更新する機能を実装する。

現在はPhase 0で作成されたテンプレート本文のままになっているため、レビュアーが変更内容を把握しづらい状態となっている。

## 現状の問題

### Phase 0でのPR作成時
- テンプレートベースのPR本文を使用
- チェックリストは初期状態（Phase 0のみチェック済み）
- 変更内容の詳細は未記載

### 各フェーズ実行中
- ワークフロー進捗チェックリストは更新される
- しかし、実装内容のサマリーや詳細は更新されない

### Phase 7 (Report) 完了後
- 最終的な成果物が揃っているが、PR本文には反映されない
- レビュアーがIssueやコミット履歴を追わないと変更内容を把握できない

## 実装内容

### Phase 7完了時にPR本文を更新

以下の情報を含めた詳細なPR本文を生成し、既存PRを更新する：

#### 1. 変更サマリー
- Issue要件の概要
- 実装した機能・修正内容の要約
- 影響範囲（変更されたコンポーネント）

#### 2. 実装詳細
- Phase 4 (Implementation) の成果物から抽出
- 主要な変更ファイルとその説明
- アーキテクチャ上の変更点

#### 3. テスト結果
- Phase 6 (Testing) の結果サマリー
- テストカバレッジ
- 発見・修正された問題

#### 4. ドキュメント更新
- Phase 7 (Documentation) で更新されたドキュメント一覧
- README、CONTRIBUTION、その他関連ドキュメント

#### 5. レビューポイント
- レビュアーが特に確認すべき箇所
- 設計判断の理由
- トレードオフや制約事項

## PR本文の構成案

```markdown
## AI Workflow自動生成PR

### 📋 関連Issue
Closes #XXX

### 📝 変更サマリー
{Issueから抽出した要件概要}

{実装した機能・修正内容の要約}

### 🔄 ワークフロー進捗
- [x] Phase 0: Planning
- [x] Phase 1: Requirements
- [x] Phase 2: Design
- [x] Phase 3: Test Scenario
- [x] Phase 4: Implementation
- [x] Phase 5: Test Implementation
- [x] Phase 6: Testing
- [x] Phase 7: Documentation
- [x] Phase 8: Report

### 🔧 実装詳細

#### 変更ファイル
- `path/to/file.py`: {変更内容の説明}
- `path/to/another.py`: {変更内容の説明}

#### アーキテクチャ変更
{設計ドキュメントから抽出}

### ✅ テスト結果

#### テストカバレッジ
- 単体テスト: XX件 (全てPASS)
- 統合テスト: XX件 (全てPASS)

#### 修正された問題
- {発見・修正された問題のリスト}

### 📚 ドキュメント更新
- [ ] README.md
- [ ] CONTRIBUTION.md
- [ ] {その他のドキュメント}

### 👀 レビューポイント
1. {重要な確認ポイント1}
2. {重要な確認ポイント2}
3. {重要な確認ポイント3}

### 📁 成果物
`.ai-workflow/issue-XXX/` ディレクトリに各フェーズの成果物が格納されています。

### ⚙️ 実行環境
- **モデル**: Claude Code Pro Max (Sonnet 4.5)
- **ContentParser**: OpenAI GPT-4o mini
- **ブランチ**: {branch_name}
```

## 実装TODO

- [ ] PR本文更新機能の実装
  - [ ] `GitHubClient.update_pull_request()` メソッドの追加
  - [ ] PR本文テンプレートの拡張（詳細版）
  - [ ] 各フェーズ成果物からの情報抽出ロジック

- [ ] Phase 7完了時の統合
  - [ ] Phase 7 (Documentation) 完了後にPR更新を実行
  - [ ] 全フェーズの成果物を収集
  - [ ] PR本文の生成と更新

- [ ] 情報抽出ロジック
  - [ ] Issue要件からサマリー抽出
  - [ ] Phase 4から実装詳細抽出
  - [ ] Phase 6からテスト結果抽出
  - [ ] Phase 7からドキュメント更新リスト抽出
  - [ ] Gitコミット履歴から変更ファイル一覧取得

- [ ] テンプレート管理
  - [ ] 詳細版PR本文テンプレートの作成
  - [ ] `scripts/ai-workflow/templates/pr_body_detailed_template.md`
  - [ ] プレースホルダー設計

- [ ] エラーハンドリング
  - [ ] PR更新失敗時の処理
  - [ ] 必須情報が不足している場合の処理
  - [ ] GitHub API制限への対応

- [ ] ドキュメント整備
  - [ ] PR更新機能の使用方法
  - [ ] カスタマイズ方法
  - [ ] トラブルシューティング

## 期待される効果

1. **レビュー効率向上**: PR本文だけで変更内容を把握可能
2. **品質向上**: テスト結果や実装詳細が明示され、レビューが容易に
3. **ドキュメント性**: PRそのものが完結したドキュメントとして機能
4. **トレーサビリティ**: Issue → 実装 → テスト → ドキュメント の流れが明確

## 技術的考慮事項

### GitHub API制限
- PR本文の更新は `repository.get_pull(number).edit(body=new_body)` を使用
- API rate limitに注意（認証済みで5000リクエスト/時間）

### 成果物の解析
- 各フェーズの成果物は `.ai-workflow/issue-XXX/phaseX/` に格納
- YAMLやMarkdownファイルから構造化データを抽出
- コミット履歴からファイル変更を取得

### テンプレート設計
- 初期作成時: `pr_body_template.md`（簡易版）
- 最終更新時: `pr_body_detailed_template.md`（詳細版）
- 両方のテンプレートを `scripts/ai-workflow/templates/` で管理

## 関連Issue

- Issue #355: テンプレート外部ファイル化（完了）
- Issue #362: Phase 8 Project Evaluation の追加（今後）

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-363/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
