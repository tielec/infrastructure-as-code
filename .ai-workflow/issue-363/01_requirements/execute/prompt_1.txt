# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-363/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue情報

- **Issue番号**: #363
- **タイトル**: [AI-WORKFLOW] 全フェーズ完了後のPull Request内容の自動更新
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/363
- **ラベル**: なし

### 本文

## 概要

AI Workflowの全フェーズ（Phase 0-7）実行完了後、Pull Requestの本文を実際の成果物に基づいて適切に更新する機能を実装する。

現在はPhase 0で作成されたテンプレート本文のままになっているため、レビュアーが変更内容を把握しづらい状態となっている。

## 現状の問題

### Phase 0でのPR作成時
- テンプレートベースのPR本文を使用
- チェックリストは初期状態（Phase 0のみチェック済み）
- 変更内容の詳細は未記載

### 各フェーズ実行中
- ワークフロー進捗チェックリストは更新される
- しかし、実装内容のサマリーや詳細は更新されない

### Phase 7 (Report) 完了後
- 最終的な成果物が揃っているが、PR本文には反映されない
- レビュアーがIssueやコミット履歴を追わないと変更内容を把握できない

## 実装内容

### Phase 7完了時にPR本文を更新

以下の情報を含めた詳細なPR本文を生成し、既存PRを更新する：

#### 1. 変更サマリー
- Issue要件の概要
- 実装した機能・修正内容の要約
- 影響範囲（変更されたコンポーネント）

#### 2. 実装詳細
- Phase 4 (Implementation) の成果物から抽出
- 主要な変更ファイルとその説明
- アーキテクチャ上の変更点

#### 3. テスト結果
- Phase 6 (Testing) の結果サマリー
- テストカバレッジ
- 発見・修正された問題

#### 4. ドキュメント更新
- Phase 7 (Documentation) で更新されたドキュメント一覧
- README、CONTRIBUTION、その他関連ドキュメント

#### 5. レビューポイント
- レビュアーが特に確認すべき箇所
- 設計判断の理由
- トレードオフや制約事項

## PR本文の構成案

```markdown
## AI Workflow自動生成PR

### 📋 関連Issue
Closes #XXX

### 📝 変更サマリー
{Issueから抽出した要件概要}

{実装した機能・修正内容の要約}

### 🔄 ワークフロー進捗
- [x] Phase 0: Planning
- [x] Phase 1: Requirements
- [x] Phase 2: Design
- [x] Phase 3: Test Scenario
- [x] Phase 4: Implementation
- [x] Phase 5: Test Implementation
- [x] Phase 6: Testing
- [x] Phase 7: Documentation
- [x] Phase 8: Report

### 🔧 実装詳細

#### 変更ファイル
- `path/to/file.py`: {変更内容の説明}
- `path/to/another.py`: {変更内容の説明}

#### アーキテクチャ変更
{設計ドキュメントから抽出}

### ✅ テスト結果

#### テストカバレッジ
- 単体テスト: XX件 (全てPASS)
- 統合テスト: XX件 (全てPASS)

#### 修正された問題
- {発見・修正された問題のリスト}

### 📚 ドキュメント更新
- [ ] README.md
- [ ] CONTRIBUTION.md
- [ ] {その他のドキュメント}

### 👀 レビューポイント
1. {重要な確認ポイント1}
2. {重要な確認ポイント2}
3. {重要な確認ポイント3}

### 📁 成果物
`.ai-workflow/issue-XXX/` ディレクトリに各フェーズの成果物が格納されています。

### ⚙️ 実行環境
- **モデル**: Claude Code Pro Max (Sonnet 4.5)
- **ContentParser**: OpenAI GPT-4o mini
- **ブランチ**: {branch_name}
```

## 実装TODO

- [ ] PR本文更新機能の実装
  - [ ] `GitHubClient.update_pull_request()` メソッドの追加
  - [ ] PR本文テンプレートの拡張（詳細版）
  - [ ] 各フェーズ成果物からの情報抽出ロジック

- [ ] Phase 7完了時の統合
  - [ ] Phase 7 (Documentation) 完了後にPR更新を実行
  - [ ] 全フェーズの成果物を収集
  - [ ] PR本文の生成と更新

- [ ] 情報抽出ロジック
  - [ ] Issue要件からサマリー抽出
  - [ ] Phase 4から実装詳細抽出
  - [ ] Phase 6からテスト結果抽出
  - [ ] Phase 7からドキュメント更新リスト抽出
  - [ ] Gitコミット履歴から変更ファイル一覧取得

- [ ] テンプレート管理
  - [ ] 詳細版PR本文テンプレートの作成
  - [ ] `scripts/ai-workflow/templates/pr_body_detailed_template.md`
  - [ ] プレースホルダー設計

- [ ] エラーハンドリング
  - [ ] PR更新失敗時の処理
  - [ ] 必須情報が不足している場合の処理
  - [ ] GitHub API制限への対応

- [ ] ドキュメント整備
  - [ ] PR更新機能の使用方法
  - [ ] カスタマイズ方法
  - [ ] トラブルシューティング

## 期待される効果

1. **レビュー効率向上**: PR本文だけで変更内容を把握可能
2. **品質向上**: テスト結果や実装詳細が明示され、レビューが容易に
3. **ドキュメント性**: PRそのものが完結したドキュメントとして機能
4. **トレーサビリティ**: Issue → 実装 → テスト → ドキュメント の流れが明確

## 技術的考慮事項

### GitHub API制限
- PR本文の更新は `repository.get_pull(number).edit(body=new_body)` を使用
- API rate limitに注意（認証済みで5000リクエスト/時間）

### 成果物の解析
- 各フェーズの成果物は `.ai-workflow/issue-XXX/phaseX/` に格納
- YAMLやMarkdownファイルから構造化データを抽出
- コミット履歴からファイル変更を取得

### テンプレート設計
- 初期作成時: `pr_body_template.md`（簡易版）
- 最終更新時: `pr_body_detailed_template.md`（詳細版）
- 両方のテンプレートを `scripts/ai-workflow/templates/` で管理

## 関連Issue

- Issue #355: テンプレート外部ファイル化（完了）
- Issue #362: Phase 8 Project Evaluation の追加（今後）

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-363/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
