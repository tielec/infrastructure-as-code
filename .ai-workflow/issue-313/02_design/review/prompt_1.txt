# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-313/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-313/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #313
- **タイトル**: [FEATURE] Phase 0 (Planning): プロジェクトマネージャ役割の追加
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/313
- **ラベル**: enhancement

### 本文

## 概要
AI駆動開発自動化ワークフローに**Phase 0 (Planning): プロジェクトマネージャ**の役割を追加し、開発作業をより計画的かつ効率的に進められるようにする。

## 背景
現在のワークフローは以下の構成:
- **Execute (Phase 1-7)**: 開発者の役割 - 要件定義、設計、実装、テスト、ドキュメント、レポート
- **Review**: QAエンジニアの役割 - 各フェーズの品質チェック

これに**Planning (Phase 0)**を追加することで、プロジェクト全体を俯瞰した計画とタスク管理が可能になる。

## 役割定義

### Phase 0: Planning (プロジェクトマネージャ)
プロジェクトの計画、タスク分割、優先順位付け、リスク管理を担当

### Phase 1-7: Execute (開発者)
要件定義から実装、テスト、ドキュメント作成までの実行を担当

### Review: QA Engineer (QAエンジニア)
各フェーズの品質レビューを担当

## 機能要件

### 1. Issue分析と作業計画の策定
- [ ] Issueの複雑度分析（簡単/中程度/複雑）
- [ ] 実装タスクの洗い出しと適切な粒度への分割
- [ ] タスク間の依存関係の特定
- [ ] 各フェーズの見積もり（時間・コスト）
- [ ] リスク評価とリスク軽減策の提案

### 2. 実装戦略の事前決定
- [ ] Phase 2で行っていた実装戦略決定をPhase 0に移行
- [ ] CREATE/EXTEND/REFACTORの判断
- [ ] テスト戦略の決定（UNIT_ONLY / INTEGRATION_BDD等）
- [ ] 影響範囲の分析

### 3. 進捗管理とコミュニケーション
- [ ] 各フェーズの進捗トラッキング
- [ ] ブロッカーの早期発見とエスカレーション
- [ ] ステークホルダーへの定期報告
- [ ] マイルストーン管理

### 4. 品質保証の計画
- [ ] レビュー基準の設定
- [ ] テスト計画の策定
- [ ] リトライポリシーの管理
- [ ] 品質メトリクスの定義

## 成果物

### planning.md
```markdown
# プロジェクト計画書

## Issue分析
- 複雑度: [簡単/中程度/複雑]
- 見積もり工数: X時間
- リスク評価: [低/中/高]

## 実装戦略
- 戦略: [CREATE/EXTEND/REFACTOR]
- テスト戦略: [UNIT_ONLY/INTEGRATION_BDD/...]
- 影響範囲: ...

## タスク分割
1. Phase 1: 要件定義 (見積もり: Xh)
   - サブタスク1
   - サブタスク2
2. Phase 2: 設計 (見積もり: Xh)
   ...

## 依存関係
- Phase 2はPhase 1の完了が必要
- ...

## リスクと軽減策
- リスク1: ...
  - 軽減策: ...

## 品質ゲート
- Phase 1: ...
- Phase 2: ...
```

## 技術実装

### ディレクトリ構造
```
scripts/ai-workflow/
├── phases/
│   ├── planning.py          # 新規追加
│   ├── requirements.py
│   ├── design.py
│   ...
├── prompts/
│   ├── planning/            # 新規追加
│   │   ├── execute.txt
│   │   ├── review.txt
│   │   └── revise.txt
│   ...
```

### main.pyの変更
```python
# フェーズ番号を更新
PHASE_NUMBERS = {
    'planning': '00',          # 新規追加
    'requirements': '01',
    'design': '02',
    ...
}

# executeコマンドにplanningを追加
@cli.command()
@click.option('--phase', required=True,
              type=click.Choice(['planning', 'requirements', 'design', ...]))
```

### PlanningPhaseクラス
```python
class PlanningPhase(BasePhase):
    def execute(self) -> Dict[str, Any]:
        # Issue情報の取得と分析
        # プロジェクト計画書の生成
        # planning.mdの出力
        
    def review(self) -> Dict[str, Any]:
        # 計画書のレビュー
        # 実現可能性の確認
        # リスク分析の妥当性チェック
        
    def revise(self, review_feedback: str) -> Dict[str, Any]:
        # レビューフィードバックに基づく計画修正
```

## プロンプト設計

### execute.txt (Planning Phase)
```
あなたはプロジェクトマネージャとして、以下のIssueを分析し、
実装計画を策定してください。

## Issue情報
{issue_info}

## タスク
1. Issue内容を分析し、複雑度を評価
2. 実装に必要なタスクを洗い出し
3. タスク間の依存関係を特定
4. 各フェーズの見積もりを算出
5. リスクを評価し、軽減策を提案
6. 実装戦略とテスト戦略を決定
7. planning.mdに計画書を出力

## 出力形式
[planning.mdのテンプレート]
```

### review.txt (Planning Phase)
```
あなたはシニアプロジェクトマネージャとして、
以下の計画書をレビューしてください。

## 計画書
{planning_document_path}

## レビュー観点
- 実現可能性
- タスク分割の適切性
- 見積もりの妥当性
- リスク分析の網羅性
- 依存関係の正確性

## 判定基準
- PASS: 計画が適切で実行可能
- PASS_WITH_SUGGESTIONS: 改善余地はあるが実行可能
- FAIL: 重大な問題があり再計画が必要
```

## 実装順序

### Phase 1: 基本実装
- [ ] `phases/planning.py`の作成
- [ ] `prompts/planning/`ディレクトリとプロンプト作成
- [ ] `main.py`にplanningフェーズを追加
- [ ] `BasePhase`のPHASE_NUMBERSを更新

### Phase 2: プロンプトの最適化
- [ ] execute.txtのプロンプト改善
- [ ] review.txtのプロンプト改善
- [ ] revise.txtの作成

### Phase 3: 既存フェーズとの連携
- [ ] Phase 2 (design)から実装戦略決定ロジックを移行
- [ ] metadataにplanning情報を保存
- [ ] 各フェーズでplanning情報を参照

### Phase 4: テストとドキュメント
- [ ] E2Eテストの作成 (`tests/e2e/test_phase0.py`)
- [ ] READMEの更新
- [ ] CONTRIBUTION.mdの更新

## 期待される効果

1. **計画性の向上**
   - 事前にタスク全体を把握できる
   - 見積もり精度が向上

2. **リスク管理の強化**
   - 潜在的な問題を早期発見
   - リスク軽減策を事前に準備

3. **コミュニケーションの改善**
   - ステークホルダーに明確な計画を提示
   - 進捗状況を可視化

4. **効率化**
   - Phase 2の負荷軽減（実装戦略をPhase 0で決定）
   - 手戻りの削減

## 参考資料
- 既存Phase実装: `scripts/ai-workflow/phases/requirements.py`
- プロンプト例: `scripts/ai-workflow/prompts/implementation/execute.txt`
- ベースクラス: `scripts/ai-workflow/phases/base_phase.py`

## TODO
- [ ] Phase 1: 基本実装
- [ ] Phase 2: プロンプト最適化
- [ ] Phase 3: 既存フェーズとの連携
- [ ] Phase 4: テストとドキュメント


## Phase 8: Project Evaluation の追加提案

Phase 0 (Planning) に加えて、**Phase 8: Project Evaluation** を追加することを提案します。

### 背景

Phase 1-6完了後、プロジェクトマネージャが全体を評価し、次のアクションを決定する必要があります。一定の成果が出ていれば前進させつつ、残課題は新Issueとして管理することで、継続的な改善を実現します。

### ワークフロー

```
Phase 0: Planning (計画立案)
    ↓
Phase 1-6: Execute (開発実行)
    ↓
Phase 8: Evaluation (評価・判定) ← 新規追加
    ↓
    判断
    ↓
┌─────────────┬──────────────┬──────────────┬──────────┐
│             │              │              │          │
PASS        PASS_WITH      FAIL_PHASE_X    ABORT
│           _ISSUES         │              │          │
│             │              │              │          │
Phase 7     Phase 7 +      Phase Xから    プロジェクト
Report      新Issue作成     再実行          中止
```

### 判定の種類

#### 判定A: `PASS` (合格)
→ Phase 7 (Report) に進む

#### 判定B: `PASS_WITH_ISSUES` (課題あり合格)
→ Phase 7 + 残課題を新Issueとして作成

#### 判定C: `FAIL_PHASE_X` (特定フェーズ失敗)
→ Phase Xから再実行

#### 判定D: `ABORT` (中止)
→ プロジェクト中止

### 実装TODO

- [ ] Phase 2: Phase 8 (Evaluation) の基本実装
- [ ] Phase 3: 新Issue自動作成機能
- [ ] Phase 4: フェーズ再実行機能

詳細は以下のコメントを参照

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **実装戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **テスト戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **既存コードへの影響範囲が分析されている**: PASS/FAIL - （コメント）
- [x/  ] **変更が必要なファイルがリストアップされている**: PASS/FAIL - （コメント）
- [x/  ] **設計が実装可能である**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、設計書のクリティカルシンキングレビューを実施してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
