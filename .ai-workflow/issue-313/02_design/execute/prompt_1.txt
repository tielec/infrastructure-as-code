# 詳細設計フェーズ - 実行プロンプト

## タスク概要
要件定義書とGitHub Issueの内容から、詳細な設計書を作成してください。このフェーズでは、**実装戦略・テスト戦略・テストコード戦略の判断**も行います。

## 入力情報

### 要件定義書
@.ai-workflow/issue-313/01_requirements/output/requirements.md

### GitHub Issue情報
## Issue情報

- **Issue番号**: #313
- **タイトル**: [FEATURE] Phase 0 (Planning): プロジェクトマネージャ役割の追加
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/313
- **ラベル**: enhancement

### 本文

## 概要
AI駆動開発自動化ワークフローに**Phase 0 (Planning): プロジェクトマネージャ**の役割を追加し、開発作業をより計画的かつ効率的に進められるようにする。

## 背景
現在のワークフローは以下の構成:
- **Execute (Phase 1-7)**: 開発者の役割 - 要件定義、設計、実装、テスト、ドキュメント、レポート
- **Review**: QAエンジニアの役割 - 各フェーズの品質チェック

これに**Planning (Phase 0)**を追加することで、プロジェクト全体を俯瞰した計画とタスク管理が可能になる。

## 役割定義

### Phase 0: Planning (プロジェクトマネージャ)
プロジェクトの計画、タスク分割、優先順位付け、リスク管理を担当

### Phase 1-7: Execute (開発者)
要件定義から実装、テスト、ドキュメント作成までの実行を担当

### Review: QA Engineer (QAエンジニア)
各フェーズの品質レビューを担当

## 機能要件

### 1. Issue分析と作業計画の策定
- [ ] Issueの複雑度分析（簡単/中程度/複雑）
- [ ] 実装タスクの洗い出しと適切な粒度への分割
- [ ] タスク間の依存関係の特定
- [ ] 各フェーズの見積もり（時間・コスト）
- [ ] リスク評価とリスク軽減策の提案

### 2. 実装戦略の事前決定
- [ ] Phase 2で行っていた実装戦略決定をPhase 0に移行
- [ ] CREATE/EXTEND/REFACTORの判断
- [ ] テスト戦略の決定（UNIT_ONLY / INTEGRATION_BDD等）
- [ ] 影響範囲の分析

### 3. 進捗管理とコミュニケーション
- [ ] 各フェーズの進捗トラッキング
- [ ] ブロッカーの早期発見とエスカレーション
- [ ] ステークホルダーへの定期報告
- [ ] マイルストーン管理

### 4. 品質保証の計画
- [ ] レビュー基準の設定
- [ ] テスト計画の策定
- [ ] リトライポリシーの管理
- [ ] 品質メトリクスの定義

## 成果物

### planning.md
```markdown
# プロジェクト計画書

## Issue分析
- 複雑度: [簡単/中程度/複雑]
- 見積もり工数: X時間
- リスク評価: [低/中/高]

## 実装戦略
- 戦略: [CREATE/EXTEND/REFACTOR]
- テスト戦略: [UNIT_ONLY/INTEGRATION_BDD/...]
- 影響範囲: ...

## タスク分割
1. Phase 1: 要件定義 (見積もり: Xh)
   - サブタスク1
   - サブタスク2
2. Phase 2: 設計 (見積もり: Xh)
   ...

## 依存関係
- Phase 2はPhase 1の完了が必要
- ...

## リスクと軽減策
- リスク1: ...
  - 軽減策: ...

## 品質ゲート
- Phase 1: ...
- Phase 2: ...
```

## 技術実装

### ディレクトリ構造
```
scripts/ai-workflow/
├── phases/
│   ├── planning.py          # 新規追加
│   ├── requirements.py
│   ├── design.py
│   ...
├── prompts/
│   ├── planning/            # 新規追加
│   │   ├── execute.txt
│   │   ├── review.txt
│   │   └── revise.txt
│   ...
```

### main.pyの変更
```python
# フェーズ番号を更新
PHASE_NUMBERS = {
    'planning': '00',          # 新規追加
    'requirements': '01',
    'design': '02',
    ...
}

# executeコマンドにplanningを追加
@cli.command()
@click.option('--phase', required=True,
              type=click.Choice(['planning', 'requirements', 'design', ...]))
```

### PlanningPhaseクラス
```python
class PlanningPhase(BasePhase):
    def execute(self) -> Dict[str, Any]:
        # Issue情報の取得と分析
        # プロジェクト計画書の生成
        # planning.mdの出力
        
    def review(self) -> Dict[str, Any]:
        # 計画書のレビュー
        # 実現可能性の確認
        # リスク分析の妥当性チェック
        
    def revise(self, review_feedback: str) -> Dict[str, Any]:
        # レビューフィードバックに基づく計画修正
```

## プロンプト設計

### execute.txt (Planning Phase)
```
あなたはプロジェクトマネージャとして、以下のIssueを分析し、
実装計画を策定してください。

## Issue情報
{issue_info}

## タスク
1. Issue内容を分析し、複雑度を評価
2. 実装に必要なタスクを洗い出し
3. タスク間の依存関係を特定
4. 各フェーズの見積もりを算出
5. リスクを評価し、軽減策を提案
6. 実装戦略とテスト戦略を決定
7. planning.mdに計画書を出力

## 出力形式
[planning.mdのテンプレート]
```

### review.txt (Planning Phase)
```
あなたはシニアプロジェクトマネージャとして、
以下の計画書をレビューしてください。

## 計画書
{planning_document_path}

## レビュー観点
- 実現可能性
- タスク分割の適切性
- 見積もりの妥当性
- リスク分析の網羅性
- 依存関係の正確性

## 判定基準
- PASS: 計画が適切で実行可能
- PASS_WITH_SUGGESTIONS: 改善余地はあるが実行可能
- FAIL: 重大な問題があり再計画が必要
```

## 実装順序

### Phase 1: 基本実装
- [ ] `phases/planning.py`の作成
- [ ] `prompts/planning/`ディレクトリとプロンプト作成
- [ ] `main.py`にplanningフェーズを追加
- [ ] `BasePhase`のPHASE_NUMBERSを更新

### Phase 2: プロンプトの最適化
- [ ] execute.txtのプロンプト改善
- [ ] review.txtのプロンプト改善
- [ ] revise.txtの作成

### Phase 3: 既存フェーズとの連携
- [ ] Phase 2 (design)から実装戦略決定ロジックを移行
- [ ] metadataにplanning情報を保存
- [ ] 各フェーズでplanning情報を参照

### Phase 4: テストとドキュメント
- [ ] E2Eテストの作成 (`tests/e2e/test_phase0.py`)
- [ ] READMEの更新
- [ ] CONTRIBUTION.mdの更新

## 期待される効果

1. **計画性の向上**
   - 事前にタスク全体を把握できる
   - 見積もり精度が向上

2. **リスク管理の強化**
   - 潜在的な問題を早期発見
   - リスク軽減策を事前に準備

3. **コミュニケーションの改善**
   - ステークホルダーに明確な計画を提示
   - 進捗状況を可視化

4. **効率化**
   - Phase 2の負荷軽減（実装戦略をPhase 0で決定）
   - 手戻りの削減

## 参考資料
- 既存Phase実装: `scripts/ai-workflow/phases/requirements.py`
- プロンプト例: `scripts/ai-workflow/prompts/implementation/execute.txt`
- ベースクラス: `scripts/ai-workflow/phases/base_phase.py`

## TODO
- [ ] Phase 1: 基本実装
- [ ] Phase 2: プロンプト最適化
- [ ] Phase 3: 既存フェーズとの連携
- [ ] Phase 4: テストとドキュメント


## Phase 8: Project Evaluation の追加提案

Phase 0 (Planning) に加えて、**Phase 8: Project Evaluation** を追加することを提案します。

### 背景

Phase 1-6完了後、プロジェクトマネージャが全体を評価し、次のアクションを決定する必要があります。一定の成果が出ていれば前進させつつ、残課題は新Issueとして管理することで、継続的な改善を実現します。

### ワークフロー

```
Phase 0: Planning (計画立案)
    ↓
Phase 1-6: Execute (開発実行)
    ↓
Phase 8: Evaluation (評価・判定) ← 新規追加
    ↓
    判断
    ↓
┌─────────────┬──────────────┬──────────────┬──────────┐
│             │              │              │          │
PASS        PASS_WITH      FAIL_PHASE_X    ABORT
│           _ISSUES         │              │          │
│             │              │              │          │
Phase 7     Phase 7 +      Phase Xから    プロジェクト
Report      新Issue作成     再実行          中止
```

### 判定の種類

#### 判定A: `PASS` (合格)
→ Phase 7 (Report) に進む

#### 判定B: `PASS_WITH_ISSUES` (課題あり合格)
→ Phase 7 + 残課題を新Issueとして作成

#### 判定C: `FAIL_PHASE_X` (特定フェーズ失敗)
→ Phase Xから再実行

#### 判定D: `ABORT` (中止)
→ プロジェクト中止

### 実装TODO

- [ ] Phase 2: Phase 8 (Evaluation) の基本実装
- [ ] Phase 3: 新Issue自動作成機能
- [ ] Phase 4: フェーズ再実行機能

詳細は以下のコメントを参照

### 既存コードベースの理解

このリポジトリのプロジェクト構造、アーキテクチャ、コーディング規約を理解するため、以下のドキュメントを参照してください：

- プロジェクト全体のガイドライン: @CLAUDE.md（存在する場合）
- アーキテクチャ設計: @ARCHITECTURE.md（存在する場合）
- プロジェクトREADME: @README.md
- その他、関連するREADME、CONTRIBUTION.md等のドキュメント

上記ドキュメントから以下を把握してください：
- プロジェクトの目的とアーキテクチャ
- ディレクトリ構造とコンポーネント構成
- 既存のコーディング規約やパターン
- 開発ワークフロー

## 設計書作成手順

### 1. 既存コードベース分析

要件定義書とIssue内容から、以下を分析してください：

1. **影響範囲の特定**
   - どのコンポーネント（Ansible/Pulumi/Jenkins/Scripts）が影響を受けるか
   - 既存ファイルの修正が必要か、新規ファイルの作成が必要か
   - 依存関係のあるコンポーネントは何か

2. **既存パターンの調査**
   - 類似の機能実装がないか調査
   - 既存のコーディング規約やパターンを確認
   - 再利用可能なコンポーネントの特定

### 2. 実装戦略の判断（必須）

以下の3つから選択し、**判断根拠を明記**してください：

- **CREATE（新規作成）**: 既存コードとの依存関係がなく、完全に新しい機能
- **EXTEND（拡張）**: 既存コードを拡張・修正する必要がある
- **REFACTOR（リファクタリング）**: 既存コードの構造改善が主目的

**判断基準**：
- 既存ファイルへの影響範囲
- 新規ファイルの作成数
- 既存機能との統合度

**出力形式**：
```markdown
### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- （理由1）
- （理由2）
```

### 3. テスト戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **UNIT_ONLY**: Unitテストのみ
- **INTEGRATION_ONLY**: Integrationテストのみ
- **BDD_ONLY**: BDDテストのみ
- **UNIT_INTEGRATION**: Unit + Integration
- **UNIT_BDD**: Unit + BDD
- **INTEGRATION_BDD**: Integration + BDD
- **ALL**: すべて

**判断基準**：
- 機能の複雑度
- ユーザーストーリーの有無
- 既存テストとの整合性

**出力形式**：
```markdown
### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- （理由1）
- （理由2）
```

### 4. テストコード戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **EXTEND_TEST（既存テストの拡張）**: 既存テストファイルに追加
- **CREATE_TEST（新規テスト作成）**: 新しいテストファイルを作成
- **BOTH_TEST（両方）**: 既存テストの拡張と新規テストの作成

**判断基準**：
- 既存テストファイルの有無
- 既存テストとの関連性

**出力形式**：
```markdown
### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- （理由1）
- （理由2）
```

### 5. 設計書の構成

以下のセクションを含む設計書を作成してください：

#### 必須セクション：

1. **アーキテクチャ設計**
   - システム全体図
   - コンポーネント間の関係
   - データフロー

2. **実装戦略判断**（セクション2で記載）

3. **テスト戦略判断**（セクション3で記載）

4. **テストコード戦略判断**（セクション4で記載）

5. **影響範囲分析**
   - 既存コードへの影響
   - 依存関係の変更
   - マイグレーション要否

6. **変更・追加ファイルリスト**
   - 新規作成ファイル（相対パス）
   - 修正が必要な既存ファイル（相対パス）
   - 削除が必要なファイル（相対パス）

7. **詳細設計**
   - クラス設計（必要な場合）
   - 関数設計（主要な関数のみ）
   - データ構造設計
   - インターフェース設計

8. **セキュリティ考慮事項**
   - 認証・認可
   - データ保護
   - セキュリティリスクと対策

9. **非機能要件への対応**
   - パフォーマンス
   - スケーラビリティ
   - 保守性

10. **実装の順序**
    - 実装順序の推奨
    - 依存関係の考慮

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **既存プロジェクト構造を尊重**: 既存のディレクトリ構造やコーディング規約に従ってください
2. **トレーサビリティ**: 要件定義書の各要件に対応する設計を明示してください
3. **実装可能性**: 実装できない設計や曖昧な設計は避けてください
4. **判断の明示**: 3つの戦略判断（実装・テスト・テストコード）は必ず明記してください
5. **レビューされることを意識**: 設計書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（5つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 判断根拠は具体的かつ論理的に記載すること

## 出力形式

設計書は `.ai-workflow/issue-313/02_design/output/design.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。図表が必要な場合はMarkdownのコードブロックやテーブルを活用してください。

## 実装開始

上記を踏まえ、詳細設計書を作成してください。
