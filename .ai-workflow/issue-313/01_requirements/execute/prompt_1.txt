# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## Issue情報

## Issue情報

- **Issue番号**: #313
- **タイトル**: [FEATURE] Phase 0 (Planning): プロジェクトマネージャ役割の追加
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/313
- **ラベル**: enhancement

### 本文

## 概要
AI駆動開発自動化ワークフローに**Phase 0 (Planning): プロジェクトマネージャ**の役割を追加し、開発作業をより計画的かつ効率的に進められるようにする。

## 背景
現在のワークフローは以下の構成:
- **Execute (Phase 1-7)**: 開発者の役割 - 要件定義、設計、実装、テスト、ドキュメント、レポート
- **Review**: QAエンジニアの役割 - 各フェーズの品質チェック

これに**Planning (Phase 0)**を追加することで、プロジェクト全体を俯瞰した計画とタスク管理が可能になる。

## 役割定義

### Phase 0: Planning (プロジェクトマネージャ)
プロジェクトの計画、タスク分割、優先順位付け、リスク管理を担当

### Phase 1-7: Execute (開発者)
要件定義から実装、テスト、ドキュメント作成までの実行を担当

### Review: QA Engineer (QAエンジニア)
各フェーズの品質レビューを担当

## 機能要件

### 1. Issue分析と作業計画の策定
- [ ] Issueの複雑度分析（簡単/中程度/複雑）
- [ ] 実装タスクの洗い出しと適切な粒度への分割
- [ ] タスク間の依存関係の特定
- [ ] 各フェーズの見積もり（時間・コスト）
- [ ] リスク評価とリスク軽減策の提案

### 2. 実装戦略の事前決定
- [ ] Phase 2で行っていた実装戦略決定をPhase 0に移行
- [ ] CREATE/EXTEND/REFACTORの判断
- [ ] テスト戦略の決定（UNIT_ONLY / INTEGRATION_BDD等）
- [ ] 影響範囲の分析

### 3. 進捗管理とコミュニケーション
- [ ] 各フェーズの進捗トラッキング
- [ ] ブロッカーの早期発見とエスカレーション
- [ ] ステークホルダーへの定期報告
- [ ] マイルストーン管理

### 4. 品質保証の計画
- [ ] レビュー基準の設定
- [ ] テスト計画の策定
- [ ] リトライポリシーの管理
- [ ] 品質メトリクスの定義

## 成果物

### planning.md
```markdown
# プロジェクト計画書

## Issue分析
- 複雑度: [簡単/中程度/複雑]
- 見積もり工数: X時間
- リスク評価: [低/中/高]

## 実装戦略
- 戦略: [CREATE/EXTEND/REFACTOR]
- テスト戦略: [UNIT_ONLY/INTEGRATION_BDD/...]
- 影響範囲: ...

## タスク分割
1. Phase 1: 要件定義 (見積もり: Xh)
   - サブタスク1
   - サブタスク2
2. Phase 2: 設計 (見積もり: Xh)
   ...

## 依存関係
- Phase 2はPhase 1の完了が必要
- ...

## リスクと軽減策
- リスク1: ...
  - 軽減策: ...

## 品質ゲート
- Phase 1: ...
- Phase 2: ...
```

## 技術実装

### ディレクトリ構造
```
scripts/ai-workflow/
├── phases/
│   ├── planning.py          # 新規追加
│   ├── requirements.py
│   ├── design.py
│   ...
├── prompts/
│   ├── planning/            # 新規追加
│   │   ├── execute.txt
│   │   ├── review.txt
│   │   └── revise.txt
│   ...
```

### main.pyの変更
```python
# フェーズ番号を更新
PHASE_NUMBERS = {
    'planning': '00',          # 新規追加
    'requirements': '01',
    'design': '02',
    ...
}

# executeコマンドにplanningを追加
@cli.command()
@click.option('--phase', required=True,
              type=click.Choice(['planning', 'requirements', 'design', ...]))
```

### PlanningPhaseクラス
```python
class PlanningPhase(BasePhase):
    def execute(self) -> Dict[str, Any]:
        # Issue情報の取得と分析
        # プロジェクト計画書の生成
        # planning.mdの出力
        
    def review(self) -> Dict[str, Any]:
        # 計画書のレビュー
        # 実現可能性の確認
        # リスク分析の妥当性チェック
        
    def revise(self, review_feedback: str) -> Dict[str, Any]:
        # レビューフィードバックに基づく計画修正
```

## プロンプト設計

### execute.txt (Planning Phase)
```
あなたはプロジェクトマネージャとして、以下のIssueを分析し、
実装計画を策定してください。

## Issue情報
{issue_info}

## タスク
1. Issue内容を分析し、複雑度を評価
2. 実装に必要なタスクを洗い出し
3. タスク間の依存関係を特定
4. 各フェーズの見積もりを算出
5. リスクを評価し、軽減策を提案
6. 実装戦略とテスト戦略を決定
7. planning.mdに計画書を出力

## 出力形式
[planning.mdのテンプレート]
```

### review.txt (Planning Phase)
```
あなたはシニアプロジェクトマネージャとして、
以下の計画書をレビューしてください。

## 計画書
{planning_document_path}

## レビュー観点
- 実現可能性
- タスク分割の適切性
- 見積もりの妥当性
- リスク分析の網羅性
- 依存関係の正確性

## 判定基準
- PASS: 計画が適切で実行可能
- PASS_WITH_SUGGESTIONS: 改善余地はあるが実行可能
- FAIL: 重大な問題があり再計画が必要
```

## 実装順序

### Phase 1: 基本実装
- [ ] `phases/planning.py`の作成
- [ ] `prompts/planning/`ディレクトリとプロンプト作成
- [ ] `main.py`にplanningフェーズを追加
- [ ] `BasePhase`のPHASE_NUMBERSを更新

### Phase 2: プロンプトの最適化
- [ ] execute.txtのプロンプト改善
- [ ] review.txtのプロンプト改善
- [ ] revise.txtの作成

### Phase 3: 既存フェーズとの連携
- [ ] Phase 2 (design)から実装戦略決定ロジックを移行
- [ ] metadataにplanning情報を保存
- [ ] 各フェーズでplanning情報を参照

### Phase 4: テストとドキュメント
- [ ] E2Eテストの作成 (`tests/e2e/test_phase0.py`)
- [ ] READMEの更新
- [ ] CONTRIBUTION.mdの更新

## 期待される効果

1. **計画性の向上**
   - 事前にタスク全体を把握できる
   - 見積もり精度が向上

2. **リスク管理の強化**
   - 潜在的な問題を早期発見
   - リスク軽減策を事前に準備

3. **コミュニケーションの改善**
   - ステークホルダーに明確な計画を提示
   - 進捗状況を可視化

4. **効率化**
   - Phase 2の負荷軽減（実装戦略をPhase 0で決定）
   - 手戻りの削減

## 参考資料
- 既存Phase実装: `scripts/ai-workflow/phases/requirements.py`
- プロンプト例: `scripts/ai-workflow/prompts/implementation/execute.txt`
- ベースクラス: `scripts/ai-workflow/phases/base_phase.py`

## TODO
- [ ] Phase 1: 基本実装
- [ ] Phase 2: プロンプト最適化
- [ ] Phase 3: 既存フェーズとの連携
- [ ] Phase 4: テストとドキュメント


## Phase 8: Project Evaluation の追加提案

Phase 0 (Planning) に加えて、**Phase 8: Project Evaluation** を追加することを提案します。

### 背景

Phase 1-6完了後、プロジェクトマネージャが全体を評価し、次のアクションを決定する必要があります。一定の成果が出ていれば前進させつつ、残課題は新Issueとして管理することで、継続的な改善を実現します。

### ワークフロー

```
Phase 0: Planning (計画立案)
    ↓
Phase 1-6: Execute (開発実行)
    ↓
Phase 8: Evaluation (評価・判定) ← 新規追加
    ↓
    判断
    ↓
┌─────────────┬──────────────┬──────────────┬──────────┐
│             │              │              │          │
PASS        PASS_WITH      FAIL_PHASE_X    ABORT
│           _ISSUES         │              │          │
│             │              │              │          │
Phase 7     Phase 7 +      Phase Xから    プロジェクト
Report      新Issue作成     再実行          中止
```

### 判定の種類

#### 判定A: `PASS` (合格)
→ Phase 7 (Report) に進む

#### 判定B: `PASS_WITH_ISSUES` (課題あり合格)
→ Phase 7 + 残課題を新Issueとして作成

#### 判定C: `FAIL_PHASE_X` (特定フェーズ失敗)
→ Phase Xから再実行

#### 判定D: `ABORT` (中止)
→ プロジェクト中止

### 実装TODO

- [ ] Phase 2: Phase 8 (Evaluation) の基本実装
- [ ] Phase 3: 新Issue自動作成機能
- [ ] Phase 4: フェーズ再実行機能

詳細は以下のコメントを参照

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-313/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
