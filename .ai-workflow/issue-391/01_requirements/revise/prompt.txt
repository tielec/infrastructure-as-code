# 要件定義フェーズ - 修正プロンプト

## タスク概要

レビューで指摘された問題を修正し、改善された要件定義書を作成してください。

**重要**: 前回のレビュー結果を踏まえ、ブロッカー（BLOCKER）を必ず解消してください。

## 元の成果物

以下の要件定義書をレビューした結果、修正が必要と判定されました。

@.ai-workflow/issue-391/01_requirements/output/requirements.md

## レビュー結果

# 要件定義レビュー

## 品質ゲート評価

- [ ] 機能要件が明確に記載されている: PASS - 機能要件テーブルでPulumi/Jenkins/通知計画の具体的な変更点が整理されている（.ai-workflow/issue-391/01_requirements/output/requirements.md:13）。
- [ ] 受け入れ基準が定義されている: PASS - 各FRにGiven/When/Then形式の検証条件が提示されている（requirements.md:37）。
- [ ] スコープが明確である: FAIL - Phase 1完了条件だった「リージョン一覧と通知方針の承認」（requirements.md:7）に対し、実際の対象リージョンや承認済み通知チャネルが本文に明記されておらず、例示に留まっている（requirements.md:33-35）。
- [ ] 論理的な矛盾がない: PASS - 機能/非機能/制約の間で矛盾は見当たらない。

## 詳細レビュー

### 1. 具体性（Specificity）
- 主要な機能変更は具体的で、Pulumiの命名ルールやJenkinsの逐次実行条件など定義されている（requirements.md:15-19, 47-53）。
- ただし対象リージョンと通知チャネルが「例」に留まり、本番で何を扱うかが不明瞭（requirements.md:33-35）。

### 2. 完全性（Completeness）
- Planningで挙げた主要リスクやタスクは反映されているが、Phase 1で確定すべきリージョン一覧と通知計画の承認情報が本文に欠落している（requirements.md:7, 33-35）。
- 非機能要件は性能/可用性/保守性/セキュリティが網羅されている。

### 3. 検証可能性（Verifiability）
- FRごとに受け入れ基準が定義されておりテストに落とし込みやすい（requirements.md:38-57）。
- FR-3の受け入れ基準が「リージョンリストが3件ある」前提で固定されており、リージョン数が変更された場合の検証方法が曖昧（requirements.md:47-49）。柔軟な記述にすると更に良い。

### 4. 整合性（Consistency）
- 設計方針やテスト戦略はPlanningドキュメントと整合している（requirements.md:3-6）。
- リージョン一覧未記載のため、Planningで要求された承認済み成果物との整合が取れていない点が課題。

### 5. 実現可能性（Feasibility）
- 既存スタック拡張という実装戦略に沿い、技術/リソース制約も現実的に整理されている（requirements.md:27-35）。
- 追加リソース不要の記述も妥当。

### 6. 優先度（Priority）
- 機能要件に優先度が付されており、MVP像が把握しやすい（requirements.md:15-19）。
- フェーズ分割や段階リリースはPlanningに委ねており、この文書内での補足は不要だが、リージョン決定の優先度を示すと更に明確化できる。

### 7. セキュリティ（Security）
- S3暗号化・ブロックパブリックアクセス・SSM SecureString維持など具体的措置が定義されている（requirements.md:23）。
- IAM最小権限ポリシー遵守が制約に明記されている点も良い（requirements.md:30）。

### 8. パフォーマンス（Performance）
- Jenkins全体タイムアウト60分・ステージ10分など定量的な指標が示され、検証しやすい（requirements.md:22）。
- 追加の測定方法（ログ収集など）については非機能要件で網羅されている。

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

- Phase 1成果物として求められた「対象リージョン一覧」と「通知チャネル/タイミングの承認済み内容」が要件定義書に記載されておらず、設計・テスト範囲を確定できない（requirements.md:7, requirements.md:33-35）。

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

- FR-3の受け入れ基準をリージョン数に依存しない形（例：定義された全リージョン配列に対して逐次実行されること）に書き換えると将来のリージョン増減にも対応しやすい（requirements.md:47-49）。
- 通知計画（FR-5）で具体的なチャネル・担当者・承認者を明記すると、運用チーム合意の検証が容易になる（requirements.md:55-57）。

## 総合評価

文書全体は機能/非機能/制約/受け入れ基準がよく整理されており、技術的方向性もPlanningと整合しています。一方でPhase 1の必須成果物である対象リージョン一覧と通知計画の承認内容が記載されていないため、スコープが確定できず設計フェーズへ進めません。これらを明文化し、受け入れ基準を将来の拡張にも耐える表現へ修正してください。

---
**判定: FAIL**

## 修正指示

### ブロッカー（BLOCKER）の解消

レビュー結果の「ブロッカー」セクションに記載された問題は、**次フェーズに進めない重大な問題**です。これらを必ず解消してください。

### 改善提案（SUGGESTION）の検討

レビュー結果の「改善提案」セクションに記載された項目は、可能な範囲で反映してください。ただし、これらは次フェーズに進むための必須要件ではありません。

## Issue情報（参考）

元のIssue情報を再度確認してください：

## Issue概要

- **Issue番号**: #391
- **タイトル**: SSMバックアップのマルチリージョン対応
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/391
- **ラベル**: なし

### 本文

## 概要
SSM パラメータバックアップの仕組みをマルチリージョン対応させる。

## 対応内容
- [ ] `pulumi/jenkins-ssm-backup-s3/index.ts` で、リージョンごとに S3 バケットを作成／管理できるようにする
- [ ] `jenkins/jobs/dsl/admin/admin_ssm_backup_job.groovy` のパラメータ構成は現状のままとし、リージョン選択を追加しない
- [ ] `jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile` をステージ分割し、複数リージョンのバックアップを順次取得できるようにする

### Phase 0: 計画
- [ ] 作業範囲・影響範囲・完了条件が整理されている
- [ ] 既存ジョブへの影響とロールバック方針が明示されている

### Phase 1: 要件定義
- [ ] 対応リージョン一覧と増減方針が定義されている
- [ ] 既存 CLI / ジョブ利用者への通知方針が決まっている

### Phase 2: 設計
- [ ] Pulumi リソース命名規則・タグ方針が整理されている
- [ ] Jenkins ステージ構成と並列／直列実行の判断理由が明記されている

### Phase 3: テストシナリオ
- [ ] 新旧リージョン構成でのバックアップ・リストアパスが想定されている
- [ ] ログ検証方法とアラート確認手順が記載されている

### Phase 4: 実装
- [ ] Pulumi 側でリージョンごとにバケットと SSM パラメータを作成
- [ ] Jenkins DSL / パイプライン修正で multi-stage バックアップを実現

### Phase 5: テスト
- [ ] 全自動テスト（Pulumiユニット、パイプラインdry-run）が成功している
- [ ] us-west-2 を含む複数リージョンのバックアップログが検証されている

### Phase 6: ドキュメント
- [ ] Runbook/READMEにリージョン追加手順とロールバック手順が追記されている
- [ ] 新設定パラメータと Pulumi config 手順がドキュメントに記載されている

### Phase 7: レポート
- [ ] Issue コメントまたはレポートで実装内容・テスト結果・残課題が共有済み
- [ ] 運用チームとリリース判定が合意されている

## 品質ゲート（Phase 1）

修正後の要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

## 修正方針

1. **ブロッカーを最優先で解消**: レビューで指摘されたブロッカーを必ず修正
2. **品質ゲートの確認**: 4つの必須要件を満たすことを確認
3. **改善提案の反映**: 可能な範囲で改善提案を反映（完璧を求めない）
4. **元の内容を尊重**: 問題のない部分は変更しない

## 注意事項

1. **レビュー指摘に焦点を当てる**: レビューで指摘されていない部分を大幅に変更しない
2. **ブロッカーと改善提案を区別**: ブロッカーは必須、改善提案は推奨
3. **具体性を維持**: 修正によって曖昧さが増えないように注意
4. **整合性の確保**: 修正箇所が他のセクションと矛盾しないか確認

## 出力形式

修正した要件定義書を以下のファイルに保存してください：

```
.ai-workflow/issue-391/01_requirements/output/requirements.md
```

元のファイルを上書きする形で修正してください。

## 参考情報

必要に応じて以下を参照してください：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- 関連する@CONTRIBUTION.md - 開発ガイドライン
