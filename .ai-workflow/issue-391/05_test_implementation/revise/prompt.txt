# テストコード実装フェーズ - 修正プロンプト

## タスク概要
レビューで指摘された問題を修正し、改善されたテストコードを実装してください。

## レビュー結果
## 品質ゲート評価
- [ ] **Phase 3のテストシナリオがすべて実装されている**: FAIL - DSL UI互換性シナリオが未着手（`.ai-workflow/issue-391/03_test_scenario/output/test-scenario.md:104`）
- [x] **テストコードが実行可能である**: PASS - 依存コマンド（`jq`等）の前提確認とスキップ制御が実装済み
- [x] **テストの意図がコメントで明確**: PASS - 主要テストの直前に目的を示すコメントが付されている

## 詳細レビュー

### 1. テストシナリオとの整合性
**良好な点**:
- Pulumiユニットテストで設定検証・多リージョンリソース生成・SSMエクスポートをシナリオ通りに網羅（`pulumi/jenkins-ssm-backup-s3/__tests__/index.test.ts:185-292`）
- パイプライン統合テストで成功/途中失敗シナリオを分離し、成果物内容と停止判定を確認（`jenkins/jobs/pipeline/admin/ssm-backup/tests/test_pipeline_runner.py:39-60`）

**懸念点**:
- Jenkins DSL UI互換性シナリオのテストが存在せず、Phase 3要件を満たしていない（`.ai-workflow/issue-391/03_test_scenario/output/test-scenario.md:104` 参照）

### 2. テストカバレッジ
**良好な点**:
- `bucketMap`やメタデータ出力などPulumiエクスポートの最終値まで検証しており、後段処理の前提を担保（`pulumi/jenkins-ssm-backup-s3/__tests__/index.test.ts:278-292`）
- パイプライン失敗ケースでログ断片まで検証し、AWSモックのエラー伝搬を確認（`jenkins/jobs/pipeline/admin/ssm-backup/tests/test_pipeline_runner.py:52-60`）

**改善の余地**:
- `ssmHomeRegion`プロバイダー経由でメタデータを書き込むことを明示的にアサートすると、地域誤設定の退行を防げる（同ファイル:259-275）

### 3. テストの独立性
**良好な点**:
- Pulumiテストは`registerMocks`で毎回リソース記録をリセットしており、ケース間の依存がない
- Python統合テストは`tempfile.TemporaryDirectory`でワークスペースを隔離（`jenkins/jobs/pipeline/admin/ssm-backup/tests/test_pipeline_runner.py:16-37`、`test_collect_parameters.py:22-57`）

**懸念点**:
- 特になし

### 4. テストの可読性
**良好な点**:
- テストケース名と直前コメントにGiven-When-Then相当の意図が記載されており読みやすい
- Python側も説明コメントが和文で揃っていて目的が掴みやすい（`jenkins/jobs/pipeline/admin/ssm-backup/tests/test_collect_parameters.py:17`）

**改善の余地**:
- 特になし

### 5. モック・スタブの使用
**良好な点**:
- Pulumiの`setMocks`でAWSリソースを詳細にスタブし、期待形状をテスト内から直接検証（`pulumi/jenkins-ssm-backup-s3/__tests__/index.test.ts:58-166`）
- AWS CLIモックをPython製スクリプトにまとめ、シナリオ毎のレスポンスを制御（`jenkins/jobs/pipeline/admin/ssm-backup/tests/bin/aws:1-83`）

**懸念点**:
- 特になし

### 6. テストコードの品質
**良好な点**:
- 例外・成果物・ログのアサーションが明確で失敗時の診断もしやすい
- 依存コマンド未導入時はスキップするなど、実行環境の差異を吸収する配慮あり（`jenkins/jobs/pipeline/admin/ssm-backup/tests/test_collect_parameters.py:19-21`）

**懸念点**:
- 特になし

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**
1. **DSL UI互換性シナリオ未実装**
   - 問題: Phase 3で定義された`JenkinsDSL_UI互換性確認`シナリオのテストが追加されていない（`.ai-workflow/issue-391/03_test_scenario/output/test-scenario.md:104`／テスト実装ログ:`.ai-workflow/issue-391/05_test_implementation/output/test-implementation.md:11-30`）
   - 影響: Jenkins Job DSL変更の互換性を担保できず、次フェーズでのテスト実行前提を満たさない
   - 対策: `jenkins/jobs/pipeline/admin/ssm-backup/tests`配下などにDSL生成物差分を検証するテストを追加し、既存シナリオ手順（`jobdsl`実行→XML比較）を自動化する

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**
1. **SSMメタデータのホームリージョン検証を追加**
   - 現状: `publishes region metadata...`テストが値のみ確認しており、`ssmHomeRegion`プロバイダー経由で作成されているか判定していない（`pulumi/jenkins-ssm-backup-s3/__tests__/index.test.ts:259-275`）
   - 提案: `recordedResources`の該当パラメータについて`inputs.provider`やリージョンタグをチェックし、ホームリージョン逸脱を検出する
   - 効果: メタデータが誤リージョンに書き込まれる回 regressions を防止

2. **S3バケットポリシーのセキュリティ要件をアサート**
   - 現状: バケットポリシー生成はモックに記録されるが、テストで内容を確認していない（`pulumi/jenkins-ssm-backup-s3/__tests__/index.test.ts:199-227`）
   - 提案: `aws:s3/bucketPolicy:BucketPolicy`リソースを抽出し、`DenyInsecureConnections`等のStatementをJSON比較で検証する
   - 効果: セキュリティポリシーの退行検知力を向上

## 総合評価
**主な強み**:
- Pulumi周辺のユニットテストが多リージョン機能を細かく検証し、出力値を通じてパイプライン前提を担保
- Jenkinsパイプラインの成功/失敗フローを軽量ハーネスで再現し、成果物・ログ検証までカバー
- テストごとのコメント整備とモック活用で読みやすく保守しやすい構成

**主な改善提案**:
- 定義済みDSL互換性シナリオを必ず追加してPhase 3要件を充足
- Pulumiテストでホームリージョンやバケットポリシーなど重要属性のアサーションを強化

DSLシナリオ未着手が残っているため、このままではPhase 6に進めません。上記ブロッカーの解消をお願いします。

---
**判定: FAIL**

## 参考情報

### テスト実装ログ
@.ai-workflow/issue-391/05_test_implementation/output/test-implementation.md

### テストシナリオ
@.ai-workflow/issue-391/03_test_scenario/output/test-scenario.md

### 実装ログ
@.ai-workflow/issue-391/04_implementation/output/implementation.md

### テスト戦略（Phase 2で決定）
**UNIT_INTEGRATION**

## 修正指示

### ブロッカー（BLOCKER）の解消

レビュー結果の「ブロッカー」セクションに記載された問題は、**次フェーズに進めない重大な問題**です。これらを必ず解消してください。

**ブロッカーの典型例**:
- テストシナリオの主要ケースが未実装 → テストケースを追加
- テストコードが実行不可能 → シンタックスエラーを修正
- テストの独立性が保たれていない → テスト間の依存を排除
- 実コードが混入している → 実コード変更を削除（Phase 5では実コード変更禁止）

### 改善提案（SUGGESTION）の検討

レビュー結果の「改善提案」セクションに記載された項目は、可能な範囲で反映してください。

**改善提案の優先度**:
1. テストカバレッジ拡大 → 優先的に反映
2. エッジケースの追加 → 可能であれば反映
3. コメント・ドキュメント追加 → 時間があれば反映

## 品質ゲート（Phase 5）

修正後のテストコード実装は、以下の品質ゲートをすべて満たす必要があります：

- [ ] **Phase 3のテストシナリオがすべて実装されている**
- [ ] **テストコードが実行可能である**
- [ ] **テストの意図がコメントで明確**

## 修正方針

### 1. ブロッカー対応（最優先）

レビューで指摘されたブロッカーを1つずつ解消してください。

**対応方法**:
- 実装されたテストコードを読み込む
- ブロッカー指摘箇所を特定
- 指摘内容を理解し、適切に修正
- 修正後、ブロッカーが解消されたか確認

### 2. 改善提案の反映（推奨）

可能な範囲で、レビューの改善提案を反映してください。

**対応方法**:
- 改善提案を読み込む
- 実装可能かつ効果的な提案を選択
- テストコードを修正・追加
- 全体の整合性を確認

### 3. 既存テストの尊重

レビューで問題がなかった部分は、基本的に変更しないでください。

**注意点**:
- ブロッカー解消に必要な修正のみ実施
- 不必要な変更は避ける
- 動作しているテストは維持する

## 修正後の確認事項

修正完了後、以下を確認してください：

1. **ブロッカーが解消されたか**
   - レビューで指摘されたすべてのブロッカーに対応したか
   - 対応内容が適切か

2. **品質ゲートを満たしているか**
   - 3つの品質ゲートすべてをクリアしているか

3. **テストが実行可能か**
   - テストコードにシンタックスエラーがないか
   - テストフレームワークで実行可能か

4. **全体の整合性**
   - 修正によって新たな問題が生まれていないか
   - テストコード全体が一貫しているか

5. **次フェーズへの準備**
   - 修正後のテストコードが実行可能か
   - Phase 6（テスト実行）に進めるか

## テスト実装ログの更新

修正内容をテスト実装ログに追記してください：

```markdown
## 修正履歴

### 修正1: （ブロッカー/改善提案の内容）
- **指摘内容**: （レビューでの指摘）
- **修正内容**: （どう修正したか）
- **影響範囲**: （どのファイルを変更したか）
```

## 出力形式

修正後のテスト実装ログを `.ai-workflow/issue-391/05_test_implementation/output/test-implementation.md` として**上書き保存**してください。

## 修正開始

上記を踏まえ、レビュー指摘事項を反映した改善版のテストコードを実装し、テスト実装ログを更新してください。
