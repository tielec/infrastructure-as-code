# 詳細設計フェーズ - 修正プロンプト

## タスク概要
レビューで指摘された問題を修正し、改善された設計書を作成してください。

## 元の成果物
@.ai-workflow/issue-391/02_design/output/design.md

## レビュー結果
## 品質ゲート評価
- [x] **実装戦略の判断根拠が明記されている**: PASS - 既存資産拡張を主軸とする理由がFR-1/3に紐づいて説明されています。
- [x] **テスト戦略の判断根拠が明記されている**: PASS - Pulumiユニット＋Jenkins統合テストの必要性が機能特性と非機能要件を根拠に整理されています。
- [x] **既存コードへの影響範囲が分析されている**: PASS - Pulumi/Jenkins/Runbookなど主要コンポーネントごとに影響が洗い出されています。
- [x] **変更が必要なファイルがリストアップされている**: PASS - 既存修正と新規追加ファイルが具体的に列挙されています。
- [ ] **設計が実装可能である**: FAIL - Jenkins段階の実装方法がDeclarative Pipelineの制約に反しており、このままでは実装が成立しません。

## 詳細レビュー

### 1. 戦略判断の妥当性
**良好な点**:
- Pulumi/Jenkins双方で既存構成を拡張する位置づけが明確で、要件定義と整合しています。
- テスト戦略・テストコード戦略が機能の複雑性と現状の欠落テストを根拠に選定されています。

**懸念点**:
- なし。

### 2. 影響範囲分析の適切性
**良好な点**:
- IaC、Pipeline、DSL、Runbookまで変更範囲をカバーし、依存関係も記載されています。

**懸念点**:
- なし。

### 3. ファイルリストの完全性
**良好な点**:
- Pulumi configやJenkinsテスト用ディレクトリまで具体的に列挙されており実装作業を導けます。

**懸念点**:
- `scripts/aws_mock.sh`を追加する前提が示されていますが、ファイル一覧に含まれていません（design.md:173）。

### 4. 設計の実装可能性
**良好な点**:
- `ssmHomeRegion`の導入やregion別ディレクトリ運用など、実装時に迷わない粒度で記述されています。

**懸念点**:
- Declarative Pipeline内で `script { regionList.each { region -> stage("Backup ${region}") { ... } } }` と記載されていますが、Declarativeではネストした`stage`呼び出しが禁止されており（design.md:140）、記載通りではJenkinsが構文エラーになります。Sequentialにダイナミックステージを生成する別案（例: scripted pipelineへの切り替えや`parallel`/`matrix`利用）に見直す必要があります。
- `env.PARAM_COUNTS[region]`のように環境変数を連想配列として扱う設計はGroovy/Jenkinsの仕様上成立せず、実行時に失敗します（design.md:146）。

### 5. 要件との対応
**良好な点**:
- FR-1〜4についてはPulumi/Jenkins/DSL各節での具体的対応が明示されています。

**懸念点**:
- FR-5がRunbook更新やpost通知に紐付けられていますが、CLI/Jenkins利用者への具体的な通知チャネル・タイミング・責任者といった通知計画が設計内に示されておらず、要件達成の方法が不明確です（design.md:190）。

### 6. セキュリティ考慮
**良好な点**:
- SSE-S3強制、Public Access Block、IAM権限確認など具体的な対策が列挙されています。

**改善の余地**:
- なし。

### 7. 非機能要件への対応
**良好な点**:
- タイムアウト設計やスケーラビリティ、可用性への考慮が要件定義と一致しています。

**改善の余地**:
- なし。

## ブロッカー（BLOCKER）

1. **Declarative Pipeline段階の設計が成立しない**
   - 問題: `script`ブロック内で`stage("Backup ${region}")`を多重定義する案はDeclarative Pipelineで許可されておらず、ビルドが失敗します（.ai-workflow/issue-391/02_design/output/design.md:140）。
   - 影響: 次フェーズでテストシナリオを検討しても実行可能なパイプライン案がなく、実装・検証に進めません。
   - 対策: Sequentialにリージョンを処理できる構成に改めてください（例: scripted pipelineでループを組む、`matrix`を活用する、あるいはDeclarativeの`when`＋`stage`定義を事前生成するなど）。

2. **FR-5（通知計画）の具体化不足**
   - 問題: 要件が求めるCLI/Jenkins利用者向けの通知計画がRunbook更新やpost通知だけに留まり、チャネル・タイミング・担当者といった計画が設計されていません（.ai-workflow/issue-391/02_design/output/design.md:190）。
   - 影響: 通知方針が未定のため、要件FR-5を満たすためのテスト・運用準備が設計できず、次フェーズへ進めません。
   - 対策: 通知先（Slack/メール等）、告知のタイミング、ロールバック時の連絡プロセス、責任者を明文化し、テスト観点（通知確認方法）まで落とし込んでください。

## 改善提案（SUGGESTION）

1. **集計ロジックをスクリプトスコープに移す**
   - 現状: `env.PARAM_COUNTS[region]`でJSONを蓄積すると示されていますが、環境変数は文字列のみで添字アクセスができません（.ai-workflow/issue-391/02_design/output/design.md:146）。
   - 提案: `def paramCounts = [:]` のようにscriptスコープのマップで管理し、`writeJSON`/`archiveArtifacts`等で出力する形にすると実装が容易です。
   - 効果: 実装時のバグを防ぎ、テストでリージョン別集計を確認しやすくなります。

2. **テスト用モックファイルの一覧整備**
   - 現状: jenkinsfile-runnerテストで`scripts/aws_mock.sh`を利用すると記載されていますが、変更ファイル一覧に含まれていません（.ai-workflow/issue-391/02_design/output/design.md:173）。
   - 提案: 新規追加ファイルとして明示し、目的と配置場所を記載してください。
   - 効果: 実装漏れを防ぎ、テスト設計とファイル構成の整合が取れます。

## 総合評価

**主な強み**:
- Pulumi/Jenkins双方での多リージョン対応方針が具体的で、IaC・CI・Runbookまで一貫性があります。
- セキュリティ・非機能要件への配慮が盛り込まれ、実装者が迷わない粒度で記述されています。

**主な改善提案**:
- Jenkins Pipelineの実装方法をDeclarativeの制約に適合させる必要があります。
- 利用者向け通知計画を要件レベルまで具体化してください。

現状のままではJenkinsパイプラインが実装不能であり、FR-5の要件も満たせていません。上記ブロッカーを解消したうえで再度レビューをお願いします。

---
**判定: FAIL**

## 参考情報

### 要件定義書
@.ai-workflow/issue-391/01_requirements/output/requirements.md

### GitHub Issue情報
## Issue概要

- **Issue番号**: #391
- **タイトル**: SSMバックアップのマルチリージョン対応
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/391
- **ラベル**: なし

### 本文

## 概要
SSM パラメータバックアップの仕組みをマルチリージョン対応させる。

## 対応内容
- [ ] `pulumi/jenkins-ssm-backup-s3/index.ts` で、リージョンごとに S3 バケットを作成／管理できるようにする
- [ ] `jenkins/jobs/dsl/admin/admin_ssm_backup_job.groovy` のパラメータ構成は現状のままとし、リージョン選択を追加しない
- [ ] `jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile` をステージ分割し、複数リージョンのバックアップを順次取得できるようにする

### Phase 0: 計画
- [ ] 作業範囲・影響範囲・完了条件が整理されている
- [ ] 既存ジョブへの影響とロールバック方針が明示されている

### Phase 1: 要件定義
- [ ] 対応リージョン一覧と増減方針が定義されている
- [ ] 既存 CLI / ジョブ利用者への通知方針が決まっている

### Phase 2: 設計
- [ ] Pulumi リソース命名規則・タグ方針が整理されている
- [ ] Jenkins ステージ構成と並列／直列実行の判断理由が明記されている

### Phase 3: テストシナリオ
- [ ] 新旧リージョン構成でのバックアップ・リストアパスが想定されている
- [ ] ログ検証方法とアラート確認手順が記載されている

### Phase 4: 実装
- [ ] Pulumi 側でリージョンごとにバケットと SSM パラメータを作成
- [ ] Jenkins DSL / パイプライン修正で multi-stage バックアップを実現

### Phase 5: テスト
- [ ] 全自動テスト（Pulumiユニット、パイプラインdry-run）が成功している
- [ ] us-west-2 を含む複数リージョンのバックアップログが検証されている

### Phase 6: ドキュメント
- [ ] Runbook/READMEにリージョン追加手順とロールバック手順が追記されている
- [ ] 新設定パラメータと Pulumi config 手順がドキュメントに記載されている

### Phase 7: レポート
- [ ] Issue コメントまたはレポートで実装内容・テスト結果・残課題が共有済み
- [ ] 運用チームとリリース判定が合意されている

## 修正指示

### ブロッカー（BLOCKER）の解消

レビュー結果の「ブロッカー」セクションに記載された問題は、**次フェーズに進めない重大な問題**です。これらを必ず解消してください。

**ブロッカーの典型例**:
- 3つの戦略判断（実装・テスト・テストコード）が欠落 → 追加する
- 判断根拠が不十分 → 具体的かつ論理的に補強する
- ファイルリストが未記載 → リストアップする
- 設計が実装不可能 → 実装可能な設計に修正する
- 重大なセキュリティリスク → 対策を追加する

### 改善提案（SUGGESTION）の検討

レビュー結果の「改善提案」セクションに記載された項目は、可能な範囲で反映してください。

**改善提案の優先度**:
1. 設計の品質を大きく向上させる提案 → 優先的に反映
2. ドキュメントの充実（図表追加等） → 可能であれば反映
3. 細かい表現の改善 → 時間があれば反映

## 品質ゲート（Phase 2）

修正後の設計書は、以下の品質ゲートをすべて満たす必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## 修正方針

### 1. ブロッカー対応（最優先）

レビューで指摘されたブロッカーを1つずつ解消してください。

**対応方法**:
- 元の設計書を読み込む
- ブロッカー指摘箇所を特定
- 指摘内容を理解し、適切に修正
- 修正後、ブロッカーが解消されたか確認

### 2. 改善提案の反映（推奨）

可能な範囲で、レビューの改善提案を反映してください。

**対応方法**:
- 改善提案を読み込む
- 実装可能かつ効果的な提案を選択
- 元の設計書に追記・修正
- 全体の整合性を確認

### 3. 元の成果物の尊重

レビューで問題がなかった部分は、基本的に変更しないでください。

**注意点**:
- ブロッカー解消に必要な修正のみ実施
- 不必要な変更は避ける
- 元の設計の良い部分は維持する

## 修正後の確認事項

修正完了後、以下を確認してください：

1. **ブロッカーが解消されたか**
   - レビューで指摘されたすべてのブロッカーに対応したか
   - 対応内容が適切か

2. **品質ゲートを満たしているか**
   - 5つの品質ゲートすべてをクリアしているか

3. **全体の整合性**
   - 修正によって新たな矛盾が生まれていないか
   - ドキュメント全体が一貫しているか

4. **実装可能性**
   - 修正後の設計が実装可能か
   - 次フェーズ（テストシナリオ）に進めるか

## 出力形式

修正した設計書を `.ai-workflow/issue-391/02_design/output/design.md` として保存してください。

**上書き形式**で保存してください（元のファイルを置き換え）。

## 修正開始

上記を踏まえ、レビュー指摘事項を反映した改善版の設計書を作成してください。
