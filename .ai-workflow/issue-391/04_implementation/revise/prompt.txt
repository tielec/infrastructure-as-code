# 実装フェーズ - 修正プロンプト

## タスク概要
レビューで指摘された問題を修正し、改善された実装を行ってください。

## レビュー結果
## 品質ゲート評価

- [ ] **Phase 2の設計に沿った実装である**: FAIL - Jenkins post処理がSlack/メール通知を実装しておらず設計の通知要件を満たしていません。
- [x] **既存コードの規約に準拠している**: PASS - Pulumi/Jenkins/シェルのスタイルは既存実装と一貫しています。
- [x] **基本的なエラーハンドリングがある**: PASS - Pulumi設定検証やスクリプト内のリトライ/exitコード処理が追加されています。
- [ ] **明らかなバグがない**: FAIL - 通知処理欠如により運用チームが失敗を検知できず、実質的に要件を満たしません。

## 詳細レビュー

### 1. 設計との整合性

**良好な点**:
- Pulumiがリージョン配列を検証し、各リージョンのS3/SSMリソースを生成して`bucketMap`をエクスポートしています（pulumi/jenkins-ssm-backup-s3/index.ts:1）。
- JenkinsパイプラインがScripted Pipeline化され、リージョンごとに逐次ステージを動的生成しています（jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile:34）。

**懸念点**:
- Post ActionsでSlack/メール通知を送る設計要件が未実装で、`echo`出力のみになっています（jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile:200）。

### 2. コーディング規約への準拠

**良好な点**:
- TypeScript/シェル/Groovyともに既存プロジェクトの命名・整形に沿っています。
- 新しいPulumi構成ファイルのキー名が従来のスキーマに揃えられています（pulumi/jenkins-ssm-backup-s3/Pulumi.dev.yaml:1）。

**懸念点**:
- 特になし。

### 3. エラーハンドリング

**良好な点**:
- Pulumi側で設定値の妥当性をチェックし、早期に例外を投げています（pulumi/jenkins-ssm-backup-s3/index.ts:18）。
- Jenkinsパイプラインがリージョンごとの失敗を捕捉し、`regionSummaries`へステータスを残しています（jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile:86）。

**改善の余地**:
- 特になし。

### 4. バグの有無

**良好な点**:
- S3アップロードがDRY RUNや0件時にスキップされるなど、基本フローは成立しています（jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile:140）。

**懸念点**:
- Post ActionsでSlack/メール通知が実装されておらず、Runbookで案内している通知が送信されません（jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile:200, docs/runbooks/ssm-backup.md:13）。

### 5. 保守性

**良好な点**:
- `loadRegionContext`/`runBackupForRegion`など機能単位に分割されメンテしやすい構成です（jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile:217）。
- Runbookがリージョン追加やロールバック手順を詳細化しています（docs/runbooks/ssm-backup.md:9）。

**改善の余地**:
- `collect_parameters.sh` が生成する `summary.json` に実行時間などのメトリクスを含めると将来の可観測性が高まります（jenkins/jobs/pipeline/admin/ssm-backup/scripts/collect_parameters.sh:143）。

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

1. **通知処理が未実装**
   - 問題: JenkinsのPost Actionsが`echo`のみで、設計が求めるSlack/メール通知が行われません（jenkins/jobs/pipeline/admin/ssm-backup/Jenkinsfile:200）。
   - 影響: バックアップ失敗を運用チームが検知できず、Runbookで案内している運用フローが破綻します。
   - 対策: `slackSend`や`emailext`等で`regionSummaries`とRunbookリンクを通知する処理を設計通り追加してください。Runbookの記述とも整合します（docs/runbooks/ssm-backup.md:13,27）。

## 改善提案（SUGGESTION）

1. **サマリーに計測値を追加**
   - 現状: `collect_parameters.sh` の `summary.json` に処理時間が含まれず、設計で想定していた`executionTimeSec`が欠如しています（jenkins/jobs/pipeline/admin/ssm-backup/scripts/collect_parameters.sh:143）。
   - 提案: バッチ処理前後で時間を計測し、`executionTimeSec`などをサマリーへ追加してください。
   - 効果: Jenkinsポスト通知や将来のテレメトリ拡張が容易になります。

## 総合評価

**主な強み**:
- Pulumiの多リージョン化と設定検証が堅牢に実装されています。
- JenkinsパイプラインがScripted Pipeline化され、逐次処理やサマリ出力が整備されています。

**主な改善提案**:
- 設計で必須の通知処理を追加し、Runbookとの整合を取る必要があります。
- スクリプトのサマリーに処理時間などのメトリクスを載せると観測性が向上します。

通知周りの実装が抜けているため、このままでは運用要件を満たせません。Slack/メール通知を追加して設計とRunbookを実態に合わせれば、他の変更は概ね問題なく次フェーズに進める状態になると考えます。

---
**判定: FAIL**

## 参考情報

### 実装ログ
@.ai-workflow/issue-391/04_implementation/output/implementation.md

### 設計書
@.ai-workflow/issue-391/02_design/output/design.md

### テストシナリオ
@.ai-workflow/issue-391/03_test_scenario/output/test-scenario.md

### 実装戦略（Phase 2で決定）
**EXTEND**

## 修正指示

### ブロッカー（BLOCKER）の解消

レビュー結果の「ブロッカー」セクションに記載された問題は、**次フェーズに進めない重大な問題**です。これらを必ず解消してください。

**ブロッカーの典型例**:
- 設計との不一致 → 設計に沿った実装に修正
- テストコード未実装 → テストコードを追加
- 明らかなバグ → バグを修正
- セキュリティ脆弱性 → セキュリティ対策を追加

### 改善提案（SUGGESTION）の検討

レビュー結果の「改善提案」セクションに記載された項目は、可能な範囲で反映してください。

**改善提案の優先度**:
1. セキュリティ・品質を大きく向上させる提案 → 優先的に反映
2. パフォーマンス最適化 → 可能であれば反映
3. コメント・ドキュメント追加 → 時間があれば反映

## 品質ゲート（Phase 4）

修正後の実装は、以下の品質ゲートをすべて満たす必要があります：

- [ ] **Phase 2の設計に沿った実装である**
- [ ] **既存コードの規約に準拠している**
- [ ] **基本的なエラーハンドリングがある**
- [ ] **テストコードが実装されている**
- [ ] **明らかなバグがない**

## 修正方針

### 1. ブロッカー対応（最優先）

レビューで指摘されたブロッカーを1つずつ解消してください。

**対応方法**:
- 実装されたコードを読み込む
- ブロッカー指摘箇所を特定
- 指摘内容を理解し、適切に修正
- 修正後、ブロッカーが解消されたか確認

### 2. 改善提案の反映（推奨）

可能な範囲で、レビューの改善提案を反映してください。

**対応方法**:
- 改善提案を読み込む
- 実装可能かつ効果的な提案を選択
- コードを修正・追加
- 全体の整合性を確認

### 3. 既存実装の尊重

レビューで問題がなかった部分は、基本的に変更しないでください。

**注意点**:
- ブロッカー解消に必要な修正のみ実施
- 不必要な変更は避ける
- 動作している部分は維持する

## 修正後の確認事項

修正完了後、以下を確認してください：

1. **ブロッカーが解消されたか**
   - レビューで指摘されたすべてのブロッカーに対応したか
   - 対応内容が適切か

2. **品質ゲートを満たしているか**
   - 5つの品質ゲートすべてをクリアしているか

3. **テストが通るか**
   - 実装したテストコードが実行可能か
   - 基本的なテストケースが通るか

4. **全体の整合性**
   - 修正によって新たなバグが生まれていないか
   - コード全体が一貫しているか

5. **次フェーズへの準備**
   - 修正後の実装がテスト実行可能か
   - Phase 5（テスト実行）に進めるか

## 実装ログの更新

修正内容を実装ログに追記してください：

```markdown
## 修正履歴

### 修正1: （ブロッカー/改善提案の内容）
- **指摘内容**: （レビューでの指摘）
- **修正内容**: （どう修正したか）
- **影響範囲**: （どのファイルを変更したか）
```

## 出力形式

修正後の実装ログを `.ai-workflow/issue-391/04_implementation/output/implementation.md` として**上書き保存**してください。

## 修正開始

上記を踏まえ、レビュー指摘事項を反映した改善版の実装を行い、実装ログを更新してください。
