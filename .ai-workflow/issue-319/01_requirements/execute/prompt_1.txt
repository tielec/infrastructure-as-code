# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: Planning Phaseは実行されていません

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue情報

- **Issue番号**: #319
- **タイトル**: [FEATURE] AIワークフロー: フェーズ依存関係の柔軟化と選択的実行機能
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/319
- **ラベル**: なし

### 本文

## 概要

現在のAIワークフローは全フェーズが順次実行される前提で、各フェーズが前フェーズの成果物に依存しています。
開発規模やタスクの種類に応じて、必要なフェーズだけを選択的に実行できる機能を追加したいです。

## 背景

### 現在の問題点
- **Phase 1-7の強制的な依存関係**: 各フェーズは前フェーズの成果物を前提としている
- **小規模タスクでのオーバーヘッド**: 簡単な不具合修正でも全フェーズ実行が必要
- **柔軟性の欠如**: 要件定義だけレビューしたい、実装だけ実行したいなどの要望に対応できない

### ユースケース例

1. **要件定義のみ実行**: Issue内容を整理してドキュメント化だけ行いたい
2. **実装のみ実行**: 既存の要件定義書・設計書がある状態で実装だけ行いたい
3. **テストのみ実行**: 既存実装に対してテストケース追加だけ行いたい
4. **部分フェーズ実行**: Phase 1-3だけ実行して設計レビューで止めたい

## 提案機能

### 1. フェーズ依存関係の明示化

各フェーズの依存関係をメタデータとして定義:

```python
PHASE_DEPENDENCIES = {
    'requirements': [],  # 依存なし
    'design': ['requirements'],  # 要件定義が必要
    'test_scenario': ['requirements', 'design'],
    'implementation': ['requirements', 'design', 'test_scenario'],
    'testing': ['implementation'],
    'documentation': ['implementation'],
    'report': ['requirements', 'design', 'implementation', 'testing', 'documentation']
}
```

### 2. 依存関係チェック機能

フェーズ実行前に依存関係を検証:

```python
def validate_phase_dependencies(phase_name: str, metadata: MetadataManager) -> bool:
    """
    フェーズ実行前に依存関係をチェック
    
    Returns:
        bool: 依存関係が満たされている場合True
    """
    required_phases = PHASE_DEPENDENCIES.get(phase_name, [])
    for required_phase in required_phases:
        status = metadata.get_phase_status(required_phase)
        if status != 'completed':
            raise DependencyError(f"Phase '{required_phase}' must be completed before '{phase_name}'")
    return True
```

### 3. CLIオプションの追加

```bash
# 依存関係チェックをスキップして強制実行
python main.py execute --phase implementation --issue 305 --skip-dependency-check

# 依存関係を無視して実行（警告のみ表示）
python main.py execute --phase implementation --issue 305 --ignore-dependencies

# 特定フェーズの成果物を手動で指定
python main.py execute --phase implementation --issue 305   --requirements-doc /path/to/requirements.md   --design-doc /path/to/design.md   --test-scenario-doc /path/to/test-scenario.md
```

### 4. プリセット実行モード

よくあるパターンをプリセットとして提供:

```bash
# 要件定義のみ
python main.py execute --preset requirements-only --issue 305

# 設計まで（Phase 1-2）
python main.py execute --preset design-phase --issue 305

# 実装まで（Phase 1-4）
python main.py execute --preset implementation-phase --issue 305

# フルワークフロー（Phase 1-7、デフォルト）
python main.py execute --preset full-workflow --issue 305
```

## 実装方針

### Phase 1: 依存関係管理の実装
- [ ] `PHASE_DEPENDENCIES` 定義の追加
- [ ] `validate_phase_dependencies()` 関数の実装
- [ ] `BasePhase.run()` に依存関係チェックを統合

### Phase 2: CLIオプションの追加
- [ ] `--skip-dependency-check` フラグの追加
- [ ] `--ignore-dependencies` フラグの追加（警告表示）
- [ ] `--{phase}-doc` オプションの追加（外部ドキュメント指定）

### Phase 3: プリセット機能の実装
- [ ] `--preset` オプションの追加
- [ ] プリセット定義（requirements-only, design-phase, implementation-phase, full-workflow）
- [ ] プリセットに応じた自動フェーズ選択

### Phase 4: ドキュメント更新
- [ ] README.md に使用例を追加
- [ ] プリセット一覧のドキュメント化
- [ ] 依存関係図の追加

## 期待される効果

1. **柔軟性の向上**: タスクの規模に応じた最適なフェーズ選択が可能
2. **時間短縮**: 不要なフェーズをスキップして効率化
3. **段階的レビュー**: 要件定義や設計段階でのレビューが容易
4. **既存資産の活用**: 既存ドキュメントを活用した部分実行が可能

## 検討事項

### セキュリティ
- `--skip-dependency-check` 使用時の警告表示
- 依存関係違反時のエラーメッセージの明確化

### 互換性
- 既存のフル実行モードをデフォルト動作として維持
- 新規オプションは明示的に指定した場合のみ有効化

### エラーハンドリング
- 依存フェーズ未完了時のエラーメッセージ
- 外部ドキュメント指定時のバリデーション

## 関連Issue

- #305 AI Workflow: Jenkins統合完成とPhase終了後の自動commit & push機能

## タスク

- [ ] Phase 1: 依存関係管理の実装
- [ ] Phase 2: CLIオプションの追加
- [ ] Phase 3: プリセット機能の実装
- [ ] Phase 4: ドキュメント更新
- [ ] E2Eテストの追加
- [ ] 既存テストの修正（依存関係チェック対応）

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-319/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
