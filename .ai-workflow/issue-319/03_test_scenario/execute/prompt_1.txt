# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-319/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-319/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-319/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**UNIT_INTEGRATION**

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #319
- **タイトル**: [FEATURE] AIワークフロー: フェーズ依存関係の柔軟化と選択的実行機能
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/319
- **ラベル**: なし

### 本文

## 概要

現在のAIワークフローは全フェーズが順次実行される前提で、各フェーズが前フェーズの成果物に依存しています。
開発規模やタスクの種類に応じて、必要なフェーズだけを選択的に実行できる機能を追加したいです。

## 背景

### 現在の問題点
- **Phase 1-7の強制的な依存関係**: 各フェーズは前フェーズの成果物を前提としている
- **小規模タスクでのオーバーヘッド**: 簡単な不具合修正でも全フェーズ実行が必要
- **柔軟性の欠如**: 要件定義だけレビューしたい、実装だけ実行したいなどの要望に対応できない

### ユースケース例

1. **要件定義のみ実行**: Issue内容を整理してドキュメント化だけ行いたい
2. **実装のみ実行**: 既存の要件定義書・設計書がある状態で実装だけ行いたい
3. **テストのみ実行**: 既存実装に対してテストケース追加だけ行いたい
4. **部分フェーズ実行**: Phase 1-3だけ実行して設計レビューで止めたい

## 提案機能

### 1. フェーズ依存関係の明示化

各フェーズの依存関係をメタデータとして定義:

```python
PHASE_DEPENDENCIES = {
    'requirements': [],  # 依存なし
    'design': ['requirements'],  # 要件定義が必要
    'test_scenario': ['requirements', 'design'],
    'implementation': ['requirements', 'design', 'test_scenario'],
    'testing': ['implementation'],
    'documentation': ['implementation'],
    'report': ['requirements', 'design', 'implementation', 'testing', 'documentation']
}
```

### 2. 依存関係チェック機能

フェーズ実行前に依存関係を検証:

```python
def validate_phase_dependencies(phase_name: str, metadata: MetadataManager) -> bool:
    """
    フェーズ実行前に依存関係をチェック
    
    Returns:
        bool: 依存関係が満たされている場合True
    """
    required_phases = PHASE_DEPENDENCIES.get(phase_name, [])
    for required_phase in required_phases:
        status = metadata.get_phase_status(required_phase)
        if status != 'completed':
            raise DependencyError(f"Phase '{required_phase}' must be completed before '{phase_name}'")
    return True
```

### 3. CLIオプションの追加

```bash
# 依存関係チェックをスキップして強制実行
python main.py execute --phase implementation --issue 305 --skip-dependency-check

# 依存関係を無視して実行（警告のみ表示）
python main.py execute --phase implementation --issue 305 --ignore-dependencies

# 特定フェーズの成果物を手動で指定
python main.py execute --phase implementation --issue 305   --requirements-doc /path/to/requirements.md   --design-doc /path/to/design.md   --test-scenario-doc /path/to/test-scenario.md
```

### 4. プリセット実行モード

よくあるパターンをプリセットとして提供:

```bash
# 要件定義のみ
python main.py execute --preset requirements-only --issue 305

# 設計まで（Phase 1-2）
python main.py execute --preset design-phase --issue 305

# 実装まで（Phase 1-4）
python main.py execute --preset implementation-phase --issue 305

# フルワークフロー（Phase 1-7、デフォルト）
python main.py execute --preset full-workflow --issue 305
```

## 実装方針

### Phase 1: 依存関係管理の実装
- [ ] `PHASE_DEPENDENCIES` 定義の追加
- [ ] `validate_phase_dependencies()` 関数の実装
- [ ] `BasePhase.run()` に依存関係チェックを統合

### Phase 2: CLIオプションの追加
- [ ] `--skip-dependency-check` フラグの追加
- [ ] `--ignore-dependencies` フラグの追加（警告表示）
- [ ] `--{phase}-doc` オプションの追加（外部ドキュメント指定）

### Phase 3: プリセット機能の実装
- [ ] `--preset` オプションの追加
- [ ] プリセット定義（requirements-only, design-phase, implementation-phase, full-workflow）
- [ ] プリセットに応じた自動フェーズ選択

### Phase 4: ドキュメント更新
- [ ] README.md に使用例を追加
- [ ] プリセット一覧のドキュメント化
- [ ] 依存関係図の追加

## 期待される効果

1. **柔軟性の向上**: タスクの規模に応じた最適なフェーズ選択が可能
2. **時間短縮**: 不要なフェーズをスキップして効率化
3. **段階的レビュー**: 要件定義や設計段階でのレビューが容易
4. **既存資産の活用**: 既存ドキュメントを活用した部分実行が可能

## 検討事項

### セキュリティ
- `--skip-dependency-check` 使用時の警告表示
- 依存関係違反時のエラーメッセージの明確化

### 互換性
- 既存のフル実行モードをデフォルト動作として維持
- 新規オプションは明示的に指定した場合のみ有効化

### エラーハンドリング
- 依存フェーズ未完了時のエラーメッセージ
- 外部ドキュメント指定時のバリデーション

## 関連Issue

- #305 AI Workflow: Jenkins統合完成とPhase終了後の自動commit & push機能

## タスク

- [ ] Phase 1: 依存関係管理の実装
- [ ] Phase 2: CLIオプションの追加
- [ ] Phase 3: プリセット機能の実装
- [ ] Phase 4: ドキュメント更新
- [ ] E2Eテストの追加
- [ ] 既存テストの修正（依存関係チェック対応）

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-319/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
