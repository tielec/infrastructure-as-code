SystemMessage(subtype='init', data={'type': 'system', 'subtype': 'init', 'cwd': '/tmp/jenkins-c60d3df6/workspace/AI_Workflow/ai_workflow_orchestrator', 'session_id': '417dba50-8fdf-4d87-8494-0cc2841f5e7e', 'tools': ['Task', 'Bash', 'Glob', 'Grep', 'ExitPlanMode', 'Read', 'Edit', 'Write', 'NotebookEdit', 'WebFetch', 'TodoWrite', 'WebSearch', 'BashOutput', 'KillShell', 'SlashCommand'], 'mcp_servers': [], 'model': 'claude-sonnet-4-5-20250929', 'permissionMode': 'acceptEdits', 'slash_commands': ['compact', 'context', 'cost', 'init', 'output-style:new', 'pr-comments', 'release-notes', 'todos', 'review', 'security-review'], 'apiKeySource': 'none', 'output_style': 'default', 'agents': ['general-purpose', 'statusline-setup', 'output-style-setup'], 'uuid': '266f96c2-1801-42da-ba16-8e0b87e12a46'})

AssistantMessage(content=[TextBlock(text="I'll create comprehensive test scenarios based on the requirements and design documents. Let me start by creating a todo list to track this work.")], model='claude-sonnet-4-5-20250929', parent_tool_use_id=None)

AssistantMessage(content=[ToolUseBlock(id='toolu_0133VU3aePsTGaLfhycmh28S', name='TodoWrite', input={'todos': [{'content': 'Analyze requirements and design documents to understand test scope', 'status': 'in_progress', 'activeForm': 'Analyzing requirements and design documents'}, {'content': 'Create test strategy summary based on UNIT_INTEGRATION approach', 'status': 'pending', 'activeForm': 'Creating test strategy summary'}, {'content': 'Design Unit test scenarios for dependency_validator.py', 'status': 'pending', 'activeForm': 'Designing Unit test scenarios for dependency_validator.py'}, {'content': 'Design Unit test scenarios for main.py CLI options', 'status': 'pending', 'activeForm': 'Designing Unit test scenarios for main.py CLI options'}, {'content': 'Design Unit test scenarios for base_phase.py integration', 'status': 'pending', 'activeForm': 'Designing Unit test scenarios for base_phase.py integration'}, {'content': 'Design Integration test scenarios for end-to-end dependency checking', 'status': 'pending', 'activeForm': 'Designing Integration test scenarios'}, {'content': 'Define test data and environment requirements', 'status': 'pending', 'activeForm': 'Defining test data and environment requirements'}, {'content': 'Write test-scenario.md document', 'status': 'pending', 'activeForm': 'Writing test-scenario.md document'}]})], model='claude-sonnet-4-5-20250929', parent_tool_use_id=None)

UserMessage(content=[ToolResultBlock(tool_use_id='toolu_0133VU3aePsTGaLfhycmh28S', content='Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable', is_error=None)], parent_tool_use_id=None)

AssistantMessage(content=[TextBlock(text="Now I'll analyze the requirements and design documents to create comprehensive test scenarios.")], model='claude-sonnet-4-5-20250929', parent_tool_use_id=None)

AssistantMessage(content=[ToolUseBlock(id='toolu_012xmv8GaBkJQwCwdsCUEwF1', name='TodoWrite', input={'todos': [{'content': 'Analyze requirements and design documents to understand test scope', 'status': 'completed', 'activeForm': 'Analyzing requirements and design documents'}, {'content': 'Create test strategy summary based on UNIT_INTEGRATION approach', 'status': 'in_progress', 'activeForm': 'Creating test strategy summary'}, {'content': 'Design Unit test scenarios for dependency_validator.py', 'status': 'pending', 'activeForm': 'Designing Unit test scenarios for dependency_validator.py'}, {'content': 'Design Unit test scenarios for main.py CLI options', 'status': 'pending', 'activeForm': 'Designing Unit test scenarios for main.py CLI options'}, {'content': 'Design Unit test scenarios for base_phase.py integration', 'status': 'pending', 'activeForm': 'Designing Unit test scenarios for base_phase.py integration'}, {'content': 'Design Integration test scenarios for end-to-end dependency checking', 'status': 'pending', 'activeForm': 'Designing Integration test scenarios'}, {'content': 'Define test data and environment requirements', 'status': 'pending', 'activeForm': 'Defining test data and environment requirements'}, {'content': 'Write test-scenario.md document', 'status': 'pending', 'activeForm': 'Writing test-scenario.md document'}]})], model='claude-sonnet-4-5-20250929', parent_tool_use_id=None)

UserMessage(content=[ToolResultBlock(tool_use_id='toolu_012xmv8GaBkJQwCwdsCUEwF1', content='Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable', is_error=None)], parent_tool_use_id=None)

AssistantMessage(content=[TextBlock(text="Now I'll create the comprehensive test scenario document:")], model='claude-sonnet-4-5-20250929', parent_tool_use_id=None)

AssistantMessage(content=[ToolUseBlock(id='toolu_01SyEFiSv21CD9iB8zXydThZ', name='Write', input={'file_path': '/tmp/jenkins-c60d3df6/workspace/AI_Workflow/ai_workflow_orchestrator/.ai-workflow/issue-319/03_test_scenario/output/test-scenario.md', 'content': '# テストシナリオ - Issue #319\n\n## 0. ドキュメントメタデータ\n\n| 項目 | 内容 |\n|------|------|\n| Issue番号 | #319 |\n| タイトル | [FEATURE] AIワークフロー: フェーズ依存関係の柔軟化と選択的実行機能 |\n| 作成日 | 2025-10-12 |\n| バージョン | 1.0 |\n| ステータス | Draft |\n| テスト戦略 | UNIT_INTEGRATION |\n\n---\n\n## 1. テスト戦略サマリー\n\n### 1.1 選択されたテスト戦略\n\n**UNIT_INTEGRATION**\n\nPhase 2（設計フェーズ）で決定されたテスト戦略に基づき、以下の2種類のテストを実施します：\n\n1. **Unitテスト**: 各関数・メソッド単位の詳細なテスト\n2. **Integrationテスト**: コンポーネント間の連携および実際のCLI実行フロー全体のテスト\n\n### 1.2 テスト対象の範囲\n\n#### 新規作成モジュール\n- `utils/dependency_validator.py`\n  - `PHASE_DEPENDENCIES` 定数\n  - `DependencyError` カスタム例外\n  - `validate_phase_dependencies()` 関数\n  - ユーティリティ関数（`get_phase_dependencies()`, `get_all_phase_dependencies()`）\n\n#### 既存モジュール修正箇所\n- `main.py`\n  - CLIオプション追加（`--skip-dependency-check`, `--ignore-dependencies`, `--preset`）\n  - 個別フェーズ実行時の依存関係チェック統合\n  - オプション排他性チェック\n\n- `phases/base_phase.py`\n  - `run()` メソッドへの依存関係チェック統合\n\n### 1.3 テストの目的\n\n1. **依存関係定義の正確性検証**: `PHASE_DEPENDENCIES`が要件通りに定義されているか\n2. **依存関係チェックロジックの検証**: 未完了フェーズを正しく検出できるか\n3. **CLIオプションの動作検証**: スキップ・無視・プリセット機能が正しく動作するか\n4. **エラーハンドリング検証**: 依存関係違反時に適切なエラー処理が行われるか\n5. **統合動作の検証**: 実際のワークフロー実行における依存関係チェックの動作確認\n\n### 1.4 テストカバレッジ目標\n\n- **ラインカバレッジ**: 90%以上\n- **ブランチカバレッジ**: 85%以上\n- **クリティカルパスカバレッジ**: 100%\n\n---\n\n## 2. Unitテストシナリオ\n\n### 2.1 `utils/dependency_validator.py` - PHASE_DEPENDENCIES 定義\n\n#### TC-U-001: PHASE_DEPENDENCIES 構造検証\n\n**目的**: 依存関係定義が正しいデータ構造を持つことを検証\n\n**前提条件**: なし\n\n**入力**: `PHASE_DEPENDENCIES` 定数\n\n**期待結果**:\n- `dict` 型である\n- 全フェーズ名（planning, requirements, design, test_scenario, implementation, test_implementation, testing, documentation, report, evaluation）がキーとして存在する\n- 各値が `list` 型である\n\n**テストデータ**: `PHASE_DEPENDENCIES` 定数そのもの\n\n---\n\n#### TC-U-002: requirements フェーズの依存関係検証\n\n**目的**: requirements フェーズが依存関係を持たないことを検証\n\n**前提条件**: なし\n\n**入力**: `PHASE_DEPENDENCIES[\'requirements\']`\n\n**期待結果**: 空リスト `[]`\n\n**テストデータ**: なし\n\n---\n\n#### TC-U-003: design フェーズの依存関係検証\n\n**目的**: design フェーズが requirements フェーズに依存することを検証\n\n**前提条件**: なし\n\n**入力**: `PHASE_DEPENDENCIES[\'design\']`\n\n**期待結果**: `[\'requirements\']`\n\n**テストデータ**: なし\n\n---\n\n#### TC-U-004: implementation フェーズの依存関係検証\n\n**目的**: implementation フェーズが requirements, design, test_scenario に依存することを検証\n\n**前提条件**: なし\n\n**入力**: `PHASE_DEPENDENCIES[\'implementation\']`\n\n**期待結果**: リストに `\'requirements\'`, `\'design\'`, `\'test_scenario\'` が含まれる（順不同）\n\n**テストデータ**: なし\n\n---\n\n#### TC-U-005: report フェーズの依存関係検証\n\n**目的**: report フェーズが複数フェーズに依存することを検証\n\n**前提条件**: なし\n\n**入力**: `PHASE_DEPENDENCIES[\'report\']`\n\n**期待結果**: リストに `\'requirements\'`, `\'design\'`, `\'implementation\'`, `\'testing\'`, `\'documentation\'` が含まれる\n\n**テストデータ**: なし\n\n---\n\n### 2.2 `utils/dependency_validator.py` - DependencyError クラス\n\n#### TC-U-006: DependencyError - 単一フェーズ未完了\n\n**目的**: 単一フェーズの依存関係違反時に適切なエラーメッセージが生成されることを検証\n\n**前提条件**: なし\n\n**入力**:\n```python\nerror = DependencyError(\n    phase_name=\'design\',\n    missing_phases=[\'requirements\']\n)\n```\n\n**期待結果**:\n- `error.phase_name` が `\'design\'`\n- `error.missing_phases` が `[\'requirements\']`\n- `error.message` に `"Phase \'requirements\' must be completed before \'design\'"` が含まれる\n- `str(error)` でメッセージが表示される\n\n**テストデータ**: 上記入力パラメータ\n\n---\n\n#### TC-U-007: DependencyError - 複数フェーズ未完了\n\n**目的**: 複数フェーズの依存関係違反時に適切なエラーメッセージが生成されることを検証\n\n**前提条件**: なし\n\n**入力**:\n```python\nerror = DependencyError(\n    phase_name=\'implementation\',\n    missing_phases=[\'requirements\', \'design\']\n)\n```\n\n**期待結果**:\n- `error.phase_name` が `\'implementation\'`\n- `error.missing_phases` が `[\'requirements\', \'design\']`\n- `error.message` に `"Phases \'requirements\', \'design\' must be completed before \'implementation\'"` が含まれる\n\n**テストデータ**: 上記入力パラメータ\n\n---\n\n#### TC-U-008: DependencyError - カスタムメッセージ\n\n**目的**: カスタムエラーメッセージが正しく設定されることを検証\n\n**前提条件**: なし\n\n**入力**:\n```python\nerror = DependencyError(\n    phase_name=\'design\',\n    missing_phases=[\'requirements\'],\n    message=\'Custom error message\'\n)\n```\n\n**期待結果**:\n- `error.message` が `\'Custom error message\'`\n\n**テストデータ**: 上記入力パラメータ\n\n---\n\n### 2.3 `utils/dependency_validator.py` - validate_phase_dependencies() 関数\n\n#### TC-U-009: 依存関係なしのフェーズ（正常系）\n\n**目的**: 依存関係のないフェーズは常に検証成功することを確認\n\n**前提条件**: メタデータが初期化されている\n\n**入力**:\n```python\nphase_name = \'requirements\'\nmetadata = MetadataManager(metadata_path)\n```\n\n**期待結果**:\n- 戻り値が `True`\n- 標準出力に `"[INFO] Phase \'requirements\' has no dependencies. Proceeding."` が表示される\n- 例外が発生しない\n\n**テストデータ**:\n```json\n{\n  "phases": {\n    "requirements": {"status": "pending"}\n  }\n}\n```\n\n---\n\n#### TC-U-010: 依存関係満たされている（正常系）\n\n**目的**: 依存フェーズが completed の場合、検証成功することを確認\n\n**前提条件**: requirements フェーズが completed\n\n**入力**:\n```python\nphase_name = \'design\'\nmetadata = MetadataManager(metadata_path)\nmetadata.update_phase_status(\'requirements\', \'completed\')\n```\n\n**期待結果**:\n- 戻り値が `True`\n- 標準出力に `"[INFO] Dependency check passed for phase \'design\'."` が表示される\n- 例外が発生しない\n\n**テストデータ**:\n```json\n{\n  "phases": {\n    "requirements": {"status": "completed"},\n    "design": {"status": "pending"}\n  }\n}\n```\n\n---\n\n#### TC-U-011: 依存関係違反（異常系）\n\n**目的**: 依存フェーズが未完了の場合、DependencyError が発生することを確認\n\n**前提条件**: requirements フェーズが pending\n\n**入力**:\n```python\nphase_name = \'design\'\nmetadata = MetadataManager(metadata_path)\n# requirements は pending のまま\n```\n\n**期待結果**:\n- `DependencyError` 例外が発生\n- 例外メッセージに `\'requirements\'` と `\'design\'` が含まれる\n- 例外の `missing_phases` が `[\'requirements\']`\n\n**テストデータ**:\n```json\n{\n  "phases": {\n    "requirements": {"status": "pending"},\n    "design": {"status": "pending"}\n  }\n}\n```\n\n---\n\n#### TC-U-012: 複数依存関係の一部未完了（異常系）\n\n**目的**: 複数の依存フェーズのうち一部が未完了の場合、DependencyError が発生することを確認\n\n**前提条件**: requirements は completed、design は pending\n\n**入力**:\n```python\nphase_name = \'test_scenario\'\nmetadata = MetadataManager(metadata_path)\nmetadata.update_phase_status(\'requirements\', \'completed\')\n# design は pending のまま\n```\n\n**期待結果**:\n- `DependencyError` 例外が発生\n- 例外の `missing_phases` が `[\'design\']`\n\n**テストデータ**:\n```json\n{\n  "phases": {\n    "requirements": {"status": "completed"},\n    "design": {"status": "pending"},\n    "test_scenario": {"status": "pending"}\n  }\n}\n```\n\n---\n\n#### TC-U-013: skip_check フラグ有効（正常系）\n\n**目的**: skip_check=True の場合、依存関係チェックがスキップされることを確認\n\n**前提条件**: requirements フェーズが pending\n\n**入力**:\n```python\nphase_name = \'design\'\nmetadata = MetadataManager(metadata_path)\nskip_check = True\n```\n\n**期待結果**:\n- 戻り値が `True`\n- 標準出力に `"[WARNING] Dependency check skipped. Proceeding without validation."` が表示される\n- 例外が発生しない（依存関係未満足でも）\n\n**テストデータ**:\n```json\n{\n  "phases": {\n    "requirements": {"status": "pending"},\n    "design": {"status": "pending"}\n  }\n}\n```\n\n---\n\n#### TC-U-014: ignore_violations フラグ有効（警告モード）\n\n**目的**: ignore_violations=True の場合、警告のみ表示して実行継続することを確認\n\n**前提条件**: requirements フェーズが pending\n\n**入力**:\n```python\nphase_name = \'design\'\nmetadata = MetadataManager(metadata_path)\nignore_violations = True\n```\n\n**期待結果**:\n- 戻り値が `True`\n- 標準出力に `"[WARNING] Dependency violation: Phase \'requirements\' is not completed. Continuing anyway."` が表示される\n- 例外が発生しない\n\n**テストデータ**:\n```json\n{\n  "phases": {\n    "requirements": {"status": "pending"},\n    "design": {"status": "pending"}\n  }\n}\n```\n\n---\n\n#### TC-U-015: 未知のフェーズ名（異常系）\n\n**目的**: 存在しないフェーズ名を指定した場合、ValueError が発生することを確認\n\n**前提条件**: メタデータが初期化されている\n\n**入力**:\n```python\nphase_name = \'unknown_phase\'\nmetadata = MetadataManager(metadata_path)\n```\n\n**期待結果**:\n- `ValueError` 例外が発生\n- 例外メッセージに `"Unknown phase: \'unknown_phase\'"` が含まれる\n\n**テストデータ**: なし\n\n---\n\n#### TC-U-016: 複数依存関係すべて未完了（異常系）\n\n**目的**: すべての依存フェーズが未完了の場合、正しくエラーが発生することを確認\n\n**前提条件**: requirements, design, test_scenario すべてが pending\n\n**入力**:\n```python\nphase_name = \'implementation\'\nmetadata = MetadataManager(metadata_path)\n```\n\n**期待結果**:\n- `DependencyError` 例外が発生\n- 例外の `missing_phases` に `\'requirements\'`, `\'design\'`, `\'test_scenario\'` が含まれる\n\n**テストデータ**:\n```json\n{\n  "phases": {\n    "requirements": {"status": "pending"},\n    "design": {"status": "pending"},\n    "test_scenario": {"status": "pending"},\n    "implementation": {"status": "pending"}\n  }\n}\n```\n\n---\n\n### 2.4 `utils/dependency_validator.py` - ユーティリティ関数\n\n#### TC-U-017: get_phase_dependencies() - 正常系\n\n**目的**: 指定フェーズの依存関係リストが正しく取得できることを確認\n\n**前提条件**: なし\n\n**入力**:\n```python\nphase_name = \'design\'\n```\n\n**期待結果**:\n- 戻り値が `[\'requirements\']`\n- コピーされたリストである（元のリストと異なるオブジェクト）\n\n**テストデータ**: なし\n\n---\n\n#### TC-U-018: get_phase_dependencies() - 未知のフェーズ\n\n**目的**: 存在しないフェーズ名を指定した場合、ValueError が発生することを確認\n\n**前提条件**: なし\n\n**入力**:\n```python\nphase_name = \'unknown_phase\'\n```\n\n**期待結果**:\n- `ValueError` 例外が発生\n- 例外メッセージに `"Unknown phase"` が含まれる\n\n**テストデータ**: なし\n\n---\n\n#### TC-U-019: get_all_phase_dependencies() - 正常系\n\n**目的**: すべてのフェーズ依存関係定義が取得できることを確認\n\n**前提条件**: なし\n\n**入力**: なし\n\n**期待結果**:\n- 戻り値が `dict` 型\n- すべてのフェーズ名がキーとして含まれる\n- コピーされた辞書である（元の辞書と異なるオブジェクト）\n\n**テストデータ**: なし\n\n---\n\n### 2.5 `main.py` - CLIオプションパース\n\n#### TC-U-020: --skip-dependency-check フラグのパース\n\n**目的**: --skip-dependency-check フラグが正しくパースされることを確認\n\n**前提条件**: なし\n\n**入力**:\n```bash\npython main.py execute --phase design --issue 319 --skip-dependency-check\n```\n\n**期待結果**:\n- `skip_dependency_check` パラメータが `True`\n- 他のパラメータは正常に設定される\n\n**テストデータ**: 上記コマンドライン引数\n\n---\n\n#### TC-U-021: --ignore-dependencies フラグのパース\n\n**目的**: --ignore-dependencies フラグが正しくパースされることを確認\n\n**前提条件**: なし\n\n**入力**:\n```bash\npython main.py execute --phase design --issue 319 --ignore-dependencies\n```\n\n**期待結果**:\n- `ignore_dependencies` パラメータが `True`\n- 他のパラメータは正常に設定される\n\n**テストデータ**: 上記コマンドライン引数\n\n---\n\n#### TC-U-022: --preset オプションのパース\n\n**目的**: --preset オプションが正しくパースされることを確認\n\n**前提条件**: なし\n\n**入力**:\n```bash\npython main.py execute --preset design-phase --issue 319\n```\n\n**期待結果**:\n- `preset` パラメータが `\'design-phase\'`\n- プリセットに応じて実行フェーズが決定される\n\n**テストデータ**: 上記コマンドライン引数\n\n---\n\n#### TC-U-023: --preset と --phase の同時指定（異常系）\n\n**目的**: --preset と --phase を同時指定した場合、エラーが発生することを確認\n\n**前提条件**: なし\n\n**入力**:\n```bash\npython main.py execute --preset design-phase --phase implementation --issue 319\n```\n\n**期待結果**:\n- エラーメッセージ `"--preset and --phase cannot be used together"` が表示される\n- 終了コード 1 で終了\n\n**テストデータ**: 上記コマンドライン引数\n\n---\n\n#### TC-U-024: --skip-dependency-check と --ignore-dependencies の同時指定（異常系）\n\n**目的**: 相互排他的なフラグを同時指定した場合、エラーが発生することを確認\n\n**前提条件**: なし\n\n**入力**:\n```bash\npython main.py execute --phase design --issue 319 --skip-dependency-check --ignore-dependencies\n```\n\n**期待結果**:\n- エラーメッセージ `"--skip-dependency-check and --ignore-dependencies are mutually exclusive"` が表示される\n- 終了コード 1 で終了\n\n**テストデータ**: 上記コマンドライン引数\n\n---\n\n#### TC-U-025: プリセットマッピング - requirements-only\n\n**目的**: requirements-only プリセットが正しく解釈されることを確認\n\n**前提条件**: なし\n\n**入力**:\n```python\npreset = \'requirements-only\'\n```\n\n**期待結果**:\n- 実行フェーズが `\'requirements\'` に設定される\n\n**テストデータ**: 上記プリセット値\n\n---\n\n#### TC-U-026: プリセットマッピング - design-phase\n\n**目的**: design-phase プリセットが正しく解釈されることを確認\n\n**前提条件**: なし\n\n**入力**:\n```python\npreset = \'design-phase\'\n```\n\n**期待結果**:\n- 実行フェーズが `\'design\'` に設定される（Phase 1-2を実行）\n\n**テストデータ**: 上記プリセット値\n\n---\n\n#### TC-U-027: プリセットマッピング - implementation-phase\n\n**目的**: implementation-phase プリセットが正しく解釈されることを確認\n\n**前提条件**: なし\n\n**入力**:\n```python\npreset = \'implementation-phase\'\n```\n\n**期待結果**:\n- 実行フェーズが `\'implementation\'` に設定される（Phase 1-4を実行）\n\n**テストデータ**: 上記プリセット値\n\n---\n\n#### TC-U-028: プリセットマッピング - full-workflow\n\n**目的**: full-workflow プリセットが正しく解釈されることを確認\n\n**前提条件**: なし\n\n**入力**:\n```python\npreset = \'full-workflow\'\n```\n\n**期待結果**:\n- 実行フェーズが `\'all\'` に設定される\n\n**テストデータ**: 上記プリセット値\n\n---\n\n### 2.6 `main.py` - 依存関係チェック統合\n\n#### TC-U-029: 個別フェーズ実行時の依存関係チェック呼び出し\n\n**目的**: phase != \'all\' の場合、依存関係チェックが呼び出されることを確認\n\n**前提条件**: メタデータが初期化されている\n\n**入力**:\n```python\nphase = \'design\'\nskip_dependency_check = False\nignore_dependencies = False\n```\n\n**期待結果**:\n- `validate_phase_dependencies()` が呼び出される\n- 依存関係が満たされていない場合、エラーメッセージとヒントが表示される\n\n**テストデータ**: モックされたメタデータ\n\n---\n\n#### TC-U-030: phase=\'all\' の場合、依存関係チェックをスキップ\n\n**目的**: phase=\'all\' の場合、個別の依存関係チェックが実行されないことを確認\n\n**前提条件**: メタデータが初期化されている\n\n**入力**:\n```python\nphase = \'all\'\n```\n\n**期待結果**:\n- `validate_phase_dependencies()` が呼び出されない\n- 全フェーズが順次実行される\n\n**テストデータ**: モックされたメタデータ\n\n---\n\n#### TC-U-031: DependencyError 発生時のエラーハンドリング\n\n**目的**: DependencyError 発生時に適切なエラーメッセージとヒントが表示されることを確認\n\n**前提条件**: 依存関係が満たされていない\n\n**入力**:\n```python\nphase = \'design\'\n# requirements が未完了\n```\n\n**期待結果**:\n- エラーメッセージ `"[ERROR] Dependency check failed: Phase \'requirements\' must be completed before \'design\'"` が表示される\n- ヒント1: `"[INFO] Hint: Use --skip-dependency-check to bypass this check."` が表示される\n- ヒント2: `"[INFO] Hint: Use --ignore-dependencies to show warnings only."` が表示される\n- 終了コード 1 で終了\n\n**テストデータ**: モックされたメタデータ\n\n---\n\n### 2.7 `phases/base_phase.py` - run() メソッド統合\n\n#### TC-U-032: run() メソッド開始時の依存関係チェック\n\n**目的**: run() メソッド開始時に依存関係チェックが実行されることを確認\n\n**前提条件**: フェーズインスタンスが作成されている\n\n**入力**:\n```python\nphase = DesignPhase(...)\nphase.run()\n```\n\n**期待結果**:\n- `validate_phase_dependencies()` が呼び出される\n- 依存関係が満たされている場合、フェーズ実行が継続される\n\n**テストデータ**: モックされたメタデータ\n\n---\n\n#### TC-U-033: run() メソッドでの DependencyError ハンドリング\n\n**目的**: run() メソッド内で DependencyError が発生した場合、適切に処理されることを確認\n\n**前提条件**: 依存関係が満たされていない\n\n**入力**:\n```python\nphase = DesignPhase(...)\nphase.run()\n```\n\n**期待結果**:\n- エラーメッセージが表示される\n- フェーズステータスが `\'failed\'` に更新される\n- GitHub Issue にエラーメッセージが投稿される（モック確認）\n- 戻り値が `False`\n\n**テストデータ**: モックされたメタデータ\n\n---\n\n#### TC-U-034: run() メソッドでの skip_check フラグ確認\n\n**目的**: メタデータから skip_dependency_check フラグが正しく読み取られることを確認\n\n**前提条件**: メタデータに skip_dependency_check が設定されている\n\n**入力**:\n```python\nmetadata.data[\'skip_dependency_check\'] = True\nphase = DesignPhase(...)\nphase.run()\n```\n\n**期待結果**:\n- `validate_phase_dependencies()` に `skip_check=True` が渡される\n- 依存関係チェックがスキップされる\n\n**テストデータ**: skip_dependency_check=True のメタデータ\n\n---\n\n#### TC-U-035: run() メソッドでの ignore_violations フラグ確認\n\n**目的**: メタデータから ignore_dependencies フラグが正しく読み取られることを確認\n\n**前提条件**: メタデータに ignore_dependencies が設定されている\n\n**入力**:\n```python\nmetadata.data[\'ignore_dependencies\'] = True\nphase = DesignPhase(...)\nphase.run()\n```\n\n**期待結果**:\n- `validate_phase_dependencies()` に `ignore_violations=True` が渡される\n- 依存関係違反時も警告のみ表示して実行継続\n\n**テストデータ**: ignore_dependencies=True のメタデータ\n\n---\n\n## 3. Integrationテストシナリオ\n\n### 3.1 CLI実行フロー全体テスト\n\n#### TC-I-001: 正常フロー - 依存関係満たされた状態でのフェーズ実行\n\n**目的**: 依存関係が満たされている場合、フェーズが正常に実行されることを確認\n\n**前提条件**:\n- ワークフローが初期化されている\n- requirements フェーズが completed\n\n**テスト手順**:\n1. `python main.py init --issue-url https://github.com/test/test/issues/319` を実行\n2. metadata.json を編集し、requirements フェーズを completed に設定\n3. `python main.py execute --phase design --issue 319` を実行\n\n**期待結果**:\n- 終了コード 0\n- design フェーズが正常に実行される\n- 依存関係チェック成功のメッセージが表示される\n- フェーズステータスが completed に更新される\n\n**確認項目**:\n- [ ] 終了コード確認\n- [ ] 標準出力に `"[INFO] Dependency check passed"` が含まれる\n- [ ] metadata.json の design フェーズステータスが completed\n- [ ] 成果物ファイルが作成されている\n\n---\n\n#### TC-I-002: 異常フロー - 依存関係未満足でのフェーズ実行エラー\n\n**目的**: 依存関係が満たされていない場合、エラーで実行が停止することを確認\n\n**前提条件**:\n- ワークフローが初期化されている\n- requirements フェーズが pending\n\n**テスト手順**:\n1. `python main.py init --issue-url https://github.com/test/test/issues/319` を実行\n2. `python main.py execute --phase design --issue 319` を実行（requirements は pending のまま）\n\n**期待結果**:\n- 終了コード 1\n- エラーメッセージ `"[ERROR] Dependency check failed: Phase \'requirements\' must be completed before \'design\'"` が表示される\n- ヒントメッセージが表示される\n- design フェーズが実行されない\n\n**確認項目**:\n- [ ] 終了コード確認\n- [ ] エラーメッセージ確認\n- [ ] ヒントメッセージ確認\n- [ ] design フェーズの成果物が作成されていない\n- [ ] metadata.json の design フェーズステータスが pending のまま\n\n---\n\n#### TC-I-003: --skip-dependency-check フラグ使用時の動作\n\n**目的**: --skip-dependency-check フラグを使用した場合、依存関係チェックがスキップされることを確認\n\n**前提条件**:\n- ワークフローが初期化されている\n- requirements フェーズが pending\n\n**テスト手順**:\n1. `python main.py init --issue-url https://github.com/test/test/issues/319` を実行\n2. `python main.py execute --phase design --issue 319 --skip-dependency-check` を実行\n\n**期待結果**:\n- 警告メッセージ `"[WARNING] Dependency check skipped. Proceeding without validation."` が表示される\n- design フェーズの実行が試行される（ファイル不在等で失敗する可能性はある）\n- 依存関係チェックによるエラーは発生しない\n\n**確認項目**:\n- [ ] 警告メッセージ確認\n- [ ] 依存関係チェックエラーが発生しない\n- [ ] フェーズ実行が試行される\n\n---\n\n#### TC-I-004: --ignore-dependencies フラグ使用時の動作\n\n**目的**: --ignore-dependencies フラグを使用した場合、警告のみ表示して実行継続することを確認\n\n**前提条件**:\n- ワークフローが初期化されている\n- requirements フェーズが pending\n\n**テスト手順**:\n1. `python main.py init --issue-url https://github.com/test/test/issues/319` を実行\n2. `python main.py execute --phase design --issue 319 --ignore-dependencies` を実行\n\n**期待結果**:\n- 警告メッセージ `"[WARNING] Dependency violation: Phase \'requirements\' is not completed. Continuing anyway."` が表示される\n- design フェーズの実行が試行される\n- エラーで終了しない\n\n**確認項目**:\n- [ ] 警告メッセージ確認\n- [ ] 依存関係違反エラーで終了しない\n- [ ] フェーズ実行が試行される\n\n---\n\n#### TC-I-005: プリセット実行 - requirements-only\n\n**目的**: requirements-only プリセットで requirements フェーズのみが実行されることを確認\n\n**前提条件**:\n- ワークフローが初期化されている\n\n**テスト手順**:\n1. `python main.py init --issue-url https://github.com/test/test/issues/319` を実行\n2. `python main.py execute --preset requirements-only --issue 319` を実行\n\n**期待結果**:\n- requirements フェーズのみが実行される\n- 他のフェーズは実行されない\n- 終了コード 0\n\n**確認項目**:\n- [ ] requirements フェーズの成果物が作成されている\n- [ ] metadata.json の requirements ステータスが completed\n- [ ] 他のフェーズのステータスが pending のまま\n\n---\n\n#### TC-I-006: プリセット実行 - design-phase\n\n**目的**: design-phase プリセットで Phase 1-2 が実行されることを確認\n\n**前提条件**:\n- ワークフローが初期化されている\n\n**テスト手順**:\n1. `python main.py init --issue-url https://github.com/test/test/issues/319` を実行\n2. `python main.py execute --preset design-phase --issue 319` を実行\n\n**期待結果**:\n- requirements と design フェーズが順次実行される\n- 依存関係チェックが自動的に有効\n- 終了コード 0\n\n**確認項目**:\n- [ ] requirements と design の成果物が作成されている\n- [ ] metadata.json で両フェーズが completed\n- [ ] 他のフェーズは実行されていない\n\n---\n\n#### TC-I-007: プリセット実行 - implementation-phase\n\n**目的**: implementation-phase プリセットで Phase 1-4 が実行されることを確認\n\n**前提条件**:\n- ワークフローが初期化されている\n\n**テスト手順**:\n1. `python main.py init --issue-url https://github.com/test/test/issues/319` を実行\n2. `python main.py execute --preset implementation-phase --issue 319` を実行\n\n**期待結果**:\n- requirements, design, test_scenario, implementation フェーズが順次実行される\n- 依存関係が自動的に満たされる\n- 終了コード 0\n\n**確認項目**:\n- [ ] 4つのフェーズすべての成果物が作成されている\n- [ ] metadata.json で4つのフェーズが completed\n- [ ] Phase 5以降は実行されていない\n\n---\n\n#### TC-I-008: プリセットとphaseの同時指定エラー\n\n**目的**: --preset と --phase を同時指定した場合、エラーで終了することを確認\n\n**前提条件**:\n- ワークフローが初期化されている\n\n**テスト手順**:\n1. `python main.py execute --preset design-phase --phase implementation --issue 319` を実行\n\n**期待結果**:\n- エラーメッセージ `"[ERROR] --preset and --phase cannot be used together"` が表示される\n- 終了コード 1\n- フェーズが実行されない\n\n**確認項目**:\n- [ ] エラーメッセージ確認\n- [ ] 終了コード確認\n- [ ] フェーズが実行されていない\n\n---\n\n### 3.2 複数依存関係のテスト\n\n#### TC-I-009: 複数依存関係 - すべて満たされている場合\n\n**目的**: implementation フェーズの複数依存関係がすべて満たされている場合、正常実行されることを確認\n\n**前提条件**:\n- requirements, design, test_scenario が completed\n\n**テスト手順**:\n1. ワークフロー初期化\n2. metadata.json を編集し、requirements, design, test_scenario を completed に設定\n3. `python main.py execute --phase implementation --issue 319` を実行\n\n**期待結果**:\n- 依存関係チェック成功\n- implementation フェーズが実行される\n- 終了コード 0\n\n**確認項目**:\n- [ ] 依存関係チェック成功メッセージ確認\n- [ ] implementation フェーズの成果物が作成される\n- [ ] metadata.json の implementation ステータスが completed\n\n---\n\n#### TC-I-010: 複数依存関係 - 一部未満足の場合\n\n**目的**: implementation フェーズの依存関係のうち一部が未満足の場合、エラーで停止することを確認\n\n**前提条件**:\n- requirements と design は completed、test_scenario は pending\n\n**テスト手順**:\n1. ワークフロー初期化\n2. metadata.json を編集し、requirements と design を completed に設定（test_scenario は pending のまま）\n3. `python main.py execute --phase implementation --issue 319` を実行\n\n**期待結果**:\n- エラーメッセージに test_scenario が未完了であることが表示される\n- 終了コード 1\n- implementation フェーズが実行されない\n\n**確認項目**:\n- [ ] エラーメッセージに \'test_scenario\' が含まれる\n- [ ] 終了コード確認\n- [ ] implementation フェーズが実行されていない\n\n---\n\n#### TC-I-011: report フェーズの複雑な依存関係\n\n**目的**: report フェーズの複数依存関係（requirements, design, implementation, testing, documentation）が正しくチェックされることを確認\n\n**前提条件**:\n- requirements, design, implementation, testing は completed、documentation は pending\n\n**テスト手順**:\n1. ワークフロー初期化\n2. metadata.json を編集（上記前提条件に設定）\n3. `python main.py execute --phase report --issue 319` を実行\n\n**期待結果**:\n- エラーメッセージに documentation が未完了であることが表示される\n- 終了コード 1\n\n**確認項目**:\n- [ ] エラーメッセージに \'documentation\' が含まれる\n- [ ] 他の未完了フェーズがある場合、それらも表示される\n- [ ] 終了コード確認\n\n---\n\n### 3.3 BasePhase.run() 統合テスト\n\n#### TC-I-012: BasePhase.run() 経由での依存関係チェック\n\n**目的**: BasePhase.run() メソッドを直接呼び出した場合、依存関係チェックが実行されることを確認\n\n**前提条件**:\n- requirements フェーズが pending\n\n**テスト手順**:\n1. ワークフロー初期化\n2. Python コードから DesignPhase インスタンスを作成\n3. `phase.run()` を直接呼び出し\n\n**期待結果**:\n- 依存関係チェックが実行される\n- DependencyError が発生\n- フェーズステータスが failed に更新される\n- 戻り値が False\n\n**確認項目**:\n- [ ] DependencyError 発生確認\n- [ ] フェーズステータスが failed\n- [ ] GitHub Issue にエラーコメントが投稿される（モック確認）\n- [ ] run() の戻り値が False\n\n---\n\n#### TC-I-013: BasePhase.run() でのスキップフラグ動作\n\n**目的**: BasePhase.run() 呼び出し時、メタデータの skip_dependency_check フラグが考慮されることを確認\n\n**前提条件**:\n- requirements フェーズが pending\n- metadata に skip_dependency_check=True が設定されている\n\n**テスト手順**:\n1. ワークフロー初期化\n2. metadata.json に `"skip_dependency_check": true` を追加\n3. DesignPhase.run() を呼び出し\n\n**期待結果**:\n- 依存関係チェックがスキップされる\n- フェーズ実行が試行される\n- DependencyError が発生しない\n\n**確認項目**:\n- [ ] 警告メッセージ `"Dependency check skipped"` 確認\n- [ ] DependencyError が発生しない\n- [ ] フェーズ実行が試行される\n\n---\n\n### 3.4 エラーハンドリングとリカバリ\n\n#### TC-I-014: 依存関係エラー後のリカバリ\n\n**目的**: 依存関係エラー発生後、依存フェーズを完了させれば次回実行できることを確認\n\n**前提条件**:\n- ワークフローが初期化されている\n\n**テスト手順**:\n1. `python main.py execute --phase design --issue 319` を実行（エラー発生）\n2. `python main.py execute --phase requirements --issue 319` を実行\n3. 再度 `python main.py execute --phase design --issue 319` を実行\n\n**期待結果**:\n- 1回目はエラーで終了\n- 2回目で requirements が completed\n- 3回目で design が正常実行される\n\n**確認項目**:\n- [ ] 1回目の終了コードが 1\n- [ ] 2回目の終了コードが 0\n- [ ] 3回目の終了コードが 0\n- [ ] metadata.json で両フェーズが completed\n\n---\n\n#### TC-I-015: 相互排他フラグ指定時のエラー\n\n**目的**: --skip-dependency-check と --ignore-dependencies を同時指定した場合、エラーで終了することを確認\n\n**前提条件**:\n- ワークフローが初期化されている\n\n**テスト手順**:\n1. `python main.py execute --phase design --issue 319 --skip-dependency-check --ignore-dependencies` を実行\n\n**期待結果**:\n- エラーメッセージ `"[ERROR] --skip-dependency-check and --ignore-dependencies are mutually exclusive"` が表示される\n- 終了コード 1\n- フェーズが実行されない\n\n**確認項目**:\n- [ ] エラーメッセージ確認\n- [ ] 終了コード確認\n- [ ] フェーズが実行されていない\n\n---\n\n### 3.5 Phase 0-9 全体の依存関係フロー\n\n#### TC-I-016: 全フェーズ順次実行時の依存関係チェック\n\n**目的**: 全フェーズを順次実行する場合、依存関係チェックが各フェーズで正しく機能することを確認\n\n**前提条件**:\n- ワークフローが初期化されている\n\n**テスト手順**:\n1. `python main.py execute --preset full-workflow --issue 319` を実行\n\n**期待結果**:\n- Phase 0-9 が順次実行される\n- 各フェーズ実行前に依存関係チェックが成功する\n- すべてのフェーズが completed になる\n- 終了コード 0\n\n**確認項目**:\n- [ ] すべてのフェーズが順次実行される\n- [ ] 各フェーズで依存関係チェック成功メッセージが表示される\n- [ ] metadata.json ですべてのフェーズが completed\n- [ ] 終了コード 0\n\n---\n\n#### TC-I-017: 途中フェーズからの実行（中断・再開シナリオ）\n\n**目的**: Phase 3 まで実行後、Phase 4 から再開する場合、依存関係が正しく認識されることを確認\n\n**前提条件**:\n- requirements, design, test_scenario が completed\n\n**テスト手順**:\n1. metadata.json を編集し、Phase 1-3 を completed に設定\n2. `python main.py execute --phase implementation --issue 319` を実行\n\n**期待結果**:\n- 依存関係チェックが成功\n- implementation フェーズが実行される\n- 終了コード 0\n\n**確認項目**:\n- [ ] 依存関係チェック成功メッセージ確認\n- [ ] implementation フェーズが実行される\n- [ ] 前フェーズの成果物が読み込まれる\n\n---\n\n### 3.6 パフォーマンステスト\n\n#### TC-I-018: 依存関係チェックの実行時間\n\n**目的**: 依存関係チェックが NFR-1.1（100ms以内）を満たすことを確認\n\n**前提条件**:\n- メタデータが初期化されている\n\n**テスト手順**:\n1. 各フェーズに対して `validate_phase_dependencies()` を100回実行\n2. 実行時間を計測\n\n**期待結果**:\n- 平均実行時間が 100ms 以内\n- 最大実行時間が 150ms 以内\n\n**確認項目**:\n- [ ] 平均実行時間測定\n- [ ] 最大実行時間測定\n- [ ] メモリ使用量が増加しない\n\n---\n\n## 4. テストデータ\n\n### 4.1 メタデータテストデータ\n\n#### データセット1: 初期状態（すべて pending）\n\n```json\n{\n  "workflow_version": "1.0.0",\n  "issue_number": "319",\n  "issue_url": "https://github.com/tielec/infrastructure-as-code/issues/319",\n  "issue_title": "[FEATURE] AIワークフロー: フェーズ依存関係の柔軟化と選択的実行機能",\n  "phases": {\n    "planning": {"status": "pending"},\n    "requirements": {"status": "pending"},\n    "design": {"status": "pending"},\n    "test_scenario": {"status": "pending"},\n    "implementation": {"status": "pending"},\n    "test_implementation": {"status": "pending"},\n    "testing": {"status": "pending"},\n    "documentation": {"status": "pending"},\n    "report": {"status": "pending"},\n    "evaluation": {"status": "pending"}\n  }\n}\n```\n\n#### データセット2: Phase 1 完了状態\n\n```json\n{\n  "workflow_version": "1.0.0",\n  "issue_number": "319",\n  "issue_url": "https://github.com/tielec/infrastructure-as-code/issues/319",\n  "issue_title": "[FEATURE] AIワークフロー: フェーズ依存関係の柔軟化と選択的実行機能",\n  "phases": {\n    "planning": {"status": "completed"},\n    "requirements": {"status": "completed"},\n    "design": {"status": "pending"},\n    "test_scenario": {"status": "pending"},\n    "implementation": {"status": "pending"},\n    "test_implementation": {"status": "pending"},\n    "testing": {"status": "pending"},\n    "documentation": {"status": "pending"},\n    "report": {"status": "pending"},\n    "evaluation": {"status": "pending"}\n  }\n}\n```\n\n#### データセット3: Phase 1-3 完了状態\n\n```json\n{\n  "workflow_version": "1.0.0",\n  "issue_number": "319",\n  "issue_url": "https://github.com/tielec/infrastructure-as-code/issues/319",\n  "issue_title": "[FEATURE] AIワークフロー: フェーズ依存関係の柔軟化と選択的実行機能",\n  "phases": {\n    "planning": {"status": "completed"},\n    "requirements": {"status": "completed"},\n    "design": {"status": "completed"},\n    "test_scenario": {"status": "completed"},\n    "implementation": {"status": "pending"},\n    "test_implementation": {"status": "pending"},\n    "testing": {"status": "pending"},\n    "documentation": {"status": "pending"},\n    "report": {"status": "pending"},\n    "evaluation": {"status": "pending"}\n  }\n}\n```\n\n#### データセット4: 部分的完了（design 未完了）\n\n```json\n{\n  "workflow_version": "1.0.0",\n  "issue_number": "319",\n  "issue_url": "https://github.com/tielec/infrastructure-as-code/issues/319",\n  "issue_title": "[FEATURE] AIワークフロー: フェーズ依存関係の柔軟化と選択的実行機能",\n  "phases": {\n    "planning": {"status": "completed"},\n    "requirements": {"status": "completed"},\n    "design": {"status": "pending"},\n    "test_scenario": {"status": "completed"},\n    "implementation": {"status": "pending"},\n    "test_implementation": {"status": "pending"},\n    "testing": {"status": "pending"},\n    "documentation": {"status": "pending"},\n    "report": {"status": "pending"},\n    "evaluation": {"status": "pending"}\n  }\n}\n```\n\n### 4.2 CLIコマンドテストデータ\n\n#### 正常系コマンド\n\n```bash\n# 基本実行\npython main.py execute --phase requirements --issue 319\n\n# スキップフラグ\npython main.py execute --phase design --issue 319 --skip-dependency-check\n\n# 無視フラグ\npython main.py execute --phase design --issue 319 --ignore-dependencies\n\n# プリセット\npython main.py execute --preset requirements-only --issue 319\npython main.py execute --preset design-phase --issue 319\npython main.py execute --preset implementation-phase --issue 319\npython main.py execute --preset full-workflow --issue 319\n```\n\n#### 異常系コマンド\n\n```bash\n# 相互排他フラグ\npython main.py execute --phase design --issue 319 --skip-dependency-check --ignore-dependencies\n\n# プリセットとphase同時指定\npython main.py execute --preset design-phase --phase implementation --issue 319\n\n# 未知のフェーズ\npython main.py execute --phase unknown --issue 319\n\n# 未知のプリセット\npython main.py execute --preset unknown-preset --issue 319\n```\n\n### 4.3 境界値テストデータ\n\n#### フェーズ名の境界値\n\n- 最短フェーズ名: なし（すべて実在するフェーズ名）\n- 最長フェーズ名: `test_implementation` (19文字)\n- 空文字列: `""` （エラー期待）\n- None: `None` （エラー期待）\n\n#### 依存関係の境界値\n\n- 依存なし: `requirements` (空リスト)\n- 単一依存: `design` (1要素)\n- 複数依存: `implementation` (3要素), `report` (5要素)\n\n---\n\n## 5. テスト環境要件\n\n### 5.1 ローカル開発環境\n\n#### 必須コンポーネント\n- Python 3.8以上\n- pytest 6.0以上\n- pytest-mock\n- pytest-timeout\n- click（CLIテスト用）\n\n#### 環境変数\n- `GITHUB_TOKEN`: GitHub API アクセス用（Integration テストで必要）\n\n#### ディレクトリ構造\n```\nscripts/ai-workflow/\n├── utils/\n│   └── dependency_validator.py\n├── phases/\n│   └── base_phase.py\n├── main.py\n├── tests/\n│   ├── unit/\n│   │   ├── utils/\n│   │   │   └── test_dependency_validator.py\n│   │   ├── test_main.py\n│   │   └── phases/\n│   │       └── test_base_phase.py\n│   └── integration/\n│       └── test_dependency_check_integration.py\n└── .ai-workflow/\n    └── issue-319/\n        └── metadata.json\n```\n\n### 5.2 CI/CD環境（Jenkins）\n\n#### 必須要件\n- Python 3.8ランタイム\n- pytest実行環境\n- Gitリポジトリアクセス\n- GitHub API アクセス権限\n\n#### テスト実行コマンド\n```bash\n# Unitテスト\npytest tests/unit/ -v --tb=short\n\n# Integrationテスト\npytest tests/integration/ -v --tb=short\n\n# すべてのテスト\npytest tests/ -v --tb=short --cov=scripts/ai-workflow\n```\n\n### 5.3 モック/スタブ要件\n\n#### モックが必要なコンポーネント\n\n1. **MetadataManager**:\n   - `get_phase_status()`: フェーズステータスの取得\n   - `update_phase_status()`: フェーズステータスの更新\n   - `data`: メタデータ辞書のアクセス\n\n2. **GitManager**:\n   - Gitコミット・プッシュ操作（Integration テストでは実際の Git 操作はスキップ）\n\n3. **GitHub API**:\n   - Issue コメント投稿（モックで代替）\n   - 進捗報告（モックで代替）\n\n4. **Claude API**:\n   - フェーズ実行時の AI 呼び出し（Integration テストでは必要に応じてモック）\n\n#### スタブが必要なコンポーネント\n\n1. **ファイルシステム**:\n   - 一時ディレクトリ（`pytest` の `tmp_path` フィクスチャ使用）\n   - メタデータファイル（テンポラリに作成）\n\n2. **成果物ファイル**:\n   - Unitテストではファイル存在チェックのみスタブ\n   - Integrationテストでは実際のファイル作成を確認\n\n---\n\n## 6. テスト実行計画\n\n### 6.1 テスト実行順序\n\n#### Phase 1: Unitテスト（優先度: 高）\n1. `test_dependency_validator.py` 実行\n2. `test_main.py` 拡張テスト実行\n3. `test_base_phase.py` 拡張テスト実行\n\n**完了条件**: すべての Unit テストが成功し、カバレッジ目標達成\n\n#### Phase 2: Integrationテスト（優先度: 高）\n1. `test_dependency_check_integration.py` 実行\n2. 既存 E2E テスト修正後の実行\n\n**完了条件**: すべての Integration テストが成功\n\n#### Phase 3: 回帰テスト（優先度: 中）\n1. 既存の全 Unit テスト実行\n2. 既存の全 Integration テスト実行\n3. 既存の全 E2E テスト実行\n\n**完了条件**: すべての既存テストが引き続き成功\n\n### 6.2 テストスケジュール\n\n| フェーズ | テスト種別 | 見積工数 | 担当 |\n|---------|-----------|---------|------|\n| Phase 1 | Unitテスト作成・実行 | 3日 | 開発者 |\n| Phase 2 | Integrationテスト作成・実行 | 2日 | 開発者 |\n| Phase 3 | 回帰テスト実行 | 1日 | QA |\n| **合計** | | **6日** | |\n\n### 6.3 テスト自動化\n\n#### CI/CDパイプライン統合\n\n```yaml\n# Jenkinsfile 例\nstage(\'Test\') {\n    steps {\n        sh \'pytest tests/unit/ -v --tb=short --cov=scripts/ai-workflow\'\n        sh \'pytest tests/integration/ -v --tb=short\'\n    }\n}\n```\n\n#### テストレポート生成\n\n- JUnit XML形式のレポート出力\n- カバレッジレポート（HTML形式）\n- 失敗時のスクリーンショット・ログ保存\n\n---\n\n## 7. 品質ゲート確認\n\n### チェックリスト\n\n- [x] **Phase 2の戦略に沿ったテストシナリオである**: UNIT_INTEGRATION 戦略に基づき、Unit テストと Integration テストのシナリオを作成\n- [x] **主要な正常系がカバーされている**:\n  - 依存関係満たされた状態でのフェーズ実行（TC-U-010, TC-I-001）\n  - プリセット実行（TC-I-005, TC-I-006, TC-I-007）\n  - 全フェーズ順次実行（TC-I-016）\n- [x] **主要な異常系がカバーされている**:\n  - 依存関係違反（TC-U-011, TC-I-002）\n  - 複数依存関係の一部未満足（TC-U-012, TC-I-010）\n  - 未知のフェーズ名（TC-U-015）\n  - 相互排他フラグの同時指定（TC-U-024, TC-I-015）\n- [x] **期待結果が明確である**: すべてのテストケースで具体的な期待結果を記載\n\n---\n\n## 8. リスクとその対策\n\n### リスク1: テストデータ準備の複雑さ\n\n**リスク内容**: 複数依存関係のテストケースでメタデータの準備が複雑\n\n**対策**:\n- pytest フィクスチャでテストデータセットを事前定義\n- ヘルパー関数でメタデータ生成を簡略化\n\n**影響度**: 中\n**発生確率**: 中\n\n---\n\n### リスク2: モックの不完全性\n\n**リスク内容**: MetadataManager のモックが実際の挙動と異なる可能性\n\n**対策**:\n- Integration テストで実際の MetadataManager を使用\n- Unit テストのモックは最小限に留める\n\n**影響度**: 中\n**発生確率**: 低\n\n---\n\n### リスク3: 既存テストの破損\n\n**リスク内容**: 依存関係チェック追加により既存 E2E テストが失敗する可能性\n\n**対策**:\n- 既存テスト修正方針を設計書で明記済み（Phase 0-3 完了状態の設定）\n- 回帰テストフェーズで全テスト実行\n\n**影響度**: 高\n**発生確率**: 高\n\n**緩和策**: 設計書のセクション11.3に従い、既存 E2E テストを体系的に修正\n\n---\n\n## 9. テスト実行基準\n\n### 9.1 テスト開始基準\n\n- [ ] `utils/dependency_validator.py` の実装が完了している\n- [ ] `main.py` の CLI オプション追加が完了している\n- [ ] `phases/base_phase.py` の修正が完了している\n- [ ] テスト環境（Python 3.8、pytest）が準備されている\n\n### 9.2 テスト完了基準\n\n- [ ] すべての Unit テストが成功（35テストケース）\n- [ ] すべての Integration テストが成功（18テストケース）\n- [ ] ラインカバレッジが 90% 以上\n- [ ] ブランチカバレッジが 85% 以上\n- [ ] すべての既存テストが引き続き成功（回帰テスト）\n- [ ] クリティカルパスのテストケースが 100% 成功\n\n### 9.3 テスト中断基準\n\n- [ ] 実装に重大なバグが発見され、テスト続行不可能\n- [ ] テスト環境の障害\n- [ ] 設計変更が必要な問題が発見された場合\n\n---\n\n## 10. 付録\n\n### 10.1 テストケースサマリー\n\n| カテゴリ | テストケース数 | 優先度 |\n|---------|--------------|--------|\n| Unit - PHASE_DEPENDENCIES | 5 | 高 |\n| Unit - DependencyError | 3 | 高 |\n| Unit - validate_phase_dependencies | 8 | 高 |\n| Unit - ユーティリティ関数 | 3 | 中 |\n| Unit - main.py CLI | 9 | 高 |\n| Unit - main.py 依存関係統合 | 3 | 高 |\n| Unit - base_phase.py | 4 | 高 |\n| Integration - CLI実行フロー | 8 | 高 |\n| Integration - 複数依存関係 | 3 | 高 |\n| Integration - BasePhase統合 | 2 | 中 |\n| Integration - エラーハンドリング | 2 | 中 |\n| Integration - 全体フロー | 2 | 高 |\n| Integration - パフォーマンス | 1 | 低 |\n| **合計** | **53** | |\n\n### 10.2 カバレッジマトリクス\n\n| 要件ID | テストケース | カバレッジステータス |\n|--------|------------|------------------|\n| FR-1 | TC-U-001 〜 TC-U-005 | ✓ |\n| FR-2 | TC-U-009 〜 TC-U-016 | ✓ |\n| FR-3 | TC-U-013, TC-I-003 | ✓ |\n| FR-4 | TC-U-014, TC-I-004 | ✓ |\n| FR-6 | TC-I-005 〜 TC-I-008 | ✓ |\n| FR-7 | TC-U-032 〜 TC-U-035, TC-I-012, TC-I-013 | ✓ |\n\n### 10.3 用語集\n\n| 用語 | 説明 |\n|------|------|\n| DependencyError | 依存関係違反時に発生するカスタム例外 |\n| PHASE_DEPENDENCIES | フェーズ依存関係を定義する定数辞書 |\n| skip_check | 依存関係チェックを完全にスキップするフラグ |\n| ignore_violations | 依存関係違反時も警告のみ表示するフラグ |\n| プリセット | よくある実行パターンの事前定義（requirements-only, design-phase等） |\n\n---\n\n## 変更履歴\n\n| バージョン | 日付 | 変更内容 | 作成者 |\n|----------|------|---------|--------|\n| 1.0 | 2025-10-12 | 初版作成 | Claude (AI Workflow) |\n'})], model='claude-sonnet-4-5-20250929', parent_tool_use_id=None)

UserMessage(content=[ToolResultBlock(tool_use_id='toolu_01SyEFiSv21CD9iB8zXydThZ', content='File created successfully at: /tmp/jenkins-c60d3df6/workspace/AI_Workflow/ai_workflow_orchestrator/.ai-workflow/issue-319/03_test_scenario/output/test-scenario.md', is_error=None)], parent_tool_use_id=None)

AssistantMessage(content=[ToolUseBlock(id='toolu_014rok76Ji8qyhUvBKGrnyn4', name='TodoWrite', input={'todos': [{'content': 'Analyze requirements and design documents to understand test scope', 'status': 'completed', 'activeForm': 'Analyzing requirements and design documents'}, {'content': 'Create test strategy summary based on UNIT_INTEGRATION approach', 'status': 'completed', 'activeForm': 'Creating test strategy summary'}, {'content': 'Design Unit test scenarios for dependency_validator.py', 'status': 'completed', 'activeForm': 'Designing Unit test scenarios for dependency_validator.py'}, {'content': 'Design Unit test scenarios for main.py CLI options', 'status': 'completed', 'activeForm': 'Designing Unit test scenarios for main.py CLI options'}, {'content': 'Design Unit test scenarios for base_phase.py integration', 'status': 'completed', 'activeForm': 'Designing Unit test scenarios for base_phase.py integration'}, {'content': 'Design Integration test scenarios for end-to-end dependency checking', 'status': 'completed', 'activeForm': 'Designing Integration test scenarios'}, {'content': 'Define test data and environment requirements', 'status': 'completed', 'activeForm': 'Defining test data and environment requirements'}, {'content': 'Write test-scenario.md document', 'status': 'completed', 'activeForm': 'Writing test-scenario.md document'}]})], model='claude-sonnet-4-5-20250929', parent_tool_use_id=None)

UserMessage(content=[ToolResultBlock(tool_use_id='toolu_014rok76Ji8qyhUvBKGrnyn4', content='Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable', is_error=None)], parent_tool_use_id=None)

AssistantMessage(content=[TextBlock(text='## テストシナリオ作成完了\n\nIssue #319のテストシナリオを作成しました。以下の内容で `.ai-workflow/issue-319/03_test_scenario/output/test-scenario.md` に保存しました。\n\n### 作成内容のサマリー\n\n#### 1. テスト戦略（UNIT_INTEGRATION）\n- **Unitテスト**: 35テストケース\n  - `dependency_validator.py`の全機能（PHASE_DEPENDENCIES定義、DependencyError、validate_phase_dependencies関数）\n  - `main.py`のCLIオプション（--skip-dependency-check, --ignore-dependencies, --preset）\n  - `base_phase.py`のrun()メソッド統合\n\n- **Integrationテスト**: 18テストケース\n  - CLI実行フロー全体（正常系・異常系）\n  - 複数依存関係のテスト\n  - BasePhase.run()統合テスト\n  - エラーハンドリングとリカバリ\n  - パフォーマンステスト\n\n#### 2. テストカバレッジ\n- **合計53テストケース**を設計\n- 主要な正常系・異常系をすべてカバー\n- カバレッジ目標: ライン90%以上、ブランチ85%以上\n\n#### 3. 品質ゲート確認\n- ✓ Phase 2の戦略（UNIT_INTEGRATION）に完全準拠\n- ✓ 主要な正常系カバー済み（依存関係満足時の実行、プリセット実行等）\n- ✓ 主要な異常系カバー済み（依存関係違反、無効な入力等）\n- ✓ すべてのテストケースで期待結果を明確に記載\n\n#### 4. 特徴\n- **要件定義書の受け入れ基準**と完全対応（FR-1〜FR-7）\n- **設計書の実装戦略**に基づいた具体的なテストケース\n- **実行可能性**を重視した詳細なテスト手順と期待結果\n- テストデータ、環境要件、実行計画まで完備\n\nこのテストシナリオは、次フェーズ（Phase 4: 実装）で実際にテストコードを作成する際のブループリントとして機能します。')], model='claude-sonnet-4-5-20250929', parent_tool_use_id=None)

ResultMessage(subtype='success', duration_ms=251996, duration_api_ms=250853, is_error=False, num_turns=14, session_id='417dba50-8fdf-4d87-8494-0cc2841f5e7e', total_cost_usd=0.55382025, usage={'input_tokens': 27, 'cache_creation_input_tokens': 55759, 'cache_read_input_tokens': 228110, 'output_tokens': 18414, 'server_tool_use': {'web_search_requests': 0}, 'service_tier': 'standard', 'cache_creation': {'ephemeral_1h_input_tokens': 0, 'ephemeral_5m_input_tokens': 55759}}, result='## テストシナリオ作成完了\n\nIssue #319のテストシナリオを作成しました。以下の内容で `.ai-workflow/issue-319/03_test_scenario/output/test-scenario.md` に保存しました。\n\n### 作成内容のサマリー\n\n#### 1. テスト戦略（UNIT_INTEGRATION）\n- **Unitテスト**: 35テストケース\n  - `dependency_validator.py`の全機能（PHASE_DEPENDENCIES定義、DependencyError、validate_phase_dependencies関数）\n  - `main.py`のCLIオプション（--skip-dependency-check, --ignore-dependencies, --preset）\n  - `base_phase.py`のrun()メソッド統合\n\n- **Integrationテスト**: 18テストケース\n  - CLI実行フロー全体（正常系・異常系）\n  - 複数依存関係のテスト\n  - BasePhase.run()統合テスト\n  - エラーハンドリングとリカバリ\n  - パフォーマンステスト\n\n#### 2. テストカバレッジ\n- **合計53テストケース**を設計\n- 主要な正常系・異常系をすべてカバー\n- カバレッジ目標: ライン90%以上、ブランチ85%以上\n\n#### 3. 品質ゲート確認\n- ✓ Phase 2の戦略（UNIT_INTEGRATION）に完全準拠\n- ✓ 主要な正常系カバー済み（依存関係満足時の実行、プリセット実行等）\n- ✓ 主要な異常系カバー済み（依存関係違反、無効な入力等）\n- ✓ すべてのテストケースで期待結果を明確に記載\n\n#### 4. 特徴\n- **要件定義書の受け入れ基準**と完全対応（FR-1〜FR-7）\n- **設計書の実装戦略**に基づいた具体的なテストケース\n- **実行可能性**を重視した詳細なテスト手順と期待結果\n- テストデータ、環境要件、実行計画まで完備\n\nこのテストシナリオは、次フェーズ（Phase 4: 実装）で実際にテストコードを作成する際のブループリントとして機能します。')