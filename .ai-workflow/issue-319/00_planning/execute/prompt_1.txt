# プロジェクト計画フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細なプロジェクト計画書を作成してください。
Phase 0はプロジェクトマネージャの役割を担い、開発作業を計画的かつ効率的に進められるようにします。

## Issue情報

## Issue情報

- **Issue番号**: #319
- **タイトル**: [FEATURE] AIワークフロー: フェーズ依存関係の柔軟化と選択的実行機能
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/319
- **ラベル**: なし

### 本文

## 概要

現在のAIワークフローは全フェーズが順次実行される前提で、各フェーズが前フェーズの成果物に依存しています。
開発規模やタスクの種類に応じて、必要なフェーズだけを選択的に実行できる機能を追加したいです。

## 背景

### 現在の問題点
- **Phase 1-7の強制的な依存関係**: 各フェーズは前フェーズの成果物を前提としている
- **小規模タスクでのオーバーヘッド**: 簡単な不具合修正でも全フェーズ実行が必要
- **柔軟性の欠如**: 要件定義だけレビューしたい、実装だけ実行したいなどの要望に対応できない

### ユースケース例

1. **要件定義のみ実行**: Issue内容を整理してドキュメント化だけ行いたい
2. **実装のみ実行**: 既存の要件定義書・設計書がある状態で実装だけ行いたい
3. **テストのみ実行**: 既存実装に対してテストケース追加だけ行いたい
4. **部分フェーズ実行**: Phase 1-3だけ実行して設計レビューで止めたい

## 提案機能

### 1. フェーズ依存関係の明示化

各フェーズの依存関係をメタデータとして定義:

```python
PHASE_DEPENDENCIES = {
    'requirements': [],  # 依存なし
    'design': ['requirements'],  # 要件定義が必要
    'test_scenario': ['requirements', 'design'],
    'implementation': ['requirements', 'design', 'test_scenario'],
    'testing': ['implementation'],
    'documentation': ['implementation'],
    'report': ['requirements', 'design', 'implementation', 'testing', 'documentation']
}
```

### 2. 依存関係チェック機能

フェーズ実行前に依存関係を検証:

```python
def validate_phase_dependencies(phase_name: str, metadata: MetadataManager) -> bool:
    """
    フェーズ実行前に依存関係をチェック
    
    Returns:
        bool: 依存関係が満たされている場合True
    """
    required_phases = PHASE_DEPENDENCIES.get(phase_name, [])
    for required_phase in required_phases:
        status = metadata.get_phase_status(required_phase)
        if status != 'completed':
            raise DependencyError(f"Phase '{required_phase}' must be completed before '{phase_name}'")
    return True
```

### 3. CLIオプションの追加

```bash
# 依存関係チェックをスキップして強制実行
python main.py execute --phase implementation --issue 305 --skip-dependency-check

# 依存関係を無視して実行（警告のみ表示）
python main.py execute --phase implementation --issue 305 --ignore-dependencies

# 特定フェーズの成果物を手動で指定
python main.py execute --phase implementation --issue 305   --requirements-doc /path/to/requirements.md   --design-doc /path/to/design.md   --test-scenario-doc /path/to/test-scenario.md
```

### 4. プリセット実行モード

よくあるパターンをプリセットとして提供:

```bash
# 要件定義のみ
python main.py execute --preset requirements-only --issue 305

# 設計まで（Phase 1-2）
python main.py execute --preset design-phase --issue 305

# 実装まで（Phase 1-4）
python main.py execute --preset implementation-phase --issue 305

# フルワークフロー（Phase 1-7、デフォルト）
python main.py execute --preset full-workflow --issue 305
```

## 実装方針

### Phase 1: 依存関係管理の実装
- [ ] `PHASE_DEPENDENCIES` 定義の追加
- [ ] `validate_phase_dependencies()` 関数の実装
- [ ] `BasePhase.run()` に依存関係チェックを統合

### Phase 2: CLIオプションの追加
- [ ] `--skip-dependency-check` フラグの追加
- [ ] `--ignore-dependencies` フラグの追加（警告表示）
- [ ] `--{phase}-doc` オプションの追加（外部ドキュメント指定）

### Phase 3: プリセット機能の実装
- [ ] `--preset` オプションの追加
- [ ] プリセット定義（requirements-only, design-phase, implementation-phase, full-workflow）
- [ ] プリセットに応じた自動フェーズ選択

### Phase 4: ドキュメント更新
- [ ] README.md に使用例を追加
- [ ] プリセット一覧のドキュメント化
- [ ] 依存関係図の追加

## 期待される効果

1. **柔軟性の向上**: タスクの規模に応じた最適なフェーズ選択が可能
2. **時間短縮**: 不要なフェーズをスキップして効率化
3. **段階的レビュー**: 要件定義や設計段階でのレビューが容易
4. **既存資産の活用**: 既存ドキュメントを活用した部分実行が可能

## 検討事項

### セキュリティ
- `--skip-dependency-check` 使用時の警告表示
- 依存関係違反時のエラーメッセージの明確化

### 互換性
- 既存のフル実行モードをデフォルト動作として維持
- 新規オプションは明示的に指定した場合のみ有効化

### エラーハンドリング
- 依存フェーズ未完了時のエラーメッセージ
- 外部ドキュメント指定時のバリデーション

## 関連Issue

- #305 AI Workflow: Jenkins統合完成とPhase終了後の自動commit & push機能

## タスク

- [ ] Phase 1: 依存関係管理の実装
- [ ] Phase 2: CLIオプションの追加
- [ ] Phase 3: プリセット機能の実装
- [ ] Phase 4: ドキュメント更新
- [ ] E2Eテストの追加
- [ ] 既存テストの修正（依存関係チェック対応）

## プロジェクト計画書の構成

以下のセクションを含むプロジェクト計画書を作成してください：

### 1. Issue分析
- **複雑度**: 簡単/中程度/複雑を判定
  - 簡単: 単一ファイルの修正、シンプルな機能追加（見積もり: ~4時間）
  - 中程度: 複数ファイルの修正、既存機能の拡張（見積もり: 4~16時間）
  - 複雑: アーキテクチャ変更、新規サブシステム追加（見積もり: 16時間~）
- **見積もり工数**: X時間（根拠を記載）
- **リスク評価**: 低/中/高

### 2. 実装戦略判断

**重要**: このセクションは最も重要です。Phase 2（Design）で使用されるため、必ず明記してください。

#### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- CREATE: 新規ファイル・クラス・モジュールの作成が中心
- EXTEND: 既存コードの拡張（機能追加）が中心
- REFACTOR: 既存コードのリファクタリング（構造改善）が中心

（判断理由を具体的に記載）

#### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- UNIT_ONLY: ユニットテストのみ（単純なロジック、外部依存なし）
- INTEGRATION_ONLY: インテグレーションテストのみ（外部システム連携中心）
- BDD_ONLY: BDDテストのみ（ユーザーストーリー中心）
- UNIT_INTEGRATION: ユニット + インテグレーション（一般的な機能開発）
- UNIT_BDD: ユニット + BDD（エンドユーザー向け機能）
- INTEGRATION_BDD: インテグレーション + BDD（システム間連携＋ユーザーストーリー）
- ALL: すべてのテストレベル（大規模な変更、高リスク）

（判断理由を具体的に記載）

#### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- EXTEND_TEST: 既存テストファイルに追加（既存機能の拡張時）
- CREATE_TEST: 新規テストファイル作成（新規機能追加時）
- BOTH_TEST: 両方（既存テスト拡張 + 新規テスト作成）

（判断理由を具体的に記載）

### 3. 影響範囲分析
- **既存コードへの影響**: 変更が必要なファイル・モジュール
- **依存関係の変更**: 新規依存の追加、既存依存の変更
- **マイグレーション要否**: データベーススキーマ変更、設定ファイル変更等

### 4. タスク分割

各フェーズについて、サブタスクを洗い出してください：

#### Phase 1: 要件定義 (見積もり: Xh)
- サブタスク1
- サブタスク2
...

#### Phase 2: 設計 (見積もり: Xh)
...

#### Phase 3: テストシナリオ (見積もり: Xh)
...

#### Phase 4: 実装 (見積もり: Xh)
...

#### Phase 5: テスト (見積もり: Xh)
...

#### Phase 6: ドキュメント (見積もり: Xh)
...

#### Phase 7: レポート (見積もり: Xh)
...

**タスク粒度基準**:
- 1タスク = 1~4時間程度で完了可能な作業単位
- 明確な完了条件（Done criteria）を持つ
- 他のタスクから独立して実装・テスト可能

### 5. 依存関係

タスク間の依存関係をMermaid形式で図示してください：

```mermaid
graph TD
    P1[Phase 1] --> P2[Phase 2]
    P2 --> P3[Phase 3]
    P3 --> P4[Phase 4]
    P4 --> P5[Phase 5]
    P5 --> P6[Phase 6]
    P6 --> P7[Phase 7]
```

### 6. リスクと軽減策

潜在的なリスクを洗い出し、各リスクに対する軽減策を記載してください：

#### リスク1: （リスク名）
- **影響度**: 低/中/高
- **確率**: 低/中/高
- **軽減策**: （具体的な対策）

#### リスク2: （リスク名）
...

**リスクカテゴリ**:
- 技術的リスク: 新技術の学習コスト、既存システムとの統合問題
- スコープリスク: 要件の曖昧さ、スコープクリープ
- リソースリスク: 工数不足、スキル不足
- 依存リスク: 外部システム依存、ブロッキング問題

### 7. 品質ゲート

各フェーズの合格基準を定義してください：

#### Phase 1: 要件定義
- [ ] 機能要件が明確に記載されている
- [ ] 受け入れ基準が定義されている
...

#### Phase 2: 設計
- [ ] 実装戦略の判断根拠が明記されている
- [ ] テスト戦略の判断根拠が明記されている
...

（以下、Phase 3~7についても記載）

## 出力形式

Markdown形式でプロジェクト計画書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-319/00_planning/output/planning.md
```

## 品質ゲート（Phase 0）

作成するプロジェクト計画書は、以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略が明確に決定されている**（CREATE/EXTEND/REFACTOR）
- [ ] **テスト戦略が明確に決定されている**（UNIT_ONLY/.../ALL）
- [ ] **テストコード戦略が明確に決定されている**（EXTEND_TEST/CREATE_TEST/BOTH_TEST）
- [ ] **影響範囲が分析されている**
- [ ] **タスク分割が適切な粒度である**（1タスク = 1~4時間）
- [ ] **リスクが洗い出されている**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **実装戦略の判断**: Phase 2で使用されるため、必ず明記してください
   - 実装戦略: CREATE/EXTEND/REFACTOR
   - テスト戦略: UNIT_ONLY/.../ALL
   - テストコード戦略: EXTEND_TEST/CREATE_TEST/BOTH_TEST

2. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な計画を記述
   - NG例: "適切に対応する"、"必要に応じて実施"
   - OK例: "Phase 2で詳細設計を実施"、"最大3回のリトライを実施"

3. **実現可能性**: 見積もりが現実的か、リソースは十分か確認
   - タスク粒度が大きすぎないか（1タスク = 1~4時間）
   - 依存関係が正確に記載されているか

4. **リスク分析の網羅性**: 重要なリスクが見逃されていないか確認
   - 技術的リスク、スコープリスク、リソースリスク、依存リスク

5. **レビューされることを意識**: 作成した計画書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（6つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント

## プロジェクト計画書の作成を開始してください
