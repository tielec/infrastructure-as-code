# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-319/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-319/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #319
- **タイトル**: [FEATURE] AIワークフロー: フェーズ依存関係の柔軟化と選択的実行機能
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/319
- **ラベル**: なし

### 本文

## 概要

現在のAIワークフローは全フェーズが順次実行される前提で、各フェーズが前フェーズの成果物に依存しています。
開発規模やタスクの種類に応じて、必要なフェーズだけを選択的に実行できる機能を追加したいです。

## 背景

### 現在の問題点
- **Phase 1-7の強制的な依存関係**: 各フェーズは前フェーズの成果物を前提としている
- **小規模タスクでのオーバーヘッド**: 簡単な不具合修正でも全フェーズ実行が必要
- **柔軟性の欠如**: 要件定義だけレビューしたい、実装だけ実行したいなどの要望に対応できない

### ユースケース例

1. **要件定義のみ実行**: Issue内容を整理してドキュメント化だけ行いたい
2. **実装のみ実行**: 既存の要件定義書・設計書がある状態で実装だけ行いたい
3. **テストのみ実行**: 既存実装に対してテストケース追加だけ行いたい
4. **部分フェーズ実行**: Phase 1-3だけ実行して設計レビューで止めたい

## 提案機能

### 1. フェーズ依存関係の明示化

各フェーズの依存関係をメタデータとして定義:

```python
PHASE_DEPENDENCIES = {
    'requirements': [],  # 依存なし
    'design': ['requirements'],  # 要件定義が必要
    'test_scenario': ['requirements', 'design'],
    'implementation': ['requirements', 'design', 'test_scenario'],
    'testing': ['implementation'],
    'documentation': ['implementation'],
    'report': ['requirements', 'design', 'implementation', 'testing', 'documentation']
}
```

### 2. 依存関係チェック機能

フェーズ実行前に依存関係を検証:

```python
def validate_phase_dependencies(phase_name: str, metadata: MetadataManager) -> bool:
    """
    フェーズ実行前に依存関係をチェック
    
    Returns:
        bool: 依存関係が満たされている場合True
    """
    required_phases = PHASE_DEPENDENCIES.get(phase_name, [])
    for required_phase in required_phases:
        status = metadata.get_phase_status(required_phase)
        if status != 'completed':
            raise DependencyError(f"Phase '{required_phase}' must be completed before '{phase_name}'")
    return True
```

### 3. CLIオプションの追加

```bash
# 依存関係チェックをスキップして強制実行
python main.py execute --phase implementation --issue 305 --skip-dependency-check

# 依存関係を無視して実行（警告のみ表示）
python main.py execute --phase implementation --issue 305 --ignore-dependencies

# 特定フェーズの成果物を手動で指定
python main.py execute --phase implementation --issue 305   --requirements-doc /path/to/requirements.md   --design-doc /path/to/design.md   --test-scenario-doc /path/to/test-scenario.md
```

### 4. プリセット実行モード

よくあるパターンをプリセットとして提供:

```bash
# 要件定義のみ
python main.py execute --preset requirements-only --issue 305

# 設計まで（Phase 1-2）
python main.py execute --preset design-phase --issue 305

# 実装まで（Phase 1-4）
python main.py execute --preset implementation-phase --issue 305

# フルワークフロー（Phase 1-7、デフォルト）
python main.py execute --preset full-workflow --issue 305
```

## 実装方針

### Phase 1: 依存関係管理の実装
- [ ] `PHASE_DEPENDENCIES` 定義の追加
- [ ] `validate_phase_dependencies()` 関数の実装
- [ ] `BasePhase.run()` に依存関係チェックを統合

### Phase 2: CLIオプションの追加
- [ ] `--skip-dependency-check` フラグの追加
- [ ] `--ignore-dependencies` フラグの追加（警告表示）
- [ ] `--{phase}-doc` オプションの追加（外部ドキュメント指定）

### Phase 3: プリセット機能の実装
- [ ] `--preset` オプションの追加
- [ ] プリセット定義（requirements-only, design-phase, implementation-phase, full-workflow）
- [ ] プリセットに応じた自動フェーズ選択

### Phase 4: ドキュメント更新
- [ ] README.md に使用例を追加
- [ ] プリセット一覧のドキュメント化
- [ ] 依存関係図の追加

## 期待される効果

1. **柔軟性の向上**: タスクの規模に応じた最適なフェーズ選択が可能
2. **時間短縮**: 不要なフェーズをスキップして効率化
3. **段階的レビュー**: 要件定義や設計段階でのレビューが容易
4. **既存資産の活用**: 既存ドキュメントを活用した部分実行が可能

## 検討事項

### セキュリティ
- `--skip-dependency-check` 使用時の警告表示
- 依存関係違反時のエラーメッセージの明確化

### 互換性
- 既存のフル実行モードをデフォルト動作として維持
- 新規オプションは明示的に指定した場合のみ有効化

### エラーハンドリング
- 依存フェーズ未完了時のエラーメッセージ
- 外部ドキュメント指定時のバリデーション

## 関連Issue

- #305 AI Workflow: Jenkins統合完成とPhase終了後の自動commit & push機能

## タスク

- [ ] Phase 1: 依存関係管理の実装
- [ ] Phase 2: CLIオプションの追加
- [ ] Phase 3: プリセット機能の実装
- [ ] Phase 4: ドキュメント更新
- [ ] E2Eテストの追加
- [ ] 既存テストの修正（依存関係チェック対応）

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **実装戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **テスト戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **既存コードへの影響範囲が分析されている**: PASS/FAIL - （コメント）
- [x/  ] **変更が必要なファイルがリストアップされている**: PASS/FAIL - （コメント）
- [x/  ] **設計が実装可能である**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、設計書のクリティカルシンキングレビューを実施してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
