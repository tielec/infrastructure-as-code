# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-322/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-322/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-322/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**UNIT_ONLY**

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #322
- **タイトル**: [FEATURE] AIワークフローのGitコミット時のユーザー名とメールアドレスを設定可能に
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/322
- **ラベル**: なし

### 本文

## 概要

AIワークフローでGitコミットを実行する際のユーザー名とメールアドレスを、環境変数やJenkinsパラメータで設定できるようにしたい。

現在はGitの設定がそのまま使用されているが、CI/CD環境では明示的にコミット者情報を指定したい場合がある。

## 要件

### 機能要件

**FR-001: 環境変数でのGit設定**
- `GIT_COMMIT_USER_NAME`: コミット時のユーザー名
- `GIT_COMMIT_USER_EMAIL`: コミット時のメールアドレス
- 環境変数が未設定の場合はデフォルトのGit設定を使用

**FR-002: Jenkinsパラメータでの設定**
- Jenkinsfileの`ai_workflow_orchestrator`ジョブにパラメータを追加
  - `GIT_COMMIT_USER_NAME`: デフォルト `AI Workflow Bot`
  - `GIT_COMMIT_USER_EMAIL`: デフォルト `ai-workflow@example.com`
- パラメータは環境変数として子プロセスに渡される

**FR-003: GitManagerでの適用**
- `GitManager.commit_and_push()`メソッド内で環境変数を読み取り
- コミット実行前に`git config user.name`と`git config user.email`を設定（ローカルリポジトリのみ）
- グローバル設定は変更しない

**FR-004: Python CLIでの設定**
- `main.py execute`コマンドに`--git-user`と`--git-email`オプションを追加（オプション）
- 優先順位: CLIオプション > 環境変数 > デフォルトGit設定

### 非機能要件

**NFR-001: 後方互換性**
- 環境変数が未設定の場合は従来通り動作
- 既存のワークフローに影響を与えない

**NFR-002: セキュリティ**
- メールアドレスのバリデーション（基本的な形式チェック）
- ユーザー名の長さ制限（1-100文字）

**NFR-003: ログ出力**
- 使用されているGit設定をログに出力
- デバッグ時の追跡を容易にする

## 実装ガイド

### 1. GitManagerの修正

```python
# scripts/ai-workflow/core/git_manager.py

def commit_and_push(self, message: str, files: List[str] = None):
    """
    ファイルをコミットしてリモートにプッシュ
    
    環境変数からGit設定を読み取り:
    - GIT_COMMIT_USER_NAME: コミット時のユーザー名
    - GIT_COMMIT_USER_EMAIL: コミット時のメールアドレス
    """
    # 環境変数からGit設定を取得
    git_user_name = os.getenv('GIT_COMMIT_USER_NAME')
    git_user_email = os.getenv('GIT_COMMIT_USER_EMAIL')
    
    # Git設定を一時的に設定（ローカルリポジトリのみ）
    if git_user_name:
        self._run_git_command(['config', 'user.name', git_user_name])
        print(f"[INFO] Git user.name set to: {git_user_name}")
    
    if git_user_email:
        self._run_git_command(['config', 'user.email', git_user_email])
        print(f"[INFO] Git user.email set to: {git_user_email}")
    
    # 既存のコミット処理...
```

### 2. Jenkinsfileの修正

```groovy
// jenkins/jobs/pipeline/AI_Workflow/ai-workflow-orchestrator/Jenkinsfile

parameters {
    string(
        name: 'ISSUE_URL',
        description: 'GitHub Issue URL'
    )
    string(
        name: 'GIT_COMMIT_USER_NAME',
        defaultValue: 'AI Workflow Bot',
        description: 'Git commit user name'
    )
    string(
        name: 'GIT_COMMIT_USER_EMAIL',
        defaultValue: 'ai-workflow@example.com',
        description: 'Git commit user email'
    )
    // 既存のパラメータ...
}

environment {
    GIT_COMMIT_USER_NAME = "${params.GIT_COMMIT_USER_NAME}"
    GIT_COMMIT_USER_EMAIL = "${params.GIT_COMMIT_USER_EMAIL}"
}
```

### 3. Job DSLの修正

```groovy
// jenkins/jobs/dsl/ai_workflow/ai_workflow_orchestrator.groovy

parameters {
    stringParam('ISSUE_URL', '', 'GitHub Issue URL (required)')
    stringParam('GIT_COMMIT_USER_NAME', 'AI Workflow Bot', 'Git commit user name')
    stringParam('GIT_COMMIT_USER_EMAIL', 'ai-workflow@example.com', 'Git commit user email')
    // 既存のパラメータ...
}
```

### 4. CLIオプションの追加（オプション）

```python
# scripts/ai-workflow/main.py

@click.command()
@click.option('--phase', required=True, help='Phase name')
@click.option('--issue', required=True, type=int, help='GitHub Issue number')
@click.option('--git-user', help='Git commit user name')
@click.option('--git-email', help='Git commit user email')
def execute(phase: str, issue: int, git_user: str = None, git_email: str = None):
    """Execute a specific phase"""
    # 環境変数に設定（優先度: CLI > 環境変数）
    if git_user:
        os.environ['GIT_COMMIT_USER_NAME'] = git_user
    if git_email:
        os.environ['GIT_COMMIT_USER_EMAIL'] = git_email
    
    # 既存の処理...
```

## テストケース

### TC-001: 環境変数での設定
- **前提条件**: 環境変数 `GIT_COMMIT_USER_NAME` と `GIT_COMMIT_USER_EMAIL` が設定されている
- **実行**: `python main.py execute --phase requirements --issue 123`
- **期待結果**: コミットのAuthorが環境変数の値になる

### TC-002: Jenkinsパラメータでの設定
- **前提条件**: Jenkinsジョブでパラメータを指定して実行
- **実行**: `ai_workflow_orchestrator` ジョブを実行
- **期待結果**: コミットのAuthorがJenkinsパラメータの値になる

### TC-003: 環境変数未設定時のデフォルト動作
- **前提条件**: 環境変数が未設定
- **実行**: `python main.py execute --phase requirements --issue 123`
- **期待結果**: 既存のGit設定（`git config user.name`）が使用される

### TC-004: バリデーションエラー
- **前提条件**: 不正なメールアドレスを設定
- **実行**: `GIT_COMMIT_USER_EMAIL=invalid-email python main.py execute --phase requirements --issue 123`
- **期待結果**: 警告ログが出力されるが処理は継続（またはエラーで停止）

## 受け入れ基準

- [ ] 環境変数 `GIT_COMMIT_USER_NAME` と `GIT_COMMIT_USER_EMAIL` でGit設定を変更できる
- [ ] Jenkinsパラメータでコミット者情報を指定できる
- [ ] 環境変数未設定時は既存のGit設定が使用される
- [ ] グローバルGit設定は変更されない（ローカルリポジトリのみ）
- [ ] 使用されているGit設定がログに出力される
- [ ] 既存のワークフローに影響を与えない（後方互換性）

## 優先度

Medium

## ラベル

enhancement, ai-workflow, git

## 関連Issue

なし

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-322/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
