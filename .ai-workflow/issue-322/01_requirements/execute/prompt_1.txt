# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-322/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue情報

- **Issue番号**: #322
- **タイトル**: [FEATURE] AIワークフローのGitコミット時のユーザー名とメールアドレスを設定可能に
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/322
- **ラベル**: なし

### 本文

## 概要

AIワークフローでGitコミットを実行する際のユーザー名とメールアドレスを、環境変数やJenkinsパラメータで設定できるようにしたい。

現在はGitの設定がそのまま使用されているが、CI/CD環境では明示的にコミット者情報を指定したい場合がある。

## 要件

### 機能要件

**FR-001: 環境変数でのGit設定**
- `GIT_COMMIT_USER_NAME`: コミット時のユーザー名
- `GIT_COMMIT_USER_EMAIL`: コミット時のメールアドレス
- 環境変数が未設定の場合はデフォルトのGit設定を使用

**FR-002: Jenkinsパラメータでの設定**
- Jenkinsfileの`ai_workflow_orchestrator`ジョブにパラメータを追加
  - `GIT_COMMIT_USER_NAME`: デフォルト `AI Workflow Bot`
  - `GIT_COMMIT_USER_EMAIL`: デフォルト `ai-workflow@example.com`
- パラメータは環境変数として子プロセスに渡される

**FR-003: GitManagerでの適用**
- `GitManager.commit_and_push()`メソッド内で環境変数を読み取り
- コミット実行前に`git config user.name`と`git config user.email`を設定（ローカルリポジトリのみ）
- グローバル設定は変更しない

**FR-004: Python CLIでの設定**
- `main.py execute`コマンドに`--git-user`と`--git-email`オプションを追加（オプション）
- 優先順位: CLIオプション > 環境変数 > デフォルトGit設定

### 非機能要件

**NFR-001: 後方互換性**
- 環境変数が未設定の場合は従来通り動作
- 既存のワークフローに影響を与えない

**NFR-002: セキュリティ**
- メールアドレスのバリデーション（基本的な形式チェック）
- ユーザー名の長さ制限（1-100文字）

**NFR-003: ログ出力**
- 使用されているGit設定をログに出力
- デバッグ時の追跡を容易にする

## 実装ガイド

### 1. GitManagerの修正

```python
# scripts/ai-workflow/core/git_manager.py

def commit_and_push(self, message: str, files: List[str] = None):
    """
    ファイルをコミットしてリモートにプッシュ
    
    環境変数からGit設定を読み取り:
    - GIT_COMMIT_USER_NAME: コミット時のユーザー名
    - GIT_COMMIT_USER_EMAIL: コミット時のメールアドレス
    """
    # 環境変数からGit設定を取得
    git_user_name = os.getenv('GIT_COMMIT_USER_NAME')
    git_user_email = os.getenv('GIT_COMMIT_USER_EMAIL')
    
    # Git設定を一時的に設定（ローカルリポジトリのみ）
    if git_user_name:
        self._run_git_command(['config', 'user.name', git_user_name])
        print(f"[INFO] Git user.name set to: {git_user_name}")
    
    if git_user_email:
        self._run_git_command(['config', 'user.email', git_user_email])
        print(f"[INFO] Git user.email set to: {git_user_email}")
    
    # 既存のコミット処理...
```

### 2. Jenkinsfileの修正

```groovy
// jenkins/jobs/pipeline/AI_Workflow/ai-workflow-orchestrator/Jenkinsfile

parameters {
    string(
        name: 'ISSUE_URL',
        description: 'GitHub Issue URL'
    )
    string(
        name: 'GIT_COMMIT_USER_NAME',
        defaultValue: 'AI Workflow Bot',
        description: 'Git commit user name'
    )
    string(
        name: 'GIT_COMMIT_USER_EMAIL',
        defaultValue: 'ai-workflow@example.com',
        description: 'Git commit user email'
    )
    // 既存のパラメータ...
}

environment {
    GIT_COMMIT_USER_NAME = "${params.GIT_COMMIT_USER_NAME}"
    GIT_COMMIT_USER_EMAIL = "${params.GIT_COMMIT_USER_EMAIL}"
}
```

### 3. Job DSLの修正

```groovy
// jenkins/jobs/dsl/ai_workflow/ai_workflow_orchestrator.groovy

parameters {
    stringParam('ISSUE_URL', '', 'GitHub Issue URL (required)')
    stringParam('GIT_COMMIT_USER_NAME', 'AI Workflow Bot', 'Git commit user name')
    stringParam('GIT_COMMIT_USER_EMAIL', 'ai-workflow@example.com', 'Git commit user email')
    // 既存のパラメータ...
}
```

### 4. CLIオプションの追加（オプション）

```python
# scripts/ai-workflow/main.py

@click.command()
@click.option('--phase', required=True, help='Phase name')
@click.option('--issue', required=True, type=int, help='GitHub Issue number')
@click.option('--git-user', help='Git commit user name')
@click.option('--git-email', help='Git commit user email')
def execute(phase: str, issue: int, git_user: str = None, git_email: str = None):
    """Execute a specific phase"""
    # 環境変数に設定（優先度: CLI > 環境変数）
    if git_user:
        os.environ['GIT_COMMIT_USER_NAME'] = git_user
    if git_email:
        os.environ['GIT_COMMIT_USER_EMAIL'] = git_email
    
    # 既存の処理...
```

## テストケース

### TC-001: 環境変数での設定
- **前提条件**: 環境変数 `GIT_COMMIT_USER_NAME` と `GIT_COMMIT_USER_EMAIL` が設定されている
- **実行**: `python main.py execute --phase requirements --issue 123`
- **期待結果**: コミットのAuthorが環境変数の値になる

### TC-002: Jenkinsパラメータでの設定
- **前提条件**: Jenkinsジョブでパラメータを指定して実行
- **実行**: `ai_workflow_orchestrator` ジョブを実行
- **期待結果**: コミットのAuthorがJenkinsパラメータの値になる

### TC-003: 環境変数未設定時のデフォルト動作
- **前提条件**: 環境変数が未設定
- **実行**: `python main.py execute --phase requirements --issue 123`
- **期待結果**: 既存のGit設定（`git config user.name`）が使用される

### TC-004: バリデーションエラー
- **前提条件**: 不正なメールアドレスを設定
- **実行**: `GIT_COMMIT_USER_EMAIL=invalid-email python main.py execute --phase requirements --issue 123`
- **期待結果**: 警告ログが出力されるが処理は継続（またはエラーで停止）

## 受け入れ基準

- [ ] 環境変数 `GIT_COMMIT_USER_NAME` と `GIT_COMMIT_USER_EMAIL` でGit設定を変更できる
- [ ] Jenkinsパラメータでコミット者情報を指定できる
- [ ] 環境変数未設定時は既存のGit設定が使用される
- [ ] グローバルGit設定は変更されない（ローカルリポジトリのみ）
- [ ] 使用されているGit設定がログに出力される
- [ ] 既存のワークフローに影響を与えない（後方互換性）

## 優先度

Medium

## ラベル

enhancement, ai-workflow, git

## 関連Issue

なし

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-322/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
