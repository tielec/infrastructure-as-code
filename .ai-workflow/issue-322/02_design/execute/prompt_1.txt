# 詳細設計フェーズ - 実行プロンプト

## タスク概要
要件定義書とGitHub Issueの内容から、詳細な設計書を作成してください。このフェーズでは、**実装戦略・テスト戦略・テストコード戦略の判断**も行います。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-322/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-322/01_requirements/output/requirements.md

### GitHub Issue情報
## Issue情報

- **Issue番号**: #322
- **タイトル**: [FEATURE] AIワークフローのGitコミット時のユーザー名とメールアドレスを設定可能に
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/322
- **ラベル**: なし

### 本文

## 概要

AIワークフローでGitコミットを実行する際のユーザー名とメールアドレスを、環境変数やJenkinsパラメータで設定できるようにしたい。

現在はGitの設定がそのまま使用されているが、CI/CD環境では明示的にコミット者情報を指定したい場合がある。

## 要件

### 機能要件

**FR-001: 環境変数でのGit設定**
- `GIT_COMMIT_USER_NAME`: コミット時のユーザー名
- `GIT_COMMIT_USER_EMAIL`: コミット時のメールアドレス
- 環境変数が未設定の場合はデフォルトのGit設定を使用

**FR-002: Jenkinsパラメータでの設定**
- Jenkinsfileの`ai_workflow_orchestrator`ジョブにパラメータを追加
  - `GIT_COMMIT_USER_NAME`: デフォルト `AI Workflow Bot`
  - `GIT_COMMIT_USER_EMAIL`: デフォルト `ai-workflow@example.com`
- パラメータは環境変数として子プロセスに渡される

**FR-003: GitManagerでの適用**
- `GitManager.commit_and_push()`メソッド内で環境変数を読み取り
- コミット実行前に`git config user.name`と`git config user.email`を設定（ローカルリポジトリのみ）
- グローバル設定は変更しない

**FR-004: Python CLIでの設定**
- `main.py execute`コマンドに`--git-user`と`--git-email`オプションを追加（オプション）
- 優先順位: CLIオプション > 環境変数 > デフォルトGit設定

### 非機能要件

**NFR-001: 後方互換性**
- 環境変数が未設定の場合は従来通り動作
- 既存のワークフローに影響を与えない

**NFR-002: セキュリティ**
- メールアドレスのバリデーション（基本的な形式チェック）
- ユーザー名の長さ制限（1-100文字）

**NFR-003: ログ出力**
- 使用されているGit設定をログに出力
- デバッグ時の追跡を容易にする

## 実装ガイド

### 1. GitManagerの修正

```python
# scripts/ai-workflow/core/git_manager.py

def commit_and_push(self, message: str, files: List[str] = None):
    """
    ファイルをコミットしてリモートにプッシュ
    
    環境変数からGit設定を読み取り:
    - GIT_COMMIT_USER_NAME: コミット時のユーザー名
    - GIT_COMMIT_USER_EMAIL: コミット時のメールアドレス
    """
    # 環境変数からGit設定を取得
    git_user_name = os.getenv('GIT_COMMIT_USER_NAME')
    git_user_email = os.getenv('GIT_COMMIT_USER_EMAIL')
    
    # Git設定を一時的に設定（ローカルリポジトリのみ）
    if git_user_name:
        self._run_git_command(['config', 'user.name', git_user_name])
        print(f"[INFO] Git user.name set to: {git_user_name}")
    
    if git_user_email:
        self._run_git_command(['config', 'user.email', git_user_email])
        print(f"[INFO] Git user.email set to: {git_user_email}")
    
    # 既存のコミット処理...
```

### 2. Jenkinsfileの修正

```groovy
// jenkins/jobs/pipeline/AI_Workflow/ai-workflow-orchestrator/Jenkinsfile

parameters {
    string(
        name: 'ISSUE_URL',
        description: 'GitHub Issue URL'
    )
    string(
        name: 'GIT_COMMIT_USER_NAME',
        defaultValue: 'AI Workflow Bot',
        description: 'Git commit user name'
    )
    string(
        name: 'GIT_COMMIT_USER_EMAIL',
        defaultValue: 'ai-workflow@example.com',
        description: 'Git commit user email'
    )
    // 既存のパラメータ...
}

environment {
    GIT_COMMIT_USER_NAME = "${params.GIT_COMMIT_USER_NAME}"
    GIT_COMMIT_USER_EMAIL = "${params.GIT_COMMIT_USER_EMAIL}"
}
```

### 3. Job DSLの修正

```groovy
// jenkins/jobs/dsl/ai_workflow/ai_workflow_orchestrator.groovy

parameters {
    stringParam('ISSUE_URL', '', 'GitHub Issue URL (required)')
    stringParam('GIT_COMMIT_USER_NAME', 'AI Workflow Bot', 'Git commit user name')
    stringParam('GIT_COMMIT_USER_EMAIL', 'ai-workflow@example.com', 'Git commit user email')
    // 既存のパラメータ...
}
```

### 4. CLIオプションの追加（オプション）

```python
# scripts/ai-workflow/main.py

@click.command()
@click.option('--phase', required=True, help='Phase name')
@click.option('--issue', required=True, type=int, help='GitHub Issue number')
@click.option('--git-user', help='Git commit user name')
@click.option('--git-email', help='Git commit user email')
def execute(phase: str, issue: int, git_user: str = None, git_email: str = None):
    """Execute a specific phase"""
    # 環境変数に設定（優先度: CLI > 環境変数）
    if git_user:
        os.environ['GIT_COMMIT_USER_NAME'] = git_user
    if git_email:
        os.environ['GIT_COMMIT_USER_EMAIL'] = git_email
    
    # 既存の処理...
```

## テストケース

### TC-001: 環境変数での設定
- **前提条件**: 環境変数 `GIT_COMMIT_USER_NAME` と `GIT_COMMIT_USER_EMAIL` が設定されている
- **実行**: `python main.py execute --phase requirements --issue 123`
- **期待結果**: コミットのAuthorが環境変数の値になる

### TC-002: Jenkinsパラメータでの設定
- **前提条件**: Jenkinsジョブでパラメータを指定して実行
- **実行**: `ai_workflow_orchestrator` ジョブを実行
- **期待結果**: コミットのAuthorがJenkinsパラメータの値になる

### TC-003: 環境変数未設定時のデフォルト動作
- **前提条件**: 環境変数が未設定
- **実行**: `python main.py execute --phase requirements --issue 123`
- **期待結果**: 既存のGit設定（`git config user.name`）が使用される

### TC-004: バリデーションエラー
- **前提条件**: 不正なメールアドレスを設定
- **実行**: `GIT_COMMIT_USER_EMAIL=invalid-email python main.py execute --phase requirements --issue 123`
- **期待結果**: 警告ログが出力されるが処理は継続（またはエラーで停止）

## 受け入れ基準

- [ ] 環境変数 `GIT_COMMIT_USER_NAME` と `GIT_COMMIT_USER_EMAIL` でGit設定を変更できる
- [ ] Jenkinsパラメータでコミット者情報を指定できる
- [ ] 環境変数未設定時は既存のGit設定が使用される
- [ ] グローバルGit設定は変更されない（ローカルリポジトリのみ）
- [ ] 使用されているGit設定がログに出力される
- [ ] 既存のワークフローに影響を与えない（後方互換性）

## 優先度

Medium

## ラベル

enhancement, ai-workflow, git

## 関連Issue

なし

### 既存コードベースの理解

このリポジトリのプロジェクト構造、アーキテクチャ、コーディング規約を理解するため、以下のドキュメントを参照してください：

- プロジェクト全体のガイドライン: @CLAUDE.md（存在する場合）
- アーキテクチャ設計: @ARCHITECTURE.md（存在する場合）
- プロジェクトREADME: @README.md
- その他、関連するREADME、CONTRIBUTION.md等のドキュメント

上記ドキュメントから以下を把握してください：
- プロジェクトの目的とアーキテクチャ
- ディレクトリ構造とコンポーネント構成
- 既存のコーディング規約やパターン
- 開発ワークフロー

## 設計書作成手順

### 1. 既存コードベース分析

要件定義書とIssue内容から、以下を分析してください：

1. **影響範囲の特定**
   - どのコンポーネント（Ansible/Pulumi/Jenkins/Scripts）が影響を受けるか
   - 既存ファイルの修正が必要か、新規ファイルの作成が必要か
   - 依存関係のあるコンポーネントは何か

2. **既存パターンの調査**
   - 類似の機能実装がないか調査
   - 既存のコーディング規約やパターンを確認
   - 再利用可能なコンポーネントの特定

### 2. 実装戦略の判断（必須）

以下の3つから選択し、**判断根拠を明記**してください：

- **CREATE（新規作成）**: 既存コードとの依存関係がなく、完全に新しい機能
- **EXTEND（拡張）**: 既存コードを拡張・修正する必要がある
- **REFACTOR（リファクタリング）**: 既存コードの構造改善が主目的

**判断基準**：
- 既存ファイルへの影響範囲
- 新規ファイルの作成数
- 既存機能との統合度

**出力形式**：
```markdown
### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- （理由1）
- （理由2）
```

### 3. テスト戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **UNIT_ONLY**: Unitテストのみ
- **INTEGRATION_ONLY**: Integrationテストのみ
- **BDD_ONLY**: BDDテストのみ
- **UNIT_INTEGRATION**: Unit + Integration
- **UNIT_BDD**: Unit + BDD
- **INTEGRATION_BDD**: Integration + BDD
- **ALL**: すべて

**判断基準**：
- 機能の複雑度
- ユーザーストーリーの有無
- 既存テストとの整合性

**出力形式**：
```markdown
### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- （理由1）
- （理由2）
```

### 4. テストコード戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **EXTEND_TEST（既存テストの拡張）**: 既存テストファイルに追加
- **CREATE_TEST（新規テスト作成）**: 新しいテストファイルを作成
- **BOTH_TEST（両方）**: 既存テストの拡張と新規テストの作成

**判断基準**：
- 既存テストファイルの有無
- 既存テストとの関連性

**出力形式**：
```markdown
### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- （理由1）
- （理由2）
```

### 5. 設計書の構成

以下のセクションを含む設計書を作成してください：

#### 必須セクション：

1. **アーキテクチャ設計**
   - システム全体図
   - コンポーネント間の関係
   - データフロー

2. **実装戦略判断**（セクション2で記載）

3. **テスト戦略判断**（セクション3で記載）

4. **テストコード戦略判断**（セクション4で記載）

5. **影響範囲分析**
   - 既存コードへの影響
   - 依存関係の変更
   - マイグレーション要否

6. **変更・追加ファイルリスト**
   - 新規作成ファイル（相対パス）
   - 修正が必要な既存ファイル（相対パス）
   - 削除が必要なファイル（相対パス）

7. **詳細設計**
   - クラス設計（必要な場合）
   - 関数設計（主要な関数のみ）
   - データ構造設計
   - インターフェース設計

8. **セキュリティ考慮事項**
   - 認証・認可
   - データ保護
   - セキュリティリスクと対策

9. **非機能要件への対応**
   - パフォーマンス
   - スケーラビリティ
   - 保守性

10. **実装の順序**
    - 実装順序の推奨
    - 依存関係の考慮

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **既存プロジェクト構造を尊重**: 既存のディレクトリ構造やコーディング規約に従ってください
2. **トレーサビリティ**: 要件定義書の各要件に対応する設計を明示してください
3. **実装可能性**: 実装できない設計や曖昧な設計は避けてください
4. **判断の明示**: 3つの戦略判断（実装・テスト・テストコード）は必ず明記してください
5. **レビューされることを意識**: 設計書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（5つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 判断根拠は具体的かつ論理的に記載すること

## 出力形式

設計書は `.ai-workflow/issue-322/02_design/output/design.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。図表が必要な場合はMarkdownのコードブロックやテーブルを活用してください。

## 実装開始

上記を踏まえ、詳細設計書を作成してください。
