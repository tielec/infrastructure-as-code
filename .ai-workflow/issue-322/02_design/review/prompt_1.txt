# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-322/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-322/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #322
- **タイトル**: [FEATURE] AIワークフローのGitコミット時のユーザー名とメールアドレスを設定可能に
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/322
- **ラベル**: なし

### 本文

## 概要

AIワークフローでGitコミットを実行する際のユーザー名とメールアドレスを、環境変数やJenkinsパラメータで設定できるようにしたい。

現在はGitの設定がそのまま使用されているが、CI/CD環境では明示的にコミット者情報を指定したい場合がある。

## 要件

### 機能要件

**FR-001: 環境変数でのGit設定**
- `GIT_COMMIT_USER_NAME`: コミット時のユーザー名
- `GIT_COMMIT_USER_EMAIL`: コミット時のメールアドレス
- 環境変数が未設定の場合はデフォルトのGit設定を使用

**FR-002: Jenkinsパラメータでの設定**
- Jenkinsfileの`ai_workflow_orchestrator`ジョブにパラメータを追加
  - `GIT_COMMIT_USER_NAME`: デフォルト `AI Workflow Bot`
  - `GIT_COMMIT_USER_EMAIL`: デフォルト `ai-workflow@example.com`
- パラメータは環境変数として子プロセスに渡される

**FR-003: GitManagerでの適用**
- `GitManager.commit_and_push()`メソッド内で環境変数を読み取り
- コミット実行前に`git config user.name`と`git config user.email`を設定（ローカルリポジトリのみ）
- グローバル設定は変更しない

**FR-004: Python CLIでの設定**
- `main.py execute`コマンドに`--git-user`と`--git-email`オプションを追加（オプション）
- 優先順位: CLIオプション > 環境変数 > デフォルトGit設定

### 非機能要件

**NFR-001: 後方互換性**
- 環境変数が未設定の場合は従来通り動作
- 既存のワークフローに影響を与えない

**NFR-002: セキュリティ**
- メールアドレスのバリデーション（基本的な形式チェック）
- ユーザー名の長さ制限（1-100文字）

**NFR-003: ログ出力**
- 使用されているGit設定をログに出力
- デバッグ時の追跡を容易にする

## 実装ガイド

### 1. GitManagerの修正

```python
# scripts/ai-workflow/core/git_manager.py

def commit_and_push(self, message: str, files: List[str] = None):
    """
    ファイルをコミットしてリモートにプッシュ
    
    環境変数からGit設定を読み取り:
    - GIT_COMMIT_USER_NAME: コミット時のユーザー名
    - GIT_COMMIT_USER_EMAIL: コミット時のメールアドレス
    """
    # 環境変数からGit設定を取得
    git_user_name = os.getenv('GIT_COMMIT_USER_NAME')
    git_user_email = os.getenv('GIT_COMMIT_USER_EMAIL')
    
    # Git設定を一時的に設定（ローカルリポジトリのみ）
    if git_user_name:
        self._run_git_command(['config', 'user.name', git_user_name])
        print(f"[INFO] Git user.name set to: {git_user_name}")
    
    if git_user_email:
        self._run_git_command(['config', 'user.email', git_user_email])
        print(f"[INFO] Git user.email set to: {git_user_email}")
    
    # 既存のコミット処理...
```

### 2. Jenkinsfileの修正

```groovy
// jenkins/jobs/pipeline/AI_Workflow/ai-workflow-orchestrator/Jenkinsfile

parameters {
    string(
        name: 'ISSUE_URL',
        description: 'GitHub Issue URL'
    )
    string(
        name: 'GIT_COMMIT_USER_NAME',
        defaultValue: 'AI Workflow Bot',
        description: 'Git commit user name'
    )
    string(
        name: 'GIT_COMMIT_USER_EMAIL',
        defaultValue: 'ai-workflow@example.com',
        description: 'Git commit user email'
    )
    // 既存のパラメータ...
}

environment {
    GIT_COMMIT_USER_NAME = "${params.GIT_COMMIT_USER_NAME}"
    GIT_COMMIT_USER_EMAIL = "${params.GIT_COMMIT_USER_EMAIL}"
}
```

### 3. Job DSLの修正

```groovy
// jenkins/jobs/dsl/ai_workflow/ai_workflow_orchestrator.groovy

parameters {
    stringParam('ISSUE_URL', '', 'GitHub Issue URL (required)')
    stringParam('GIT_COMMIT_USER_NAME', 'AI Workflow Bot', 'Git commit user name')
    stringParam('GIT_COMMIT_USER_EMAIL', 'ai-workflow@example.com', 'Git commit user email')
    // 既存のパラメータ...
}
```

### 4. CLIオプションの追加（オプション）

```python
# scripts/ai-workflow/main.py

@click.command()
@click.option('--phase', required=True, help='Phase name')
@click.option('--issue', required=True, type=int, help='GitHub Issue number')
@click.option('--git-user', help='Git commit user name')
@click.option('--git-email', help='Git commit user email')
def execute(phase: str, issue: int, git_user: str = None, git_email: str = None):
    """Execute a specific phase"""
    # 環境変数に設定（優先度: CLI > 環境変数）
    if git_user:
        os.environ['GIT_COMMIT_USER_NAME'] = git_user
    if git_email:
        os.environ['GIT_COMMIT_USER_EMAIL'] = git_email
    
    # 既存の処理...
```

## テストケース

### TC-001: 環境変数での設定
- **前提条件**: 環境変数 `GIT_COMMIT_USER_NAME` と `GIT_COMMIT_USER_EMAIL` が設定されている
- **実行**: `python main.py execute --phase requirements --issue 123`
- **期待結果**: コミットのAuthorが環境変数の値になる

### TC-002: Jenkinsパラメータでの設定
- **前提条件**: Jenkinsジョブでパラメータを指定して実行
- **実行**: `ai_workflow_orchestrator` ジョブを実行
- **期待結果**: コミットのAuthorがJenkinsパラメータの値になる

### TC-003: 環境変数未設定時のデフォルト動作
- **前提条件**: 環境変数が未設定
- **実行**: `python main.py execute --phase requirements --issue 123`
- **期待結果**: 既存のGit設定（`git config user.name`）が使用される

### TC-004: バリデーションエラー
- **前提条件**: 不正なメールアドレスを設定
- **実行**: `GIT_COMMIT_USER_EMAIL=invalid-email python main.py execute --phase requirements --issue 123`
- **期待結果**: 警告ログが出力されるが処理は継続（またはエラーで停止）

## 受け入れ基準

- [ ] 環境変数 `GIT_COMMIT_USER_NAME` と `GIT_COMMIT_USER_EMAIL` でGit設定を変更できる
- [ ] Jenkinsパラメータでコミット者情報を指定できる
- [ ] 環境変数未設定時は既存のGit設定が使用される
- [ ] グローバルGit設定は変更されない（ローカルリポジトリのみ）
- [ ] 使用されているGit設定がログに出力される
- [ ] 既存のワークフローに影響を与えない（後方互換性）

## 優先度

Medium

## ラベル

enhancement, ai-workflow, git

## 関連Issue

なし

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **実装戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **テスト戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **既存コードへの影響範囲が分析されている**: PASS/FAIL - （コメント）
- [x/  ] **変更が必要なファイルがリストアップされている**: PASS/FAIL - （コメント）
- [x/  ] **設計が実装可能である**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、設計書のクリティカルシンキングレビューを実施してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
