# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-376/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-376/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-376/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**ALL**

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #376
- **タイトル**: [TASK] ai-workflowスクリプトの大規模リファクタリング
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/376
- **ラベル**: なし

### 本文

## 概要

scripts/ai-workflow/ のソースコードが肥大化し、メンテナンスが困難になっています。コードの可読性・保守性・テスタビリティを向上させるため、大規模なリファクタリングを実施します。

## 現状の問題点

### ファイルサイズの肥大化
- main.py: 1,080行 - エントリポイントの責務過多
- base_phase.py: 980行 - ベースクラスの肥大化
- git_manager.py: 939行 - Git操作の複雑化
- evaluation.py: 781行 - 評価ロジックの肥大化
- github_client.py: 758行 - GitHub API連携の複雑化

### 構造的な課題
- 単一責任原則の違反: 各クラス・モジュールが複数の責務を持つ
- 密結合: コンポーネント間の依存関係が複雑
- テストの困難性: ユニットテストが書きにくい構造
- コードの重複: 類似処理が複数箇所に存在

## リファクタリング方針

### 1. アーキテクチャの再設計
- [ ] クリーンアーキテクチャ原則の適用
- [ ] 責務の明確な分離
- [ ] インターフェースの定義と依存性注入

### 2. main.py のリファクタリング
- [ ] CLIインターフェース層の分離
- [ ] ワークフロー制御ロジックの抽出
- [ ] 設定管理の独立化
- [ ] エラーハンドリングの統一

### 3. core モジュールの再構成
- [ ] git_manager.py の分割
  - [ ] GitRepository（リポジトリ操作）
  - [ ] GitBranch（ブランチ管理）
  - [ ] GitCommit（コミット操作）
- [ ] github_client.py の分割
  - [ ] IssueClient（Issue操作）
  - [ ] PullRequestClient（PR操作）
  - [ ] CommentClient（コメント操作）
- [ ] content_parser.py の最適化
  - [ ] パーサーの分離
  - [ ] バリデーション処理の独立化

### 4. phases モジュールの改善
- [ ] base_phase.py の分割
  - [ ] AbstractPhase（抽象基底クラス）
  - [ ] PhaseExecutor（実行制御）
  - [ ] PhaseValidator（検証）
  - [ ] PhaseReporter（レポート生成）
- [ ] 各フェーズファイルの最適化
  - [ ] evaluation.py の機能分割
  - [ ] test_implementation.py の整理
  - [ ] documentation.py の見直し

### 5. 共通処理の抽出
- [ ] ログ処理の統一
- [ ] エラーハンドリングの共通化
- [ ] ファイル操作の抽象化
- [ ] レトライロジックの共通化

### 6. テストコードの改善
- [ ] テストヘルパーの整理
- [ ] モックの標準化
- [ ] テストデータの管理
- [ ] テストカバレッジの向上

### 7. ドキュメントの更新
- [ ] ARCHITECTURE.md の更新
- [ ] README.md の改訂
- [ ] CONTRIBUTION.md への追記
- [ ] コード内コメントの充実

## 期待される効果

- **可読性**: コードの理解が容易になる
- **保守性**: 変更・拡張が簡単になる
- **テスタビリティ**: ユニットテストが書きやすくなる
- **再利用性**: コンポーネントの再利用が可能になる
- **品質**: バグの早期発見と修正が容易になる

## 実施計画

1. **Phase 1**: アーキテクチャ設計ドキュメント作成
2. **Phase 2**: core モジュールのリファクタリング
3. **Phase 3**: phases モジュールのリファクタリング
4. **Phase 4**: main.py のリファクタリング
5. **Phase 5**: テストコードの整備
6. **Phase 6**: ドキュメント更新

## 注意事項

- 既存機能の動作を維持すること
- 段階的にリファクタリングを進めること
- 各段階でテストを実行し、回帰がないことを確認すること
- コードレビューを必須とすること

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-376/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
