# プロジェクト計画フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細なプロジェクト計画書を作成してください。
Phase 0はプロジェクトマネージャの役割を担い、開発作業を計画的かつ効率的に進められるようにします。

## Issue情報

## Issue情報

- **Issue番号**: #376
- **タイトル**: [TASK] ai-workflowスクリプトの大規模リファクタリング
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/376
- **ラベル**: なし

### 本文

## 概要

scripts/ai-workflow/ のソースコードが肥大化し、メンテナンスが困難になっています。コードの可読性・保守性・テスタビリティを向上させるため、大規模なリファクタリングを実施します。

## 現状の問題点

### ファイルサイズの肥大化
- main.py: 1,080行 - エントリポイントの責務過多
- base_phase.py: 980行 - ベースクラスの肥大化
- git_manager.py: 939行 - Git操作の複雑化
- evaluation.py: 781行 - 評価ロジックの肥大化
- github_client.py: 758行 - GitHub API連携の複雑化

### 構造的な課題
- 単一責任原則の違反: 各クラス・モジュールが複数の責務を持つ
- 密結合: コンポーネント間の依存関係が複雑
- テストの困難性: ユニットテストが書きにくい構造
- コードの重複: 類似処理が複数箇所に存在

## リファクタリング方針

### 1. アーキテクチャの再設計
- [ ] クリーンアーキテクチャ原則の適用
- [ ] 責務の明確な分離
- [ ] インターフェースの定義と依存性注入

### 2. main.py のリファクタリング
- [ ] CLIインターフェース層の分離
- [ ] ワークフロー制御ロジックの抽出
- [ ] 設定管理の独立化
- [ ] エラーハンドリングの統一

### 3. core モジュールの再構成
- [ ] git_manager.py の分割
  - [ ] GitRepository（リポジトリ操作）
  - [ ] GitBranch（ブランチ管理）
  - [ ] GitCommit（コミット操作）
- [ ] github_client.py の分割
  - [ ] IssueClient（Issue操作）
  - [ ] PullRequestClient（PR操作）
  - [ ] CommentClient（コメント操作）
- [ ] content_parser.py の最適化
  - [ ] パーサーの分離
  - [ ] バリデーション処理の独立化

### 4. phases モジュールの改善
- [ ] base_phase.py の分割
  - [ ] AbstractPhase（抽象基底クラス）
  - [ ] PhaseExecutor（実行制御）
  - [ ] PhaseValidator（検証）
  - [ ] PhaseReporter（レポート生成）
- [ ] 各フェーズファイルの最適化
  - [ ] evaluation.py の機能分割
  - [ ] test_implementation.py の整理
  - [ ] documentation.py の見直し

### 5. 共通処理の抽出
- [ ] ログ処理の統一
- [ ] エラーハンドリングの共通化
- [ ] ファイル操作の抽象化
- [ ] レトライロジックの共通化

### 6. テストコードの改善
- [ ] テストヘルパーの整理
- [ ] モックの標準化
- [ ] テストデータの管理
- [ ] テストカバレッジの向上

### 7. ドキュメントの更新
- [ ] ARCHITECTURE.md の更新
- [ ] README.md の改訂
- [ ] CONTRIBUTION.md への追記
- [ ] コード内コメントの充実

## 期待される効果

- **可読性**: コードの理解が容易になる
- **保守性**: 変更・拡張が簡単になる
- **テスタビリティ**: ユニットテストが書きやすくなる
- **再利用性**: コンポーネントの再利用が可能になる
- **品質**: バグの早期発見と修正が容易になる

## 実施計画

1. **Phase 1**: アーキテクチャ設計ドキュメント作成
2. **Phase 2**: core モジュールのリファクタリング
3. **Phase 3**: phases モジュールのリファクタリング
4. **Phase 4**: main.py のリファクタリング
5. **Phase 5**: テストコードの整備
6. **Phase 6**: ドキュメント更新

## 注意事項

- 既存機能の動作を維持すること
- 段階的にリファクタリングを進めること
- 各段階でテストを実行し、回帰がないことを確認すること
- コードレビューを必須とすること

## プロジェクト計画書の構成

以下のセクションを含むプロジェクト計画書を作成してください：

### 1. Issue分析
- **複雑度**: 簡単/中程度/複雑を判定
  - 簡単: 単一ファイルの修正、シンプルな機能追加（見積もり: ~4時間）
  - 中程度: 複数ファイルの修正、既存機能の拡張（見積もり: 4~16時間）
  - 複雑: アーキテクチャ変更、新規サブシステム追加（見積もり: 16時間~）
- **見積もり工数**: X時間（根拠を記載）
- **リスク評価**: 低/中/高

### 2. 実装戦略判断

**重要**: このセクションは最も重要です。Phase 2（Design）で使用されるため、必ず明記してください。

#### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- CREATE: 新規ファイル・クラス・モジュールの作成が中心
- EXTEND: 既存コードの拡張（機能追加）が中心
- REFACTOR: 既存コードのリファクタリング（構造改善）が中心

（判断理由を具体的に記載）

#### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- UNIT_ONLY: ユニットテストのみ（単純なロジック、外部依存なし）
- INTEGRATION_ONLY: インテグレーションテストのみ（外部システム連携中心）
- BDD_ONLY: BDDテストのみ（ユーザーストーリー中心）
- UNIT_INTEGRATION: ユニット + インテグレーション（一般的な機能開発）
- UNIT_BDD: ユニット + BDD（エンドユーザー向け機能）
- INTEGRATION_BDD: インテグレーション + BDD（システム間連携＋ユーザーストーリー）
- ALL: すべてのテストレベル（大規模な変更、高リスク）

（判断理由を具体的に記載）

#### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- EXTEND_TEST: 既存テストファイルに追加（既存機能の拡張時）
- CREATE_TEST: 新規テストファイル作成（新規機能追加時）
- BOTH_TEST: 両方（既存テスト拡張 + 新規テスト作成）

（判断理由を具体的に記載）

### 3. 影響範囲分析
- **既存コードへの影響**: 変更が必要なファイル・モジュール
- **依存関係の変更**: 新規依存の追加、既存依存の変更
- **マイグレーション要否**: データベーススキーマ変更、設定ファイル変更等

### 4. タスク分割

各フェーズについて、サブタスクを洗い出してください：

#### Phase 1: 要件定義 (見積もり: Xh)
- サブタスク1
- サブタスク2
...

#### Phase 2: 設計 (見積もり: Xh)
...

#### Phase 3: テストシナリオ (見積もり: Xh)
...

#### Phase 4: 実装 (見積もり: Xh)
...

#### Phase 5: テスト (見積もり: Xh)
...

#### Phase 6: ドキュメント (見積もり: Xh)
...

#### Phase 7: レポート (見積もり: Xh)
...

**タスク粒度基準**:
- 1タスク = 1~4時間程度で完了可能な作業単位
- 明確な完了条件（Done criteria）を持つ
- 他のタスクから独立して実装・テスト可能

### 5. 依存関係

タスク間の依存関係をMermaid形式で図示してください：

```mermaid
graph TD
    P1[Phase 1] --> P2[Phase 2]
    P2 --> P3[Phase 3]
    P3 --> P4[Phase 4]
    P4 --> P5[Phase 5]
    P5 --> P6[Phase 6]
    P6 --> P7[Phase 7]
```

### 6. リスクと軽減策

潜在的なリスクを洗い出し、各リスクに対する軽減策を記載してください：

#### リスク1: （リスク名）
- **影響度**: 低/中/高
- **確率**: 低/中/高
- **軽減策**: （具体的な対策）

#### リスク2: （リスク名）
...

**リスクカテゴリ**:
- 技術的リスク: 新技術の学習コスト、既存システムとの統合問題
- スコープリスク: 要件の曖昧さ、スコープクリープ
- リソースリスク: 工数不足、スキル不足
- 依存リスク: 外部システム依存、ブロッキング問題

### 7. 品質ゲート

各フェーズの合格基準を定義してください：

#### Phase 1: 要件定義
- [ ] 機能要件が明確に記載されている
- [ ] 受け入れ基準が定義されている
...

#### Phase 2: 設計
- [ ] 実装戦略の判断根拠が明記されている
- [ ] テスト戦略の判断根拠が明記されている
...

（以下、Phase 3~7についても記載）

## 出力形式

Markdown形式でプロジェクト計画書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-376/00_planning/output/planning.md
```

## 品質ゲート（Phase 0）

作成するプロジェクト計画書は、以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略が明確に決定されている**（CREATE/EXTEND/REFACTOR）
- [ ] **テスト戦略が明確に決定されている**（UNIT_ONLY/.../ALL）
- [ ] **テストコード戦略が明確に決定されている**（EXTEND_TEST/CREATE_TEST/BOTH_TEST）
- [ ] **影響範囲が分析されている**
- [ ] **タスク分割が適切な粒度である**（1タスク = 1~4時間）
- [ ] **リスクが洗い出されている**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **実装戦略の判断**: Phase 2で使用されるため、必ず明記してください
   - 実装戦略: CREATE/EXTEND/REFACTOR
   - テスト戦略: UNIT_ONLY/.../ALL
   - テストコード戦略: EXTEND_TEST/CREATE_TEST/BOTH_TEST

2. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な計画を記述
   - NG例: "適切に対応する"、"必要に応じて実施"
   - OK例: "Phase 2で詳細設計を実施"、"最大3回のリトライを実施"

3. **実現可能性**: 見積もりが現実的か、リソースは十分か確認
   - タスク粒度が大きすぎないか（1タスク = 1~4時間）
   - 依存関係が正確に記載されているか

4. **リスク分析の網羅性**: 重要なリスクが見逃されていないか確認
   - 技術的リスク、スコープリスク、リソースリスク、依存リスク

5. **レビューされることを意識**: 作成した計画書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（6つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント

## プロジェクト計画書の作成を開始してください
