# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-376/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue情報

- **Issue番号**: #376
- **タイトル**: [TASK] ai-workflowスクリプトの大規模リファクタリング
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/376
- **ラベル**: なし

### 本文

## 概要

scripts/ai-workflow/ のソースコードが肥大化し、メンテナンスが困難になっています。コードの可読性・保守性・テスタビリティを向上させるため、大規模なリファクタリングを実施します。

## 現状の問題点

### ファイルサイズの肥大化
- main.py: 1,080行 - エントリポイントの責務過多
- base_phase.py: 980行 - ベースクラスの肥大化
- git_manager.py: 939行 - Git操作の複雑化
- evaluation.py: 781行 - 評価ロジックの肥大化
- github_client.py: 758行 - GitHub API連携の複雑化

### 構造的な課題
- 単一責任原則の違反: 各クラス・モジュールが複数の責務を持つ
- 密結合: コンポーネント間の依存関係が複雑
- テストの困難性: ユニットテストが書きにくい構造
- コードの重複: 類似処理が複数箇所に存在

## リファクタリング方針

### 1. アーキテクチャの再設計
- [ ] クリーンアーキテクチャ原則の適用
- [ ] 責務の明確な分離
- [ ] インターフェースの定義と依存性注入

### 2. main.py のリファクタリング
- [ ] CLIインターフェース層の分離
- [ ] ワークフロー制御ロジックの抽出
- [ ] 設定管理の独立化
- [ ] エラーハンドリングの統一

### 3. core モジュールの再構成
- [ ] git_manager.py の分割
  - [ ] GitRepository（リポジトリ操作）
  - [ ] GitBranch（ブランチ管理）
  - [ ] GitCommit（コミット操作）
- [ ] github_client.py の分割
  - [ ] IssueClient（Issue操作）
  - [ ] PullRequestClient（PR操作）
  - [ ] CommentClient（コメント操作）
- [ ] content_parser.py の最適化
  - [ ] パーサーの分離
  - [ ] バリデーション処理の独立化

### 4. phases モジュールの改善
- [ ] base_phase.py の分割
  - [ ] AbstractPhase（抽象基底クラス）
  - [ ] PhaseExecutor（実行制御）
  - [ ] PhaseValidator（検証）
  - [ ] PhaseReporter（レポート生成）
- [ ] 各フェーズファイルの最適化
  - [ ] evaluation.py の機能分割
  - [ ] test_implementation.py の整理
  - [ ] documentation.py の見直し

### 5. 共通処理の抽出
- [ ] ログ処理の統一
- [ ] エラーハンドリングの共通化
- [ ] ファイル操作の抽象化
- [ ] レトライロジックの共通化

### 6. テストコードの改善
- [ ] テストヘルパーの整理
- [ ] モックの標準化
- [ ] テストデータの管理
- [ ] テストカバレッジの向上

### 7. ドキュメントの更新
- [ ] ARCHITECTURE.md の更新
- [ ] README.md の改訂
- [ ] CONTRIBUTION.md への追記
- [ ] コード内コメントの充実

## 期待される効果

- **可読性**: コードの理解が容易になる
- **保守性**: 変更・拡張が簡単になる
- **テスタビリティ**: ユニットテストが書きやすくなる
- **再利用性**: コンポーネントの再利用が可能になる
- **品質**: バグの早期発見と修正が容易になる

## 実施計画

1. **Phase 1**: アーキテクチャ設計ドキュメント作成
2. **Phase 2**: core モジュールのリファクタリング
3. **Phase 3**: phases モジュールのリファクタリング
4. **Phase 4**: main.py のリファクタリング
5. **Phase 5**: テストコードの整備
6. **Phase 6**: ドキュメント更新

## 注意事項

- 既存機能の動作を維持すること
- 段階的にリファクタリングを進めること
- 各段階でテストを実行し、回帰がないことを確認すること
- コードレビューを必須とすること

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-376/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
