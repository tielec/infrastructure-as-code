# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-376/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-376/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #376
- **タイトル**: [TASK] ai-workflowスクリプトの大規模リファクタリング
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/376
- **ラベル**: なし

### 本文

## 概要

scripts/ai-workflow/ のソースコードが肥大化し、メンテナンスが困難になっています。コードの可読性・保守性・テスタビリティを向上させるため、大規模なリファクタリングを実施します。

## 現状の問題点

### ファイルサイズの肥大化
- main.py: 1,080行 - エントリポイントの責務過多
- base_phase.py: 980行 - ベースクラスの肥大化
- git_manager.py: 939行 - Git操作の複雑化
- evaluation.py: 781行 - 評価ロジックの肥大化
- github_client.py: 758行 - GitHub API連携の複雑化

### 構造的な課題
- 単一責任原則の違反: 各クラス・モジュールが複数の責務を持つ
- 密結合: コンポーネント間の依存関係が複雑
- テストの困難性: ユニットテストが書きにくい構造
- コードの重複: 類似処理が複数箇所に存在

## リファクタリング方針

### 1. アーキテクチャの再設計
- [ ] クリーンアーキテクチャ原則の適用
- [ ] 責務の明確な分離
- [ ] インターフェースの定義と依存性注入

### 2. main.py のリファクタリング
- [ ] CLIインターフェース層の分離
- [ ] ワークフロー制御ロジックの抽出
- [ ] 設定管理の独立化
- [ ] エラーハンドリングの統一

### 3. core モジュールの再構成
- [ ] git_manager.py の分割
  - [ ] GitRepository（リポジトリ操作）
  - [ ] GitBranch（ブランチ管理）
  - [ ] GitCommit（コミット操作）
- [ ] github_client.py の分割
  - [ ] IssueClient（Issue操作）
  - [ ] PullRequestClient（PR操作）
  - [ ] CommentClient（コメント操作）
- [ ] content_parser.py の最適化
  - [ ] パーサーの分離
  - [ ] バリデーション処理の独立化

### 4. phases モジュールの改善
- [ ] base_phase.py の分割
  - [ ] AbstractPhase（抽象基底クラス）
  - [ ] PhaseExecutor（実行制御）
  - [ ] PhaseValidator（検証）
  - [ ] PhaseReporter（レポート生成）
- [ ] 各フェーズファイルの最適化
  - [ ] evaluation.py の機能分割
  - [ ] test_implementation.py の整理
  - [ ] documentation.py の見直し

### 5. 共通処理の抽出
- [ ] ログ処理の統一
- [ ] エラーハンドリングの共通化
- [ ] ファイル操作の抽象化
- [ ] レトライロジックの共通化

### 6. テストコードの改善
- [ ] テストヘルパーの整理
- [ ] モックの標準化
- [ ] テストデータの管理
- [ ] テストカバレッジの向上

### 7. ドキュメントの更新
- [ ] ARCHITECTURE.md の更新
- [ ] README.md の改訂
- [ ] CONTRIBUTION.md への追記
- [ ] コード内コメントの充実

## 期待される効果

- **可読性**: コードの理解が容易になる
- **保守性**: 変更・拡張が簡単になる
- **テスタビリティ**: ユニットテストが書きやすくなる
- **再利用性**: コンポーネントの再利用が可能になる
- **品質**: バグの早期発見と修正が容易になる

## 実施計画

1. **Phase 1**: アーキテクチャ設計ドキュメント作成
2. **Phase 2**: core モジュールのリファクタリング
3. **Phase 3**: phases モジュールのリファクタリング
4. **Phase 4**: main.py のリファクタリング
5. **Phase 5**: テストコードの整備
6. **Phase 6**: ドキュメント更新

## 注意事項

- 既存機能の動作を維持すること
- 段階的にリファクタリングを進めること
- 各段階でテストを実行し、回帰がないことを確認すること
- コードレビューを必須とすること

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **実装戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **テスト戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **既存コードへの影響範囲が分析されている**: PASS/FAIL - （コメント）
- [x/  ] **変更が必要なファイルがリストアップされている**: PASS/FAIL - （コメント）
- [x/  ] **設計が実装可能である**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、設計書のクリティカルシンキングレビューを実施してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
