# プロジェクト計画フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細なプロジェクト計画書を作成してください。
Phase 0はプロジェクトマネージャの役割を担い、開発作業を計画的かつ効率的に進められるようにします。

## Issue情報

## Issue情報

- **Issue番号**: #380
- **タイトル**: [TASK] Issue #376の続き - Application/CLI層の実装
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/380
- **ラベル**: なし

### 本文

## 親Issue

#376

## 概要

Issue #376の大規模リファクタリングにて、Phase 4（実装フェーズ）で基盤レイヤー（Infrastructure層、Domain層）の実装が完了しましたが、上位レイヤー（Application層、CLI層）および既存ファイルの修正が未完了のままとなっています。

本issueでは、残りの実装を完了させます。

## 背景

### 完了済み（Issue #376）
- ✅ Infrastructure層（5ファイル）
  - common/logger.py
  - common/error_handler.py
  - common/file_handler.py
  - common/retry.py
- ✅ Domain層 - Git Operations（4ファイル）
  - core/git/repository.py
  - core/git/branch.py
  - core/git/commit.py
- ✅ Domain層 - GitHub Operations（4ファイル）
  - core/github/issue_client.py
  - core/github/pr_client.py
  - core/github/comment_client.py
- ✅ Domain層 - Phases（5ファイル）
  - phases/base/abstract_phase.py
  - phases/base/phase_executor.py
  - phases/base/phase_validator.py
  - phases/base/phase_reporter.py

### 未完了（本issueで実装）

## タスク

### 1. Application層の実装（優先度: 高）

#### 1.1 core/workflow_controller.py
- [ ] ワークフロー全体の制御クラスを実装
- [ ] ワークフロー初期化（`initialize()`）
- [ ] フェーズ実行制御（`execute_phase()`, `execute_all_phases()`）
- [ ] 依存関係管理
- [ ] エラーハンドリング

**依存**:
- PhaseExecutor
- MetadataManager
- GitRepository, GitBranch, GitCommit
- IssueClient, PRClient, CommentClient

**見積もり**: 24-40時間

#### 1.2 core/config_manager.py
- [ ] 設定管理クラスを実装
- [ ] `config.yaml` の読み込み
- [ ] 環境変数の読み込み
- [ ] 設定のバリデーション
- [ ] デフォルト値の管理

**見積もり**: 8-16時間

### 2. CLI層の実装（優先度: 高）

#### 2.1 cli/commands.py
- [ ] CLIコマンド定義クラスを実装
- [ ] `@click.group()` によるCLIグループ定義
- [ ] `init` コマンド: ワークフロー初期化
- [ ] `execute` コマンド: フェーズ実行
- [ ] `resume` コマンド: ワークフロー再開（既存機能）
- [ ] `status` コマンド: ステータス確認（既存機能）

**依存**:
- WorkflowController
- ConfigManager

**見積もり**: 8-16時間

### 3. 既存ファイルの修正（優先度: 中）

#### 3.1 main.py
- [ ] CLI層を `cli/commands.py` に分離
- [ ] インポートパスの修正
- [ ] `WorkflowController` の呼び出しに変更

**見積もり**: 4-8時間

#### 3.2 phases/*.py（10ファイル）
- [ ] `BasePhase` → `AbstractPhase` への継承変更
- [ ] インポートパスの修正
  - `from phases.base_phase import BasePhase` → `from phases.base.abstract_phase import AbstractPhase`
  - `from core.git_manager import GitManager` → `from core.git.* import ...`
  - `from core.github_client import GitHubClient` → `from core.github.* import ...`

**対象ファイル**:
- phases/planning.py
- phases/requirements.py
- phases/design.py
- phases/test_scenario.py
- phases/implementation.py
- phases/test_implementation.py
- phases/testing.py
- phases/documentation.py
- phases/report.py
- phases/evaluation.py

**見積もり**: 8-16時間

#### 3.3 core/metadata_manager.py
- [ ] 新しい例外クラスのインポート（`from common.error_handler import MetadataError`）
- [ ] エラーハンドリングの統一

**見積もり**: 2-4時間

#### 3.4 core/claude_agent_client.py
- [ ] 新しい例外クラスのインポート（`from common.error_handler import ClaudeAPIError`）
- [ ] エラーハンドリングの統一

**見積もり**: 2-4時間

### 4. 既存テストの修正（優先度: 高）

#### 4.1 既存テストの失敗修正
- [ ] 116件の失敗テストを修正
- [ ] 61件のエラーを修正
- [ ] テストが新しいアーキテクチャに対応するように更新

**見積もり**: 16-32時間

### 5. 削除予定ファイル（優先度: 低）

**段階的削除が必要**:
- [ ] `phases/base_phase.py` - 4ファイルに分割後、削除
- [ ] `core/git_manager.py` - 3ファイルに分割後、削除
- [ ] `core/github_client.py` - 3ファイルに分割後、削除

**削除手順**:
1. 新規クラスの動作確認
2. すべてのテストが通過することを確認
3. インポート参照がないことを確認
4. 削除実行

**見積もり**: 4-8時間

## 総見積もり時間

**最小**: 72時間（約9日）  
**最大**: 140時間（約17.5日）  
**平均**: 106時間（約13日）

## 関連ドキュメント

- Planning Document: `.ai-workflow/issue-376/00_planning/output/planning.md`
- Design Document: `.ai-workflow/issue-376/02_design/output/design.md`
- Implementation Log: `.ai-workflow/issue-376/04_implementation/output/implementation.md`
- Evaluation Report: `.ai-workflow/issue-376/09_evaluation/output/evaluation_report.md`

## 注意事項

1. **設計準拠**: Phase 2の設計書（design.md）に従って実装
2. **既存コードの尊重**: 既存のスタイルを維持
3. **段階的実装**: 一度にすべて実装せず、段階的に
4. **テスト**: 各ステップで既存テストが通過することを確認
5. **後方互換性**: CLIコマンド、メタデータフォーマット、設定ファイル構造を維持

## 実施順序（推奨）

1. Application層の実装（WorkflowController, ConfigManager）
2. CLI層の実装（cli/commands.py）
3. main.pyの修正
4. phases/*.pyの修正
5. 既存テストの修正
6. 旧ファイルの削除
7. 統合テスト実行

## プロジェクト計画書の構成

以下のセクションを含むプロジェクト計画書を作成してください：

### 1. Issue分析
- **複雑度**: 簡単/中程度/複雑を判定
  - 簡単: 単一ファイルの修正、シンプルな機能追加（見積もり: ~4時間）
  - 中程度: 複数ファイルの修正、既存機能の拡張（見積もり: 4~16時間）
  - 複雑: アーキテクチャ変更、新規サブシステム追加（見積もり: 16時間~）
- **見積もり工数**: X時間（根拠を記載）
- **リスク評価**: 低/中/高

### 2. 実装戦略判断

**重要**: このセクションは最も重要です。Phase 2（Design）で使用されるため、必ず明記してください。

#### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- CREATE: 新規ファイル・クラス・モジュールの作成が中心
- EXTEND: 既存コードの拡張（機能追加）が中心
- REFACTOR: 既存コードのリファクタリング（構造改善）が中心

（判断理由を具体的に記載）

#### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- UNIT_ONLY: ユニットテストのみ（単純なロジック、外部依存なし）
- INTEGRATION_ONLY: インテグレーションテストのみ（外部システム連携中心）
- BDD_ONLY: BDDテストのみ（ユーザーストーリー中心）
- UNIT_INTEGRATION: ユニット + インテグレーション（一般的な機能開発）
- UNIT_BDD: ユニット + BDD（エンドユーザー向け機能）
- INTEGRATION_BDD: インテグレーション + BDD（システム間連携＋ユーザーストーリー）
- ALL: すべてのテストレベル（大規模な変更、高リスク）

（判断理由を具体的に記載）

#### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- EXTEND_TEST: 既存テストファイルに追加（既存機能の拡張時）
- CREATE_TEST: 新規テストファイル作成（新規機能追加時）
- BOTH_TEST: 両方（既存テスト拡張 + 新規テスト作成）

（判断理由を具体的に記載）

### 3. 影響範囲分析
- **既存コードへの影響**: 変更が必要なファイル・モジュール
- **依存関係の変更**: 新規依存の追加、既存依存の変更
- **マイグレーション要否**: データベーススキーマ変更、設定ファイル変更等

### 4. タスク分割

各フェーズについて、サブタスクを洗い出してください：

#### Phase 1: 要件定義 (見積もり: Xh)
- サブタスク1
- サブタスク2
...

#### Phase 2: 設計 (見積もり: Xh)
...

#### Phase 3: テストシナリオ (見積もり: Xh)
...

#### Phase 4: 実装 (見積もり: Xh)
...

#### Phase 5: テスト (見積もり: Xh)
...

#### Phase 6: ドキュメント (見積もり: Xh)
...

#### Phase 7: レポート (見積もり: Xh)
...

**タスク粒度基準**:
- 1タスク = 1~4時間程度で完了可能な作業単位
- 明確な完了条件（Done criteria）を持つ
- 他のタスクから独立して実装・テスト可能

### 5. 依存関係

タスク間の依存関係をMermaid形式で図示してください：

```mermaid
graph TD
    P1[Phase 1] --> P2[Phase 2]
    P2 --> P3[Phase 3]
    P3 --> P4[Phase 4]
    P4 --> P5[Phase 5]
    P5 --> P6[Phase 6]
    P6 --> P7[Phase 7]
```

### 6. リスクと軽減策

潜在的なリスクを洗い出し、各リスクに対する軽減策を記載してください：

#### リスク1: （リスク名）
- **影響度**: 低/中/高
- **確率**: 低/中/高
- **軽減策**: （具体的な対策）

#### リスク2: （リスク名）
...

**リスクカテゴリ**:
- 技術的リスク: 新技術の学習コスト、既存システムとの統合問題
- スコープリスク: 要件の曖昧さ、スコープクリープ
- リソースリスク: 工数不足、スキル不足
- 依存リスク: 外部システム依存、ブロッキング問題

### 7. 品質ゲート

各フェーズの合格基準を定義してください：

#### Phase 1: 要件定義
- [ ] 機能要件が明確に記載されている
- [ ] 受け入れ基準が定義されている
...

#### Phase 2: 設計
- [ ] 実装戦略の判断根拠が明記されている
- [ ] テスト戦略の判断根拠が明記されている
...

（以下、Phase 3~7についても記載）

## 出力形式

Markdown形式でプロジェクト計画書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-380/00_planning/output/planning.md
```

## 品質ゲート（Phase 0）

作成するプロジェクト計画書は、以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略が明確に決定されている**（CREATE/EXTEND/REFACTOR）
- [ ] **テスト戦略が明確に決定されている**（UNIT_ONLY/.../ALL）
- [ ] **テストコード戦略が明確に決定されている**（EXTEND_TEST/CREATE_TEST/BOTH_TEST）
- [ ] **影響範囲が分析されている**
- [ ] **タスク分割が適切な粒度である**（1タスク = 1~4時間）
- [ ] **リスクが洗い出されている**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **実装戦略の判断**: Phase 2で使用されるため、必ず明記してください
   - 実装戦略: CREATE/EXTEND/REFACTOR
   - テスト戦略: UNIT_ONLY/.../ALL
   - テストコード戦略: EXTEND_TEST/CREATE_TEST/BOTH_TEST

2. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な計画を記述
   - NG例: "適切に対応する"、"必要に応じて実施"
   - OK例: "Phase 2で詳細設計を実施"、"最大3回のリトライを実施"

3. **実現可能性**: 見積もりが現実的か、リソースは十分か確認
   - タスク粒度が大きすぎないか（1タスク = 1~4時間）
   - 依存関係が正確に記載されているか

4. **リスク分析の網羅性**: 重要なリスクが見逃されていないか確認
   - 技術的リスク、スコープリスク、リソースリスク、依存リスク

5. **レビューされることを意識**: 作成した計画書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（6つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント

## プロジェクト計画書の作成を開始してください
