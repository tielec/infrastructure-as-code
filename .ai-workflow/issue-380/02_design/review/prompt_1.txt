# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-380/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-380/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #380
- **タイトル**: [TASK] Issue #376の続き - Application/CLI層の実装
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/380
- **ラベル**: なし

### 本文

## 親Issue

#376

## 概要

Issue #376の大規模リファクタリングにて、Phase 4（実装フェーズ）で基盤レイヤー（Infrastructure層、Domain層）の実装が完了しましたが、上位レイヤー（Application層、CLI層）および既存ファイルの修正が未完了のままとなっています。

本issueでは、残りの実装を完了させます。

## 背景

### 完了済み（Issue #376）
- ✅ Infrastructure層（5ファイル）
  - common/logger.py
  - common/error_handler.py
  - common/file_handler.py
  - common/retry.py
- ✅ Domain層 - Git Operations（4ファイル）
  - core/git/repository.py
  - core/git/branch.py
  - core/git/commit.py
- ✅ Domain層 - GitHub Operations（4ファイル）
  - core/github/issue_client.py
  - core/github/pr_client.py
  - core/github/comment_client.py
- ✅ Domain層 - Phases（5ファイル）
  - phases/base/abstract_phase.py
  - phases/base/phase_executor.py
  - phases/base/phase_validator.py
  - phases/base/phase_reporter.py

### 未完了（本issueで実装）

## タスク

### 1. Application層の実装（優先度: 高）

#### 1.1 core/workflow_controller.py
- [ ] ワークフロー全体の制御クラスを実装
- [ ] ワークフロー初期化（`initialize()`）
- [ ] フェーズ実行制御（`execute_phase()`, `execute_all_phases()`）
- [ ] 依存関係管理
- [ ] エラーハンドリング

**依存**:
- PhaseExecutor
- MetadataManager
- GitRepository, GitBranch, GitCommit
- IssueClient, PRClient, CommentClient

**見積もり**: 24-40時間

#### 1.2 core/config_manager.py
- [ ] 設定管理クラスを実装
- [ ] `config.yaml` の読み込み
- [ ] 環境変数の読み込み
- [ ] 設定のバリデーション
- [ ] デフォルト値の管理

**見積もり**: 8-16時間

### 2. CLI層の実装（優先度: 高）

#### 2.1 cli/commands.py
- [ ] CLIコマンド定義クラスを実装
- [ ] `@click.group()` によるCLIグループ定義
- [ ] `init` コマンド: ワークフロー初期化
- [ ] `execute` コマンド: フェーズ実行
- [ ] `resume` コマンド: ワークフロー再開（既存機能）
- [ ] `status` コマンド: ステータス確認（既存機能）

**依存**:
- WorkflowController
- ConfigManager

**見積もり**: 8-16時間

### 3. 既存ファイルの修正（優先度: 中）

#### 3.1 main.py
- [ ] CLI層を `cli/commands.py` に分離
- [ ] インポートパスの修正
- [ ] `WorkflowController` の呼び出しに変更

**見積もり**: 4-8時間

#### 3.2 phases/*.py（10ファイル）
- [ ] `BasePhase` → `AbstractPhase` への継承変更
- [ ] インポートパスの修正
  - `from phases.base_phase import BasePhase` → `from phases.base.abstract_phase import AbstractPhase`
  - `from core.git_manager import GitManager` → `from core.git.* import ...`
  - `from core.github_client import GitHubClient` → `from core.github.* import ...`

**対象ファイル**:
- phases/planning.py
- phases/requirements.py
- phases/design.py
- phases/test_scenario.py
- phases/implementation.py
- phases/test_implementation.py
- phases/testing.py
- phases/documentation.py
- phases/report.py
- phases/evaluation.py

**見積もり**: 8-16時間

#### 3.3 core/metadata_manager.py
- [ ] 新しい例外クラスのインポート（`from common.error_handler import MetadataError`）
- [ ] エラーハンドリングの統一

**見積もり**: 2-4時間

#### 3.4 core/claude_agent_client.py
- [ ] 新しい例外クラスのインポート（`from common.error_handler import ClaudeAPIError`）
- [ ] エラーハンドリングの統一

**見積もり**: 2-4時間

### 4. 既存テストの修正（優先度: 高）

#### 4.1 既存テストの失敗修正
- [ ] 116件の失敗テストを修正
- [ ] 61件のエラーを修正
- [ ] テストが新しいアーキテクチャに対応するように更新

**見積もり**: 16-32時間

### 5. 削除予定ファイル（優先度: 低）

**段階的削除が必要**:
- [ ] `phases/base_phase.py` - 4ファイルに分割後、削除
- [ ] `core/git_manager.py` - 3ファイルに分割後、削除
- [ ] `core/github_client.py` - 3ファイルに分割後、削除

**削除手順**:
1. 新規クラスの動作確認
2. すべてのテストが通過することを確認
3. インポート参照がないことを確認
4. 削除実行

**見積もり**: 4-8時間

## 総見積もり時間

**最小**: 72時間（約9日）  
**最大**: 140時間（約17.5日）  
**平均**: 106時間（約13日）

## 関連ドキュメント

- Planning Document: `.ai-workflow/issue-376/00_planning/output/planning.md`
- Design Document: `.ai-workflow/issue-376/02_design/output/design.md`
- Implementation Log: `.ai-workflow/issue-376/04_implementation/output/implementation.md`
- Evaluation Report: `.ai-workflow/issue-376/09_evaluation/output/evaluation_report.md`

## 注意事項

1. **設計準拠**: Phase 2の設計書（design.md）に従って実装
2. **既存コードの尊重**: 既存のスタイルを維持
3. **段階的実装**: 一度にすべて実装せず、段階的に
4. **テスト**: 各ステップで既存テストが通過することを確認
5. **後方互換性**: CLIコマンド、メタデータフォーマット、設定ファイル構造を維持

## 実施順序（推奨）

1. Application層の実装（WorkflowController, ConfigManager）
2. CLI層の実装（cli/commands.py）
3. main.pyの修正
4. phases/*.pyの修正
5. 既存テストの修正
6. 旧ファイルの削除
7. 統合テスト実行

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **実装戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **テスト戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **既存コードへの影響範囲が分析されている**: PASS/FAIL - （コメント）
- [x/  ] **変更が必要なファイルがリストアップされている**: PASS/FAIL - （コメント）
- [x/  ] **設計が実装可能である**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、設計書のクリティカルシンキングレビューを実施してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
