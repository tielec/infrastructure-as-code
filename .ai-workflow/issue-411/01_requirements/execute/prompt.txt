# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-411/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue概要

- **Issue番号**: #411
- **タイトル**: [TASK] AI Workflow V1 (Python版) の安全な削除計画
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/411
- **ラベル**: なし

### 本文

## 概要

AI Workflow V2 (TypeScript版) がおおよそ動作するようになったため、V1 (Python版) を安全に削除する。

## 削除対象

- `scripts/ai-workflow/` ディレクトリ全体
  - Python スクリプト群
  - 関連する設定ファイル
  - ドキュメント

## 削除計画 (4フェーズ)

### Phase 1: Deprecated 化 (1週間)

- [ ] V1 ディレクトリに DEPRECATED.md を追加
- [ ] README.md に非推奨警告を追加
- [ ] Jenkins ジョブに非推奨警告を追加
- [ ] 1週間の猶予期間を設定

### Phase 2: Jenkins ジョブの更新

- [ ] V1 を使用している Jenkins ジョブを特定
- [ ] 各ジョブを V2 に切り替え
- [ ] 切り替え後の動作確認

### Phase 3: ドキュメント更新

- [ ] README.md から V1 への参照を削除
- [ ] ARCHITECTURE.md から V1 への参照を削除
- [ ] その他のドキュメントから V1 への参照を削除

### Phase 4: 実際の削除

- [ ] `scripts/ai-workflow/` ディレクトリの削除
- [ ] 削除後の動作確認
- [ ] 削除コミットの作成

## 削除前チェックリスト

### Jenkins 関連
- [ ] V1 を参照している Jenkins ジョブがないか確認
- [ ] Jenkins DSL ファイルに V1 への参照がないか確認
- [ ] Jenkinsfile に V1 への参照がないか確認

### ドキュメント関連
- [ ] README.md に V1 への参照がないか確認
- [ ] ARCHITECTURE.md に V1 への参照がないか確認
- [ ] CLAUDE.md に V1 への参照がないか確認
- [ ] その他の .md ファイルに V1 への参照がないか確認

### 依存関係
- [ ] V1 に依存しているスクリプトがないか確認
- [ ] V1 に依存している Ansible プレイブックがないか確認

### バックアップ
- [ ] 削除前に V1 のバックアップを作成
  - Git ブランチとして保存、または
  - tar.gz アーカイブとして保存

## バックアップ方法

### 方法1: Git ブランチとして保存
```bash
git checkout -b archive/ai-workflow-v1-python
git push origin archive/ai-workflow-v1-python
git checkout main
```

### 方法2: アーカイブとして保存
```bash
tar -czf ai-workflow-v1-backup-$(date +%Y%m%d).tar.gz scripts/ai-workflow/
```

## 削除後の確認項目

- [ ] Jenkins ジョブが正常に動作するか
- [ ] V2 ですべての機能が動作するか
- [ ] ドキュメントのリンク切れがないか
- [ ] CI/CD パイプラインが正常に動作するか

## ロールバック手順

削除後に問題が発生した場合:

1. バックアップブランチから復元:
```bash
git checkout archive/ai-workflow-v1-python
git checkout main
git checkout archive/ai-workflow-v1-python -- scripts/ai-workflow/
git commit -m "[rollback] Restore AI Workflow V1"
```

2. アーカイブから復元:
```bash
tar -xzf ai-workflow-v1-backup-YYYYMMDD.tar.gz
git add scripts/ai-workflow/
git commit -m "[rollback] Restore AI Workflow V1"
```

## リスク評価

| リスク | 影響度 | 対策 |
|--------|--------|------|
| Jenkins ジョブの停止 | 高 | Phase 2 で事前に V2 へ移行 |
| ドキュメントのリンク切れ | 中 | Phase 3 で事前に更新 |
| 依存スクリプトの破損 | 高 | 削除前チェックリストで確認 |
| ロールバック不可 | 高 | バックアップ作成を必須化 |

## スケジュール

- Week 1: Phase 1 (Deprecated 化 + 猶予期間)
- Week 2: Phase 2-3 (Jenkins 更新 + ドキュメント更新)
- Week 3: Phase 4 (削除実行 + 確認)

## 関連 Issue

- #369 (AI Workflow V2 マルチリポジトリ対応)
- #405 (フェーズ依存関係のオプショナル化)

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-411/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
