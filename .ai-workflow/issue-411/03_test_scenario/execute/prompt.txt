# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-411/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-411/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-411/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**INTEGRATION_ONLY**

### GitHub Issue情報（参考）
## Issue概要

- **Issue番号**: #411
- **タイトル**: [TASK] AI Workflow V1 (Python版) の安全な削除計画
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/411
- **ラベル**: なし

### 本文

## 概要

AI Workflow V2 (TypeScript版) がおおよそ動作するようになったため、V1 (Python版) を安全に削除する。

## 削除対象

- `scripts/ai-workflow/` ディレクトリ全体
  - Python スクリプト群
  - 関連する設定ファイル
  - ドキュメント

## 削除計画 (4フェーズ)

### Phase 1: Deprecated 化 (1週間)

- [ ] V1 ディレクトリに DEPRECATED.md を追加
- [ ] README.md に非推奨警告を追加
- [ ] Jenkins ジョブに非推奨警告を追加
- [ ] 1週間の猶予期間を設定

### Phase 2: Jenkins ジョブの更新

- [ ] V1 を使用している Jenkins ジョブを特定
- [ ] 各ジョブを V2 に切り替え
- [ ] 切り替え後の動作確認

### Phase 3: ドキュメント更新

- [ ] README.md から V1 への参照を削除
- [ ] ARCHITECTURE.md から V1 への参照を削除
- [ ] その他のドキュメントから V1 への参照を削除

### Phase 4: 実際の削除

- [ ] `scripts/ai-workflow/` ディレクトリの削除
- [ ] 削除後の動作確認
- [ ] 削除コミットの作成

## 削除前チェックリスト

### Jenkins 関連
- [ ] V1 を参照している Jenkins ジョブがないか確認
- [ ] Jenkins DSL ファイルに V1 への参照がないか確認
- [ ] Jenkinsfile に V1 への参照がないか確認

### ドキュメント関連
- [ ] README.md に V1 への参照がないか確認
- [ ] ARCHITECTURE.md に V1 への参照がないか確認
- [ ] CLAUDE.md に V1 への参照がないか確認
- [ ] その他の .md ファイルに V1 への参照がないか確認

### 依存関係
- [ ] V1 に依存しているスクリプトがないか確認
- [ ] V1 に依存している Ansible プレイブックがないか確認

### バックアップ
- [ ] 削除前に V1 のバックアップを作成
  - Git ブランチとして保存、または
  - tar.gz アーカイブとして保存

## バックアップ方法

### 方法1: Git ブランチとして保存
```bash
git checkout -b archive/ai-workflow-v1-python
git push origin archive/ai-workflow-v1-python
git checkout main
```

### 方法2: アーカイブとして保存
```bash
tar -czf ai-workflow-v1-backup-$(date +%Y%m%d).tar.gz scripts/ai-workflow/
```

## 削除後の確認項目

- [ ] Jenkins ジョブが正常に動作するか
- [ ] V2 ですべての機能が動作するか
- [ ] ドキュメントのリンク切れがないか
- [ ] CI/CD パイプラインが正常に動作するか

## ロールバック手順

削除後に問題が発生した場合:

1. バックアップブランチから復元:
```bash
git checkout archive/ai-workflow-v1-python
git checkout main
git checkout archive/ai-workflow-v1-python -- scripts/ai-workflow/
git commit -m "[rollback] Restore AI Workflow V1"
```

2. アーカイブから復元:
```bash
tar -xzf ai-workflow-v1-backup-YYYYMMDD.tar.gz
git add scripts/ai-workflow/
git commit -m "[rollback] Restore AI Workflow V1"
```

## リスク評価

| リスク | 影響度 | 対策 |
|--------|--------|------|
| Jenkins ジョブの停止 | 高 | Phase 2 で事前に V2 へ移行 |
| ドキュメントのリンク切れ | 中 | Phase 3 で事前に更新 |
| 依存スクリプトの破損 | 高 | 削除前チェックリストで確認 |
| ロールバック不可 | 高 | バックアップ作成を必須化 |

## スケジュール

- Week 1: Phase 1 (Deprecated 化 + 猶予期間)
- Week 2: Phase 2-3 (Jenkins 更新 + ドキュメント更新)
- Week 3: Phase 4 (削除実行 + 確認)

## 関連 Issue

- #369 (AI Workflow V2 マルチリポジトリ対応)
- #405 (フェーズ依存関係のオプショナル化)

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-411/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
