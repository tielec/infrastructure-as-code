# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-411/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-411/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue概要

- **Issue番号**: #411
- **タイトル**: [TASK] AI Workflow V1 (Python版) の安全な削除計画
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/411
- **ラベル**: なし

### 本文

## 概要

AI Workflow V2 (TypeScript版) がおおよそ動作するようになったため、V1 (Python版) を安全に削除する。

## 削除対象

- `scripts/ai-workflow/` ディレクトリ全体
  - Python スクリプト群
  - 関連する設定ファイル
  - ドキュメント

## 削除計画 (4フェーズ)

### Phase 1: Deprecated 化 (1週間)

- [ ] V1 ディレクトリに DEPRECATED.md を追加
- [ ] README.md に非推奨警告を追加
- [ ] Jenkins ジョブに非推奨警告を追加
- [ ] 1週間の猶予期間を設定

### Phase 2: Jenkins ジョブの更新

- [ ] V1 を使用している Jenkins ジョブを特定
- [ ] 各ジョブを V2 に切り替え
- [ ] 切り替え後の動作確認

### Phase 3: ドキュメント更新

- [ ] README.md から V1 への参照を削除
- [ ] ARCHITECTURE.md から V1 への参照を削除
- [ ] その他のドキュメントから V1 への参照を削除

### Phase 4: 実際の削除

- [ ] `scripts/ai-workflow/` ディレクトリの削除
- [ ] 削除後の動作確認
- [ ] 削除コミットの作成

## 削除前チェックリスト

### Jenkins 関連
- [ ] V1 を参照している Jenkins ジョブがないか確認
- [ ] Jenkins DSL ファイルに V1 への参照がないか確認
- [ ] Jenkinsfile に V1 への参照がないか確認

### ドキュメント関連
- [ ] README.md に V1 への参照がないか確認
- [ ] ARCHITECTURE.md に V1 への参照がないか確認
- [ ] CLAUDE.md に V1 への参照がないか確認
- [ ] その他の .md ファイルに V1 への参照がないか確認

### 依存関係
- [ ] V1 に依存しているスクリプトがないか確認
- [ ] V1 に依存している Ansible プレイブックがないか確認

### バックアップ
- [ ] 削除前に V1 のバックアップを作成
  - Git ブランチとして保存、または
  - tar.gz アーカイブとして保存

## バックアップ方法

### 方法1: Git ブランチとして保存
```bash
git checkout -b archive/ai-workflow-v1-python
git push origin archive/ai-workflow-v1-python
git checkout main
```

### 方法2: アーカイブとして保存
```bash
tar -czf ai-workflow-v1-backup-$(date +%Y%m%d).tar.gz scripts/ai-workflow/
```

## 削除後の確認項目

- [ ] Jenkins ジョブが正常に動作するか
- [ ] V2 ですべての機能が動作するか
- [ ] ドキュメントのリンク切れがないか
- [ ] CI/CD パイプラインが正常に動作するか

## ロールバック手順

削除後に問題が発生した場合:

1. バックアップブランチから復元:
```bash
git checkout archive/ai-workflow-v1-python
git checkout main
git checkout archive/ai-workflow-v1-python -- scripts/ai-workflow/
git commit -m "[rollback] Restore AI Workflow V1"
```

2. アーカイブから復元:
```bash
tar -xzf ai-workflow-v1-backup-YYYYMMDD.tar.gz
git add scripts/ai-workflow/
git commit -m "[rollback] Restore AI Workflow V1"
```

## リスク評価

| リスク | 影響度 | 対策 |
|--------|--------|------|
| Jenkins ジョブの停止 | 高 | Phase 2 で事前に V2 へ移行 |
| ドキュメントのリンク切れ | 中 | Phase 3 で事前に更新 |
| 依存スクリプトの破損 | 高 | 削除前チェックリストで確認 |
| ロールバック不可 | 高 | バックアップ作成を必須化 |

## スケジュール

- Week 1: Phase 1 (Deprecated 化 + 猶予期間)
- Week 2: Phase 2-3 (Jenkins 更新 + ドキュメント更新)
- Week 3: Phase 4 (削除実行 + 確認)

## 関連 Issue

- #369 (AI Workflow V2 マルチリポジトリ対応)
- #405 (フェーズ依存関係のオプショナル化)

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## ⚠️ 重要: Planning Phaseチェックリストとの照合（必須）

### 1. Planning.mdの読み込み

以下のファイルを読み込んでください：
- @.ai-workflow/issue-411/00_planning/output/planning.md

### 2. 該当フェーズのチェックリストを抽出

Planning.mdから、現在のフェーズ（"### Phase 2:" または "## Phase 2:"）のセクションを見つけ、タスクチェックリストを抽出してください。

**注意**: チェックリストが見つからない場合は、このチェックをスキップしてください。

### 3. 設計内容との照合

設計書（design.md）と照合し、各タスクが完了しているかチェックしてください。

**完了の判定基準**:
- Task記載の設計項目が記述されているか
- Task記載の戦略判断が明記されているか
- サブタスクがすべて完了しているか

### 4. Planning.mdの更新

照合結果に基づき、planning.mdのチェックボックスを更新してください：

- 完了したタスク: `- [ ]` → `- [x]`
- 未完了のタスク: `- [ ]` のまま

**Editツールを使用**して、該当フェーズのセクションを更新してください。

### 5. レビュー判定への反映

- **すべてのタスクが完了**（全て `[x]`）: PASS または PASS_WITH_SUGGESTIONS
- **未完了タスクがある**（`[ ]` が残っている）: FAIL
  - レビューフィードバックに未完了タスクをリストアップ
  - 具体的に何が不足しているか説明

**例（FAIL時のフィードバック）**:
```
## Planning Phaseチェックリスト照合結果: FAIL

以下のタスクが未完了です：

- [ ] Task 2-2: テスト戦略の決定
  - 不足: テスト戦略の判断根拠が記載されていません
- [ ] Task 2-3: 影響範囲分析
  - 不足: 既存コードへの影響範囲が分析されていません

これらのタスクを完了してから再提出してください。
```

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **実装戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **テスト戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **既存コードへの影響範囲が分析されている**: PASS/FAIL - （コメント）
- [x/  ] **変更が必要なファイルがリストアップされている**: PASS/FAIL - （コメント）
- [x/  ] **設計が実装可能である**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、設計書のクリティカルシンキングレビューを実施してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
