# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-360/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue情報

- **Issue番号**: #360
- **タイトル**: [FEATURE] AIワークフロー実行時のレジューム機能実装
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/360
- **ラベル**: enhancement

### 本文

## 概要

`--phase all` で全フェーズを実行中に途中で失敗した場合、失敗したフェーズから自動的に再開するレジューム機能を実装する。

## 背景・理由

現在、`--phase all` で実行中に途中のフェーズ（例: Phase 5）で失敗した場合、再度 `--phase all` を実行すると最初から実行し直す必要がある。これは以下の問題がある：

- **時間の無駄**: 既に完了したPhase 1-4を再実行する必要がある
- **リソースの無駄**: Claude API呼び出しが重複する
- **作業効率の低下**: 開発者が手動で途中フェーズから実行する必要がある

メタデータJSON (`.ai-workflow/issue-XXX/metadata.json`) には各フェーズのステータスが記録されているため、これを活用してレジューム機能を実装する。

## 要件

### 1. デフォルト動作: 自動レジューム

`--phase all` 実行時は**常に自動レジューム**を行う：

```bash
# デフォルトで自動レジューム
python scripts/ai-workflow/main.py --issue 320 --phase all

# 出力例：
# [INFO] 既存ワークフローを検出しました
# [INFO] Phase 1-4: completed
# [INFO] Phase 5: failed
# [INFO] Phase 5から自動的に再開します...
```

### 2. 強制リセット: --force-reset

最初から実行したい場合は `--force-reset` フラグを使用：

```bash
# メタデータをクリアして最初から実行
python scripts/ai-workflow/main.py --issue 320 --phase all --force-reset

# 出力例：
# [INFO] --force-reset指定により、ワークフローを最初から実行します
# [INFO] 既存のメタデータをクリアしました
# [INFO] Phase 1から実行を開始します...
```

### 3. レジューム対象フェーズの決定

以下の優先順位でレジューム開始フェーズを決定：

1. **failedフェーズ**: 最初に失敗したフェーズから再開
2. **in_progressフェーズ**: 異常終了したフェーズから再開
3. **pendingフェーズ**: 最初の未実行フェーズから再開
4. **全フェーズcompleted**: 既に完了済みメッセージを表示して終了

### 4. エッジケースの処理

#### ケース1: 複数のfailedフェーズ
```
Phase 3: failed
Phase 5: failed
Phase 7: pending

→ Phase 3から再開（最初の失敗フェーズ）
```

#### ケース2: 全フェーズ完了済み
```
Phase 1-8: completed

→ 「ワークフローは既に完了しています」メッセージを表示して終了
→ 再実行したい場合は --force-reset を使用するよう案内
```

#### ケース3: メタデータ不存在
```
metadata.json: 存在しない

→ 新規ワークフローとして最初から実行
```

#### ケース4: メタデータ破損
```
metadata.json: 読み込みエラー

→ 警告を表示して新規ワークフローとして実行
```

## 実装方針

### 1. 新規モジュール: `resume.py`

```python
# scripts/ai-workflow/utils/resume.py

from pathlib import Path
from typing import Optional, Dict, Any, List
from .metadata import WorkflowMetadata

class ResumeManager:
    """ワークフローのレジューム機能を管理"""
    
    def __init__(self, metadata: WorkflowMetadata):
        self.metadata = metadata
        self.phases = [
            'requirements', 'design', 'test_scenario', 
            'implementation', 'test_implementation',
            'testing', 'documentation', 'report'
        ]
    
    def can_resume(self) -> bool:
        """レジューム可能かチェック"""
        return self.metadata.exists() and not self.is_completed()
    
    def is_completed(self) -> bool:
        """全フェーズが完了しているかチェック"""
        pass
    
    def get_resume_phase(self) -> Optional[str]:
        """レジューム開始フェーズを取得
        
        Returns:
            str: レジューム開始フェーズ名
            None: レジューム不要（全フェーズ完了）
        """
        # 1. failedフェーズを検索
        # 2. in_progressフェーズを検索
        # 3. pendingフェーズを検索
        pass
    
    def get_status_summary(self) -> Dict[str, Any]:
        """各フェーズのステータスサマリーを取得"""
        return {
            'completed': self._get_completed_phases(),
            'failed': self._get_failed_phases(),
            'in_progress': self._get_in_progress_phases(),
            'pending': self._get_pending_phases()
        }
    
    def reset(self) -> None:
        """メタデータをクリアして最初からやり直し"""
        self.metadata.clear()
```

### 2. main.pyの修正

```python
# scripts/ai-workflow/main.py

def main():
    parser = argparse.ArgumentParser()
    # ... 既存の引数 ...
    parser.add_argument('--force-reset', action='store_true',
                       help='メタデータをクリアして最初から実行')
    
    args = parser.parse_args()
    
    # メタデータ読み込み
    metadata = WorkflowMetadata(issue_number=args.issue)
    
    if args.phase == 'all':
        resume_manager = ResumeManager(metadata)
        
        # --force-resetの場合はメタデータクリア
        if args.force_reset:
            logger.info("--force-reset指定により、ワークフローを最初から実行します")
            resume_manager.reset()
            run_all_phases()
            return
        
        # レジューム可能かチェック
        if resume_manager.can_resume():
            resume_phase = resume_manager.get_resume_phase()
            
            if resume_phase is None:
                # 全フェーズ完了済み
                logger.info("ワークフローは既に完了しています")
                logger.info("再実行する場合は --force-reset を使用してください")
                return
            
            # レジューム実行
            status = resume_manager.get_status_summary()
            logger.info("既存ワークフローを検出しました")
            logger.info(f"完了: {', '.join(status['completed'])}")
            if status['failed']:
                logger.info(f"失敗: {', '.join(status['failed'])}")
            logger.info(f"{resume_phase}から自動的に再開します...")
            
            run_phases_from(resume_phase)
        else:
            # 新規ワークフロー
            logger.info("新規ワークフローを開始します")
            run_all_phases()
    else:
        # 個別フェーズ実行
        run_single_phase(args.phase)
```

### 3. metadata.pyの拡張

```python
# scripts/ai-workflow/utils/metadata.py

class WorkflowMetadata:
    # ... 既存コード ...
    
    def clear(self) -> None:
        """メタデータをクリア"""
        if self.metadata_file.exists():
            self.metadata_file.unlink()
            logger.info(f"メタデータをクリアしました: {self.metadata_file}")
        
        # ワークフローディレクトリも削除（オプション）
        if self.workflow_dir.exists():
            import shutil
            shutil.rmtree(self.workflow_dir)
            logger.info(f"ワークフローディレクトリを削除しました: {self.workflow_dir}")
```

## 成果物

- [ ] `scripts/ai-workflow/utils/resume.py`: ResumeManager実装
- [ ] `scripts/ai-workflow/main.py`: レジューム機能統合、`--force-reset`引数追加
- [ ] `scripts/ai-workflow/utils/metadata.py`: `clear()`メソッド追加
- [ ] `scripts/ai-workflow/tests/unit/test_resume.py`: ユニットテスト
- [ ] `scripts/ai-workflow/tests/integration/test_resume_integration.py`: 統合テスト
- [ ] `scripts/ai-workflow/README.md`: レジューム機能のドキュメント追加

## テストケース

### 1. 正常系

- [ ] Phase 5で失敗 → 再実行時にPhase 5から自動再開
- [ ] Phase 3で失敗 → 再実行時にPhase 3から自動再開
- [ ] 全フェーズ完了 → 完了メッセージ表示、`--force-reset`案内
- [ ] `--force-reset`指定 → メタデータクリアして最初から実行

### 2. 異常系

- [ ] メタデータJSON破損 → 警告表示、新規ワークフローとして実行
- [ ] メタデータJSON不存在 → 新規ワークフローとして実行

### 3. エッジケース

- [ ] in_progressフェーズあり → そのフェーズから自動再開
- [ ] 複数フェーズ失敗 → 最初の失敗フェーズから再開
- [ ] Phase 1-4完了、Phase 5以降pending → Phase 5から実行

## 受け入れ基準

- [ ] `--phase all` 実行時にデフォルトで自動レジュームされる
- [ ] 失敗したフェーズから正しく再開できる
- [ ] 既に完了したフェーズはスキップされる
- [ ] `--force-reset`でメタデータをクリアして最初から実行できる
- [ ] レジューム状態がログに明確に表示される
- [ ] ユニットテストと統合テストが追加されている
- [ ] ドキュメントが更新されている

## 参考情報

### metadata.jsonの構造

```json
{
  "issue_number": "320",
  "phases": {
    "requirements": {
      "status": "completed",
      "output": ".ai-workflow/issue-320/01_requirements/output/requirements.md"
    },
    "design": {
      "status": "completed",
      "output": ".ai-workflow/issue-320/02_design/output/design.md"
    },
    "test_implementation": {
      "status": "failed",
      "output": null,
      "error": "test-implementation.mdが生成されませんでした"
    },
    "testing": {
      "status": "pending"
    }
  }
}
```

## 優先度

**High** - 開発効率とリソース節約のため早期実装が望ましい

## 関連Issue

- #320 - テストインプリメンテーションフェーズのファイル名不一致問題

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-360/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
