# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-360/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-360/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-360/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**UNIT_INTEGRATION**

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #360
- **タイトル**: [FEATURE] AIワークフロー実行時のレジューム機能実装
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/360
- **ラベル**: enhancement

### 本文

## 概要

`--phase all` で全フェーズを実行中に途中で失敗した場合、失敗したフェーズから自動的に再開するレジューム機能を実装する。

## 背景・理由

現在、`--phase all` で実行中に途中のフェーズ（例: Phase 5）で失敗した場合、再度 `--phase all` を実行すると最初から実行し直す必要がある。これは以下の問題がある：

- **時間の無駄**: 既に完了したPhase 1-4を再実行する必要がある
- **リソースの無駄**: Claude API呼び出しが重複する
- **作業効率の低下**: 開発者が手動で途中フェーズから実行する必要がある

メタデータJSON (`.ai-workflow/issue-XXX/metadata.json`) には各フェーズのステータスが記録されているため、これを活用してレジューム機能を実装する。

## 要件

### 1. デフォルト動作: 自動レジューム

`--phase all` 実行時は**常に自動レジューム**を行う：

```bash
# デフォルトで自動レジューム
python scripts/ai-workflow/main.py --issue 320 --phase all

# 出力例：
# [INFO] 既存ワークフローを検出しました
# [INFO] Phase 1-4: completed
# [INFO] Phase 5: failed
# [INFO] Phase 5から自動的に再開します...
```

### 2. 強制リセット: --force-reset

最初から実行したい場合は `--force-reset` フラグを使用：

```bash
# メタデータをクリアして最初から実行
python scripts/ai-workflow/main.py --issue 320 --phase all --force-reset

# 出力例：
# [INFO] --force-reset指定により、ワークフローを最初から実行します
# [INFO] 既存のメタデータをクリアしました
# [INFO] Phase 1から実行を開始します...
```

### 3. レジューム対象フェーズの決定

以下の優先順位でレジューム開始フェーズを決定：

1. **failedフェーズ**: 最初に失敗したフェーズから再開
2. **in_progressフェーズ**: 異常終了したフェーズから再開
3. **pendingフェーズ**: 最初の未実行フェーズから再開
4. **全フェーズcompleted**: 既に完了済みメッセージを表示して終了

### 4. エッジケースの処理

#### ケース1: 複数のfailedフェーズ
```
Phase 3: failed
Phase 5: failed
Phase 7: pending

→ Phase 3から再開（最初の失敗フェーズ）
```

#### ケース2: 全フェーズ完了済み
```
Phase 1-8: completed

→ 「ワークフローは既に完了しています」メッセージを表示して終了
→ 再実行したい場合は --force-reset を使用するよう案内
```

#### ケース3: メタデータ不存在
```
metadata.json: 存在しない

→ 新規ワークフローとして最初から実行
```

#### ケース4: メタデータ破損
```
metadata.json: 読み込みエラー

→ 警告を表示して新規ワークフローとして実行
```

## 実装方針

### 1. 新規モジュール: `resume.py`

```python
# scripts/ai-workflow/utils/resume.py

from pathlib import Path
from typing import Optional, Dict, Any, List
from .metadata import WorkflowMetadata

class ResumeManager:
    """ワークフローのレジューム機能を管理"""
    
    def __init__(self, metadata: WorkflowMetadata):
        self.metadata = metadata
        self.phases = [
            'requirements', 'design', 'test_scenario', 
            'implementation', 'test_implementation',
            'testing', 'documentation', 'report'
        ]
    
    def can_resume(self) -> bool:
        """レジューム可能かチェック"""
        return self.metadata.exists() and not self.is_completed()
    
    def is_completed(self) -> bool:
        """全フェーズが完了しているかチェック"""
        pass
    
    def get_resume_phase(self) -> Optional[str]:
        """レジューム開始フェーズを取得
        
        Returns:
            str: レジューム開始フェーズ名
            None: レジューム不要（全フェーズ完了）
        """
        # 1. failedフェーズを検索
        # 2. in_progressフェーズを検索
        # 3. pendingフェーズを検索
        pass
    
    def get_status_summary(self) -> Dict[str, Any]:
        """各フェーズのステータスサマリーを取得"""
        return {
            'completed': self._get_completed_phases(),
            'failed': self._get_failed_phases(),
            'in_progress': self._get_in_progress_phases(),
            'pending': self._get_pending_phases()
        }
    
    def reset(self) -> None:
        """メタデータをクリアして最初からやり直し"""
        self.metadata.clear()
```

### 2. main.pyの修正

```python
# scripts/ai-workflow/main.py

def main():
    parser = argparse.ArgumentParser()
    # ... 既存の引数 ...
    parser.add_argument('--force-reset', action='store_true',
                       help='メタデータをクリアして最初から実行')
    
    args = parser.parse_args()
    
    # メタデータ読み込み
    metadata = WorkflowMetadata(issue_number=args.issue)
    
    if args.phase == 'all':
        resume_manager = ResumeManager(metadata)
        
        # --force-resetの場合はメタデータクリア
        if args.force_reset:
            logger.info("--force-reset指定により、ワークフローを最初から実行します")
            resume_manager.reset()
            run_all_phases()
            return
        
        # レジューム可能かチェック
        if resume_manager.can_resume():
            resume_phase = resume_manager.get_resume_phase()
            
            if resume_phase is None:
                # 全フェーズ完了済み
                logger.info("ワークフローは既に完了しています")
                logger.info("再実行する場合は --force-reset を使用してください")
                return
            
            # レジューム実行
            status = resume_manager.get_status_summary()
            logger.info("既存ワークフローを検出しました")
            logger.info(f"完了: {', '.join(status['completed'])}")
            if status['failed']:
                logger.info(f"失敗: {', '.join(status['failed'])}")
            logger.info(f"{resume_phase}から自動的に再開します...")
            
            run_phases_from(resume_phase)
        else:
            # 新規ワークフロー
            logger.info("新規ワークフローを開始します")
            run_all_phases()
    else:
        # 個別フェーズ実行
        run_single_phase(args.phase)
```

### 3. metadata.pyの拡張

```python
# scripts/ai-workflow/utils/metadata.py

class WorkflowMetadata:
    # ... 既存コード ...
    
    def clear(self) -> None:
        """メタデータをクリア"""
        if self.metadata_file.exists():
            self.metadata_file.unlink()
            logger.info(f"メタデータをクリアしました: {self.metadata_file}")
        
        # ワークフローディレクトリも削除（オプション）
        if self.workflow_dir.exists():
            import shutil
            shutil.rmtree(self.workflow_dir)
            logger.info(f"ワークフローディレクトリを削除しました: {self.workflow_dir}")
```

## 成果物

- [ ] `scripts/ai-workflow/utils/resume.py`: ResumeManager実装
- [ ] `scripts/ai-workflow/main.py`: レジューム機能統合、`--force-reset`引数追加
- [ ] `scripts/ai-workflow/utils/metadata.py`: `clear()`メソッド追加
- [ ] `scripts/ai-workflow/tests/unit/test_resume.py`: ユニットテスト
- [ ] `scripts/ai-workflow/tests/integration/test_resume_integration.py`: 統合テスト
- [ ] `scripts/ai-workflow/README.md`: レジューム機能のドキュメント追加

## テストケース

### 1. 正常系

- [ ] Phase 5で失敗 → 再実行時にPhase 5から自動再開
- [ ] Phase 3で失敗 → 再実行時にPhase 3から自動再開
- [ ] 全フェーズ完了 → 完了メッセージ表示、`--force-reset`案内
- [ ] `--force-reset`指定 → メタデータクリアして最初から実行

### 2. 異常系

- [ ] メタデータJSON破損 → 警告表示、新規ワークフローとして実行
- [ ] メタデータJSON不存在 → 新規ワークフローとして実行

### 3. エッジケース

- [ ] in_progressフェーズあり → そのフェーズから自動再開
- [ ] 複数フェーズ失敗 → 最初の失敗フェーズから再開
- [ ] Phase 1-4完了、Phase 5以降pending → Phase 5から実行

## 受け入れ基準

- [ ] `--phase all` 実行時にデフォルトで自動レジュームされる
- [ ] 失敗したフェーズから正しく再開できる
- [ ] 既に完了したフェーズはスキップされる
- [ ] `--force-reset`でメタデータをクリアして最初から実行できる
- [ ] レジューム状態がログに明確に表示される
- [ ] ユニットテストと統合テストが追加されている
- [ ] ドキュメントが更新されている

## 参考情報

### metadata.jsonの構造

```json
{
  "issue_number": "320",
  "phases": {
    "requirements": {
      "status": "completed",
      "output": ".ai-workflow/issue-320/01_requirements/output/requirements.md"
    },
    "design": {
      "status": "completed",
      "output": ".ai-workflow/issue-320/02_design/output/design.md"
    },
    "test_implementation": {
      "status": "failed",
      "output": null,
      "error": "test-implementation.mdが生成されませんでした"
    },
    "testing": {
      "status": "pending"
    }
  }
}
```

## 優先度

**High** - 開発効率とリソース節約のため早期実装が望ましい

## 関連Issue

- #320 - テストインプリメンテーションフェーズのファイル名不一致問題

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-360/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
