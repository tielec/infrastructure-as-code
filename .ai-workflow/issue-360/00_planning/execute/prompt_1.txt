# プロジェクト計画フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細なプロジェクト計画書を作成してください。
Phase 0はプロジェクトマネージャの役割を担い、開発作業を計画的かつ効率的に進められるようにします。

## Issue情報

## Issue情報

- **Issue番号**: #360
- **タイトル**: [FEATURE] AIワークフロー実行時のレジューム機能実装
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/360
- **ラベル**: enhancement

### 本文

## 概要

`--phase all` で全フェーズを実行中に途中で失敗した場合、失敗したフェーズから自動的に再開するレジューム機能を実装する。

## 背景・理由

現在、`--phase all` で実行中に途中のフェーズ（例: Phase 5）で失敗した場合、再度 `--phase all` を実行すると最初から実行し直す必要がある。これは以下の問題がある：

- **時間の無駄**: 既に完了したPhase 1-4を再実行する必要がある
- **リソースの無駄**: Claude API呼び出しが重複する
- **作業効率の低下**: 開発者が手動で途中フェーズから実行する必要がある

メタデータJSON (`.ai-workflow/issue-XXX/metadata.json`) には各フェーズのステータスが記録されているため、これを活用してレジューム機能を実装する。

## 要件

### 1. デフォルト動作: 自動レジューム

`--phase all` 実行時は**常に自動レジューム**を行う：

```bash
# デフォルトで自動レジューム
python scripts/ai-workflow/main.py --issue 320 --phase all

# 出力例：
# [INFO] 既存ワークフローを検出しました
# [INFO] Phase 1-4: completed
# [INFO] Phase 5: failed
# [INFO] Phase 5から自動的に再開します...
```

### 2. 強制リセット: --force-reset

最初から実行したい場合は `--force-reset` フラグを使用：

```bash
# メタデータをクリアして最初から実行
python scripts/ai-workflow/main.py --issue 320 --phase all --force-reset

# 出力例：
# [INFO] --force-reset指定により、ワークフローを最初から実行します
# [INFO] 既存のメタデータをクリアしました
# [INFO] Phase 1から実行を開始します...
```

### 3. レジューム対象フェーズの決定

以下の優先順位でレジューム開始フェーズを決定：

1. **failedフェーズ**: 最初に失敗したフェーズから再開
2. **in_progressフェーズ**: 異常終了したフェーズから再開
3. **pendingフェーズ**: 最初の未実行フェーズから再開
4. **全フェーズcompleted**: 既に完了済みメッセージを表示して終了

### 4. エッジケースの処理

#### ケース1: 複数のfailedフェーズ
```
Phase 3: failed
Phase 5: failed
Phase 7: pending

→ Phase 3から再開（最初の失敗フェーズ）
```

#### ケース2: 全フェーズ完了済み
```
Phase 1-8: completed

→ 「ワークフローは既に完了しています」メッセージを表示して終了
→ 再実行したい場合は --force-reset を使用するよう案内
```

#### ケース3: メタデータ不存在
```
metadata.json: 存在しない

→ 新規ワークフローとして最初から実行
```

#### ケース4: メタデータ破損
```
metadata.json: 読み込みエラー

→ 警告を表示して新規ワークフローとして実行
```

## 実装方針

### 1. 新規モジュール: `resume.py`

```python
# scripts/ai-workflow/utils/resume.py

from pathlib import Path
from typing import Optional, Dict, Any, List
from .metadata import WorkflowMetadata

class ResumeManager:
    """ワークフローのレジューム機能を管理"""
    
    def __init__(self, metadata: WorkflowMetadata):
        self.metadata = metadata
        self.phases = [
            'requirements', 'design', 'test_scenario', 
            'implementation', 'test_implementation',
            'testing', 'documentation', 'report'
        ]
    
    def can_resume(self) -> bool:
        """レジューム可能かチェック"""
        return self.metadata.exists() and not self.is_completed()
    
    def is_completed(self) -> bool:
        """全フェーズが完了しているかチェック"""
        pass
    
    def get_resume_phase(self) -> Optional[str]:
        """レジューム開始フェーズを取得
        
        Returns:
            str: レジューム開始フェーズ名
            None: レジューム不要（全フェーズ完了）
        """
        # 1. failedフェーズを検索
        # 2. in_progressフェーズを検索
        # 3. pendingフェーズを検索
        pass
    
    def get_status_summary(self) -> Dict[str, Any]:
        """各フェーズのステータスサマリーを取得"""
        return {
            'completed': self._get_completed_phases(),
            'failed': self._get_failed_phases(),
            'in_progress': self._get_in_progress_phases(),
            'pending': self._get_pending_phases()
        }
    
    def reset(self) -> None:
        """メタデータをクリアして最初からやり直し"""
        self.metadata.clear()
```

### 2. main.pyの修正

```python
# scripts/ai-workflow/main.py

def main():
    parser = argparse.ArgumentParser()
    # ... 既存の引数 ...
    parser.add_argument('--force-reset', action='store_true',
                       help='メタデータをクリアして最初から実行')
    
    args = parser.parse_args()
    
    # メタデータ読み込み
    metadata = WorkflowMetadata(issue_number=args.issue)
    
    if args.phase == 'all':
        resume_manager = ResumeManager(metadata)
        
        # --force-resetの場合はメタデータクリア
        if args.force_reset:
            logger.info("--force-reset指定により、ワークフローを最初から実行します")
            resume_manager.reset()
            run_all_phases()
            return
        
        # レジューム可能かチェック
        if resume_manager.can_resume():
            resume_phase = resume_manager.get_resume_phase()
            
            if resume_phase is None:
                # 全フェーズ完了済み
                logger.info("ワークフローは既に完了しています")
                logger.info("再実行する場合は --force-reset を使用してください")
                return
            
            # レジューム実行
            status = resume_manager.get_status_summary()
            logger.info("既存ワークフローを検出しました")
            logger.info(f"完了: {', '.join(status['completed'])}")
            if status['failed']:
                logger.info(f"失敗: {', '.join(status['failed'])}")
            logger.info(f"{resume_phase}から自動的に再開します...")
            
            run_phases_from(resume_phase)
        else:
            # 新規ワークフロー
            logger.info("新規ワークフローを開始します")
            run_all_phases()
    else:
        # 個別フェーズ実行
        run_single_phase(args.phase)
```

### 3. metadata.pyの拡張

```python
# scripts/ai-workflow/utils/metadata.py

class WorkflowMetadata:
    # ... 既存コード ...
    
    def clear(self) -> None:
        """メタデータをクリア"""
        if self.metadata_file.exists():
            self.metadata_file.unlink()
            logger.info(f"メタデータをクリアしました: {self.metadata_file}")
        
        # ワークフローディレクトリも削除（オプション）
        if self.workflow_dir.exists():
            import shutil
            shutil.rmtree(self.workflow_dir)
            logger.info(f"ワークフローディレクトリを削除しました: {self.workflow_dir}")
```

## 成果物

- [ ] `scripts/ai-workflow/utils/resume.py`: ResumeManager実装
- [ ] `scripts/ai-workflow/main.py`: レジューム機能統合、`--force-reset`引数追加
- [ ] `scripts/ai-workflow/utils/metadata.py`: `clear()`メソッド追加
- [ ] `scripts/ai-workflow/tests/unit/test_resume.py`: ユニットテスト
- [ ] `scripts/ai-workflow/tests/integration/test_resume_integration.py`: 統合テスト
- [ ] `scripts/ai-workflow/README.md`: レジューム機能のドキュメント追加

## テストケース

### 1. 正常系

- [ ] Phase 5で失敗 → 再実行時にPhase 5から自動再開
- [ ] Phase 3で失敗 → 再実行時にPhase 3から自動再開
- [ ] 全フェーズ完了 → 完了メッセージ表示、`--force-reset`案内
- [ ] `--force-reset`指定 → メタデータクリアして最初から実行

### 2. 異常系

- [ ] メタデータJSON破損 → 警告表示、新規ワークフローとして実行
- [ ] メタデータJSON不存在 → 新規ワークフローとして実行

### 3. エッジケース

- [ ] in_progressフェーズあり → そのフェーズから自動再開
- [ ] 複数フェーズ失敗 → 最初の失敗フェーズから再開
- [ ] Phase 1-4完了、Phase 5以降pending → Phase 5から実行

## 受け入れ基準

- [ ] `--phase all` 実行時にデフォルトで自動レジュームされる
- [ ] 失敗したフェーズから正しく再開できる
- [ ] 既に完了したフェーズはスキップされる
- [ ] `--force-reset`でメタデータをクリアして最初から実行できる
- [ ] レジューム状態がログに明確に表示される
- [ ] ユニットテストと統合テストが追加されている
- [ ] ドキュメントが更新されている

## 参考情報

### metadata.jsonの構造

```json
{
  "issue_number": "320",
  "phases": {
    "requirements": {
      "status": "completed",
      "output": ".ai-workflow/issue-320/01_requirements/output/requirements.md"
    },
    "design": {
      "status": "completed",
      "output": ".ai-workflow/issue-320/02_design/output/design.md"
    },
    "test_implementation": {
      "status": "failed",
      "output": null,
      "error": "test-implementation.mdが生成されませんでした"
    },
    "testing": {
      "status": "pending"
    }
  }
}
```

## 優先度

**High** - 開発効率とリソース節約のため早期実装が望ましい

## 関連Issue

- #320 - テストインプリメンテーションフェーズのファイル名不一致問題

## プロジェクト計画書の構成

以下のセクションを含むプロジェクト計画書を作成してください：

### 1. Issue分析
- **複雑度**: 簡単/中程度/複雑を判定
  - 簡単: 単一ファイルの修正、シンプルな機能追加（見積もり: ~4時間）
  - 中程度: 複数ファイルの修正、既存機能の拡張（見積もり: 4~16時間）
  - 複雑: アーキテクチャ変更、新規サブシステム追加（見積もり: 16時間~）
- **見積もり工数**: X時間（根拠を記載）
- **リスク評価**: 低/中/高

### 2. 実装戦略判断

**重要**: このセクションは最も重要です。Phase 2（Design）で使用されるため、必ず明記してください。

#### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- CREATE: 新規ファイル・クラス・モジュールの作成が中心
- EXTEND: 既存コードの拡張（機能追加）が中心
- REFACTOR: 既存コードのリファクタリング（構造改善）が中心

（判断理由を具体的に記載）

#### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- UNIT_ONLY: ユニットテストのみ（単純なロジック、外部依存なし）
- INTEGRATION_ONLY: インテグレーションテストのみ（外部システム連携中心）
- BDD_ONLY: BDDテストのみ（ユーザーストーリー中心）
- UNIT_INTEGRATION: ユニット + インテグレーション（一般的な機能開発）
- UNIT_BDD: ユニット + BDD（エンドユーザー向け機能）
- INTEGRATION_BDD: インテグレーション + BDD（システム間連携＋ユーザーストーリー）
- ALL: すべてのテストレベル（大規模な変更、高リスク）

（判断理由を具体的に記載）

#### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- EXTEND_TEST: 既存テストファイルに追加（既存機能の拡張時）
- CREATE_TEST: 新規テストファイル作成（新規機能追加時）
- BOTH_TEST: 両方（既存テスト拡張 + 新規テスト作成）

（判断理由を具体的に記載）

### 3. 影響範囲分析
- **既存コードへの影響**: 変更が必要なファイル・モジュール
- **依存関係の変更**: 新規依存の追加、既存依存の変更
- **マイグレーション要否**: データベーススキーマ変更、設定ファイル変更等

### 4. タスク分割

各フェーズについて、サブタスクを洗い出してください：

#### Phase 1: 要件定義 (見積もり: Xh)
- サブタスク1
- サブタスク2
...

#### Phase 2: 設計 (見積もり: Xh)
...

#### Phase 3: テストシナリオ (見積もり: Xh)
...

#### Phase 4: 実装 (見積もり: Xh)
...

#### Phase 5: テスト (見積もり: Xh)
...

#### Phase 6: ドキュメント (見積もり: Xh)
...

#### Phase 7: レポート (見積もり: Xh)
...

**タスク粒度基準**:
- 1タスク = 1~4時間程度で完了可能な作業単位
- 明確な完了条件（Done criteria）を持つ
- 他のタスクから独立して実装・テスト可能

### 5. 依存関係

タスク間の依存関係をMermaid形式で図示してください：

```mermaid
graph TD
    P1[Phase 1] --> P2[Phase 2]
    P2 --> P3[Phase 3]
    P3 --> P4[Phase 4]
    P4 --> P5[Phase 5]
    P5 --> P6[Phase 6]
    P6 --> P7[Phase 7]
```

### 6. リスクと軽減策

潜在的なリスクを洗い出し、各リスクに対する軽減策を記載してください：

#### リスク1: （リスク名）
- **影響度**: 低/中/高
- **確率**: 低/中/高
- **軽減策**: （具体的な対策）

#### リスク2: （リスク名）
...

**リスクカテゴリ**:
- 技術的リスク: 新技術の学習コスト、既存システムとの統合問題
- スコープリスク: 要件の曖昧さ、スコープクリープ
- リソースリスク: 工数不足、スキル不足
- 依存リスク: 外部システム依存、ブロッキング問題

### 7. 品質ゲート

各フェーズの合格基準を定義してください：

#### Phase 1: 要件定義
- [ ] 機能要件が明確に記載されている
- [ ] 受け入れ基準が定義されている
...

#### Phase 2: 設計
- [ ] 実装戦略の判断根拠が明記されている
- [ ] テスト戦略の判断根拠が明記されている
...

（以下、Phase 3~7についても記載）

## 出力形式

Markdown形式でプロジェクト計画書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-360/00_planning/output/planning.md
```

## 品質ゲート（Phase 0）

作成するプロジェクト計画書は、以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略が明確に決定されている**（CREATE/EXTEND/REFACTOR）
- [ ] **テスト戦略が明確に決定されている**（UNIT_ONLY/.../ALL）
- [ ] **テストコード戦略が明確に決定されている**（EXTEND_TEST/CREATE_TEST/BOTH_TEST）
- [ ] **影響範囲が分析されている**
- [ ] **タスク分割が適切な粒度である**（1タスク = 1~4時間）
- [ ] **リスクが洗い出されている**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **実装戦略の判断**: Phase 2で使用されるため、必ず明記してください
   - 実装戦略: CREATE/EXTEND/REFACTOR
   - テスト戦略: UNIT_ONLY/.../ALL
   - テストコード戦略: EXTEND_TEST/CREATE_TEST/BOTH_TEST

2. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な計画を記述
   - NG例: "適切に対応する"、"必要に応じて実施"
   - OK例: "Phase 2で詳細設計を実施"、"最大3回のリトライを実施"

3. **実現可能性**: 見積もりが現実的か、リソースは十分か確認
   - タスク粒度が大きすぎないか（1タスク = 1~4時間）
   - 依存関係が正確に記載されているか

4. **リスク分析の網羅性**: 重要なリスクが見逃されていないか確認
   - 技術的リスク、スコープリスク、リソースリスク、依存リスク

5. **レビューされることを意識**: 作成した計画書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（6つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント

## プロジェクト計画書の作成を開始してください
