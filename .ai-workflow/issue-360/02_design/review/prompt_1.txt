# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-360/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-360/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #360
- **タイトル**: [FEATURE] AIワークフロー実行時のレジューム機能実装
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/360
- **ラベル**: enhancement

### 本文

## 概要

`--phase all` で全フェーズを実行中に途中で失敗した場合、失敗したフェーズから自動的に再開するレジューム機能を実装する。

## 背景・理由

現在、`--phase all` で実行中に途中のフェーズ（例: Phase 5）で失敗した場合、再度 `--phase all` を実行すると最初から実行し直す必要がある。これは以下の問題がある：

- **時間の無駄**: 既に完了したPhase 1-4を再実行する必要がある
- **リソースの無駄**: Claude API呼び出しが重複する
- **作業効率の低下**: 開発者が手動で途中フェーズから実行する必要がある

メタデータJSON (`.ai-workflow/issue-XXX/metadata.json`) には各フェーズのステータスが記録されているため、これを活用してレジューム機能を実装する。

## 要件

### 1. デフォルト動作: 自動レジューム

`--phase all` 実行時は**常に自動レジューム**を行う：

```bash
# デフォルトで自動レジューム
python scripts/ai-workflow/main.py --issue 320 --phase all

# 出力例：
# [INFO] 既存ワークフローを検出しました
# [INFO] Phase 1-4: completed
# [INFO] Phase 5: failed
# [INFO] Phase 5から自動的に再開します...
```

### 2. 強制リセット: --force-reset

最初から実行したい場合は `--force-reset` フラグを使用：

```bash
# メタデータをクリアして最初から実行
python scripts/ai-workflow/main.py --issue 320 --phase all --force-reset

# 出力例：
# [INFO] --force-reset指定により、ワークフローを最初から実行します
# [INFO] 既存のメタデータをクリアしました
# [INFO] Phase 1から実行を開始します...
```

### 3. レジューム対象フェーズの決定

以下の優先順位でレジューム開始フェーズを決定：

1. **failedフェーズ**: 最初に失敗したフェーズから再開
2. **in_progressフェーズ**: 異常終了したフェーズから再開
3. **pendingフェーズ**: 最初の未実行フェーズから再開
4. **全フェーズcompleted**: 既に完了済みメッセージを表示して終了

### 4. エッジケースの処理

#### ケース1: 複数のfailedフェーズ
```
Phase 3: failed
Phase 5: failed
Phase 7: pending

→ Phase 3から再開（最初の失敗フェーズ）
```

#### ケース2: 全フェーズ完了済み
```
Phase 1-8: completed

→ 「ワークフローは既に完了しています」メッセージを表示して終了
→ 再実行したい場合は --force-reset を使用するよう案内
```

#### ケース3: メタデータ不存在
```
metadata.json: 存在しない

→ 新規ワークフローとして最初から実行
```

#### ケース4: メタデータ破損
```
metadata.json: 読み込みエラー

→ 警告を表示して新規ワークフローとして実行
```

## 実装方針

### 1. 新規モジュール: `resume.py`

```python
# scripts/ai-workflow/utils/resume.py

from pathlib import Path
from typing import Optional, Dict, Any, List
from .metadata import WorkflowMetadata

class ResumeManager:
    """ワークフローのレジューム機能を管理"""
    
    def __init__(self, metadata: WorkflowMetadata):
        self.metadata = metadata
        self.phases = [
            'requirements', 'design', 'test_scenario', 
            'implementation', 'test_implementation',
            'testing', 'documentation', 'report'
        ]
    
    def can_resume(self) -> bool:
        """レジューム可能かチェック"""
        return self.metadata.exists() and not self.is_completed()
    
    def is_completed(self) -> bool:
        """全フェーズが完了しているかチェック"""
        pass
    
    def get_resume_phase(self) -> Optional[str]:
        """レジューム開始フェーズを取得
        
        Returns:
            str: レジューム開始フェーズ名
            None: レジューム不要（全フェーズ完了）
        """
        # 1. failedフェーズを検索
        # 2. in_progressフェーズを検索
        # 3. pendingフェーズを検索
        pass
    
    def get_status_summary(self) -> Dict[str, Any]:
        """各フェーズのステータスサマリーを取得"""
        return {
            'completed': self._get_completed_phases(),
            'failed': self._get_failed_phases(),
            'in_progress': self._get_in_progress_phases(),
            'pending': self._get_pending_phases()
        }
    
    def reset(self) -> None:
        """メタデータをクリアして最初からやり直し"""
        self.metadata.clear()
```

### 2. main.pyの修正

```python
# scripts/ai-workflow/main.py

def main():
    parser = argparse.ArgumentParser()
    # ... 既存の引数 ...
    parser.add_argument('--force-reset', action='store_true',
                       help='メタデータをクリアして最初から実行')
    
    args = parser.parse_args()
    
    # メタデータ読み込み
    metadata = WorkflowMetadata(issue_number=args.issue)
    
    if args.phase == 'all':
        resume_manager = ResumeManager(metadata)
        
        # --force-resetの場合はメタデータクリア
        if args.force_reset:
            logger.info("--force-reset指定により、ワークフローを最初から実行します")
            resume_manager.reset()
            run_all_phases()
            return
        
        # レジューム可能かチェック
        if resume_manager.can_resume():
            resume_phase = resume_manager.get_resume_phase()
            
            if resume_phase is None:
                # 全フェーズ完了済み
                logger.info("ワークフローは既に完了しています")
                logger.info("再実行する場合は --force-reset を使用してください")
                return
            
            # レジューム実行
            status = resume_manager.get_status_summary()
            logger.info("既存ワークフローを検出しました")
            logger.info(f"完了: {', '.join(status['completed'])}")
            if status['failed']:
                logger.info(f"失敗: {', '.join(status['failed'])}")
            logger.info(f"{resume_phase}から自動的に再開します...")
            
            run_phases_from(resume_phase)
        else:
            # 新規ワークフロー
            logger.info("新規ワークフローを開始します")
            run_all_phases()
    else:
        # 個別フェーズ実行
        run_single_phase(args.phase)
```

### 3. metadata.pyの拡張

```python
# scripts/ai-workflow/utils/metadata.py

class WorkflowMetadata:
    # ... 既存コード ...
    
    def clear(self) -> None:
        """メタデータをクリア"""
        if self.metadata_file.exists():
            self.metadata_file.unlink()
            logger.info(f"メタデータをクリアしました: {self.metadata_file}")
        
        # ワークフローディレクトリも削除（オプション）
        if self.workflow_dir.exists():
            import shutil
            shutil.rmtree(self.workflow_dir)
            logger.info(f"ワークフローディレクトリを削除しました: {self.workflow_dir}")
```

## 成果物

- [ ] `scripts/ai-workflow/utils/resume.py`: ResumeManager実装
- [ ] `scripts/ai-workflow/main.py`: レジューム機能統合、`--force-reset`引数追加
- [ ] `scripts/ai-workflow/utils/metadata.py`: `clear()`メソッド追加
- [ ] `scripts/ai-workflow/tests/unit/test_resume.py`: ユニットテスト
- [ ] `scripts/ai-workflow/tests/integration/test_resume_integration.py`: 統合テスト
- [ ] `scripts/ai-workflow/README.md`: レジューム機能のドキュメント追加

## テストケース

### 1. 正常系

- [ ] Phase 5で失敗 → 再実行時にPhase 5から自動再開
- [ ] Phase 3で失敗 → 再実行時にPhase 3から自動再開
- [ ] 全フェーズ完了 → 完了メッセージ表示、`--force-reset`案内
- [ ] `--force-reset`指定 → メタデータクリアして最初から実行

### 2. 異常系

- [ ] メタデータJSON破損 → 警告表示、新規ワークフローとして実行
- [ ] メタデータJSON不存在 → 新規ワークフローとして実行

### 3. エッジケース

- [ ] in_progressフェーズあり → そのフェーズから自動再開
- [ ] 複数フェーズ失敗 → 最初の失敗フェーズから再開
- [ ] Phase 1-4完了、Phase 5以降pending → Phase 5から実行

## 受け入れ基準

- [ ] `--phase all` 実行時にデフォルトで自動レジュームされる
- [ ] 失敗したフェーズから正しく再開できる
- [ ] 既に完了したフェーズはスキップされる
- [ ] `--force-reset`でメタデータをクリアして最初から実行できる
- [ ] レジューム状態がログに明確に表示される
- [ ] ユニットテストと統合テストが追加されている
- [ ] ドキュメントが更新されている

## 参考情報

### metadata.jsonの構造

```json
{
  "issue_number": "320",
  "phases": {
    "requirements": {
      "status": "completed",
      "output": ".ai-workflow/issue-320/01_requirements/output/requirements.md"
    },
    "design": {
      "status": "completed",
      "output": ".ai-workflow/issue-320/02_design/output/design.md"
    },
    "test_implementation": {
      "status": "failed",
      "output": null,
      "error": "test-implementation.mdが生成されませんでした"
    },
    "testing": {
      "status": "pending"
    }
  }
}
```

## 優先度

**High** - 開発効率とリソース節約のため早期実装が望ましい

## 関連Issue

- #320 - テストインプリメンテーションフェーズのファイル名不一致問題

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **実装戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **テスト戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **既存コードへの影響範囲が分析されている**: PASS/FAIL - （コメント）
- [x/  ] **変更が必要なファイルがリストアップされている**: PASS/FAIL - （コメント）
- [x/  ] **設計が実装可能である**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、設計書のクリティカルシンキングレビューを実施してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
