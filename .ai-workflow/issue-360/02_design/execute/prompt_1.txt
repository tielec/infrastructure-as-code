# 詳細設計フェーズ - 実行プロンプト

## タスク概要
要件定義書とGitHub Issueの内容から、詳細な設計書を作成してください。このフェーズでは、**実装戦略・テスト戦略・テストコード戦略の判断**も行います。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-360/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-360/01_requirements/output/requirements.md

### GitHub Issue情報
## Issue情報

- **Issue番号**: #360
- **タイトル**: [FEATURE] AIワークフロー実行時のレジューム機能実装
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/360
- **ラベル**: enhancement

### 本文

## 概要

`--phase all` で全フェーズを実行中に途中で失敗した場合、失敗したフェーズから自動的に再開するレジューム機能を実装する。

## 背景・理由

現在、`--phase all` で実行中に途中のフェーズ（例: Phase 5）で失敗した場合、再度 `--phase all` を実行すると最初から実行し直す必要がある。これは以下の問題がある：

- **時間の無駄**: 既に完了したPhase 1-4を再実行する必要がある
- **リソースの無駄**: Claude API呼び出しが重複する
- **作業効率の低下**: 開発者が手動で途中フェーズから実行する必要がある

メタデータJSON (`.ai-workflow/issue-XXX/metadata.json`) には各フェーズのステータスが記録されているため、これを活用してレジューム機能を実装する。

## 要件

### 1. デフォルト動作: 自動レジューム

`--phase all` 実行時は**常に自動レジューム**を行う：

```bash
# デフォルトで自動レジューム
python scripts/ai-workflow/main.py --issue 320 --phase all

# 出力例：
# [INFO] 既存ワークフローを検出しました
# [INFO] Phase 1-4: completed
# [INFO] Phase 5: failed
# [INFO] Phase 5から自動的に再開します...
```

### 2. 強制リセット: --force-reset

最初から実行したい場合は `--force-reset` フラグを使用：

```bash
# メタデータをクリアして最初から実行
python scripts/ai-workflow/main.py --issue 320 --phase all --force-reset

# 出力例：
# [INFO] --force-reset指定により、ワークフローを最初から実行します
# [INFO] 既存のメタデータをクリアしました
# [INFO] Phase 1から実行を開始します...
```

### 3. レジューム対象フェーズの決定

以下の優先順位でレジューム開始フェーズを決定：

1. **failedフェーズ**: 最初に失敗したフェーズから再開
2. **in_progressフェーズ**: 異常終了したフェーズから再開
3. **pendingフェーズ**: 最初の未実行フェーズから再開
4. **全フェーズcompleted**: 既に完了済みメッセージを表示して終了

### 4. エッジケースの処理

#### ケース1: 複数のfailedフェーズ
```
Phase 3: failed
Phase 5: failed
Phase 7: pending

→ Phase 3から再開（最初の失敗フェーズ）
```

#### ケース2: 全フェーズ完了済み
```
Phase 1-8: completed

→ 「ワークフローは既に完了しています」メッセージを表示して終了
→ 再実行したい場合は --force-reset を使用するよう案内
```

#### ケース3: メタデータ不存在
```
metadata.json: 存在しない

→ 新規ワークフローとして最初から実行
```

#### ケース4: メタデータ破損
```
metadata.json: 読み込みエラー

→ 警告を表示して新規ワークフローとして実行
```

## 実装方針

### 1. 新規モジュール: `resume.py`

```python
# scripts/ai-workflow/utils/resume.py

from pathlib import Path
from typing import Optional, Dict, Any, List
from .metadata import WorkflowMetadata

class ResumeManager:
    """ワークフローのレジューム機能を管理"""
    
    def __init__(self, metadata: WorkflowMetadata):
        self.metadata = metadata
        self.phases = [
            'requirements', 'design', 'test_scenario', 
            'implementation', 'test_implementation',
            'testing', 'documentation', 'report'
        ]
    
    def can_resume(self) -> bool:
        """レジューム可能かチェック"""
        return self.metadata.exists() and not self.is_completed()
    
    def is_completed(self) -> bool:
        """全フェーズが完了しているかチェック"""
        pass
    
    def get_resume_phase(self) -> Optional[str]:
        """レジューム開始フェーズを取得
        
        Returns:
            str: レジューム開始フェーズ名
            None: レジューム不要（全フェーズ完了）
        """
        # 1. failedフェーズを検索
        # 2. in_progressフェーズを検索
        # 3. pendingフェーズを検索
        pass
    
    def get_status_summary(self) -> Dict[str, Any]:
        """各フェーズのステータスサマリーを取得"""
        return {
            'completed': self._get_completed_phases(),
            'failed': self._get_failed_phases(),
            'in_progress': self._get_in_progress_phases(),
            'pending': self._get_pending_phases()
        }
    
    def reset(self) -> None:
        """メタデータをクリアして最初からやり直し"""
        self.metadata.clear()
```

### 2. main.pyの修正

```python
# scripts/ai-workflow/main.py

def main():
    parser = argparse.ArgumentParser()
    # ... 既存の引数 ...
    parser.add_argument('--force-reset', action='store_true',
                       help='メタデータをクリアして最初から実行')
    
    args = parser.parse_args()
    
    # メタデータ読み込み
    metadata = WorkflowMetadata(issue_number=args.issue)
    
    if args.phase == 'all':
        resume_manager = ResumeManager(metadata)
        
        # --force-resetの場合はメタデータクリア
        if args.force_reset:
            logger.info("--force-reset指定により、ワークフローを最初から実行します")
            resume_manager.reset()
            run_all_phases()
            return
        
        # レジューム可能かチェック
        if resume_manager.can_resume():
            resume_phase = resume_manager.get_resume_phase()
            
            if resume_phase is None:
                # 全フェーズ完了済み
                logger.info("ワークフローは既に完了しています")
                logger.info("再実行する場合は --force-reset を使用してください")
                return
            
            # レジューム実行
            status = resume_manager.get_status_summary()
            logger.info("既存ワークフローを検出しました")
            logger.info(f"完了: {', '.join(status['completed'])}")
            if status['failed']:
                logger.info(f"失敗: {', '.join(status['failed'])}")
            logger.info(f"{resume_phase}から自動的に再開します...")
            
            run_phases_from(resume_phase)
        else:
            # 新規ワークフロー
            logger.info("新規ワークフローを開始します")
            run_all_phases()
    else:
        # 個別フェーズ実行
        run_single_phase(args.phase)
```

### 3. metadata.pyの拡張

```python
# scripts/ai-workflow/utils/metadata.py

class WorkflowMetadata:
    # ... 既存コード ...
    
    def clear(self) -> None:
        """メタデータをクリア"""
        if self.metadata_file.exists():
            self.metadata_file.unlink()
            logger.info(f"メタデータをクリアしました: {self.metadata_file}")
        
        # ワークフローディレクトリも削除（オプション）
        if self.workflow_dir.exists():
            import shutil
            shutil.rmtree(self.workflow_dir)
            logger.info(f"ワークフローディレクトリを削除しました: {self.workflow_dir}")
```

## 成果物

- [ ] `scripts/ai-workflow/utils/resume.py`: ResumeManager実装
- [ ] `scripts/ai-workflow/main.py`: レジューム機能統合、`--force-reset`引数追加
- [ ] `scripts/ai-workflow/utils/metadata.py`: `clear()`メソッド追加
- [ ] `scripts/ai-workflow/tests/unit/test_resume.py`: ユニットテスト
- [ ] `scripts/ai-workflow/tests/integration/test_resume_integration.py`: 統合テスト
- [ ] `scripts/ai-workflow/README.md`: レジューム機能のドキュメント追加

## テストケース

### 1. 正常系

- [ ] Phase 5で失敗 → 再実行時にPhase 5から自動再開
- [ ] Phase 3で失敗 → 再実行時にPhase 3から自動再開
- [ ] 全フェーズ完了 → 完了メッセージ表示、`--force-reset`案内
- [ ] `--force-reset`指定 → メタデータクリアして最初から実行

### 2. 異常系

- [ ] メタデータJSON破損 → 警告表示、新規ワークフローとして実行
- [ ] メタデータJSON不存在 → 新規ワークフローとして実行

### 3. エッジケース

- [ ] in_progressフェーズあり → そのフェーズから自動再開
- [ ] 複数フェーズ失敗 → 最初の失敗フェーズから再開
- [ ] Phase 1-4完了、Phase 5以降pending → Phase 5から実行

## 受け入れ基準

- [ ] `--phase all` 実行時にデフォルトで自動レジュームされる
- [ ] 失敗したフェーズから正しく再開できる
- [ ] 既に完了したフェーズはスキップされる
- [ ] `--force-reset`でメタデータをクリアして最初から実行できる
- [ ] レジューム状態がログに明確に表示される
- [ ] ユニットテストと統合テストが追加されている
- [ ] ドキュメントが更新されている

## 参考情報

### metadata.jsonの構造

```json
{
  "issue_number": "320",
  "phases": {
    "requirements": {
      "status": "completed",
      "output": ".ai-workflow/issue-320/01_requirements/output/requirements.md"
    },
    "design": {
      "status": "completed",
      "output": ".ai-workflow/issue-320/02_design/output/design.md"
    },
    "test_implementation": {
      "status": "failed",
      "output": null,
      "error": "test-implementation.mdが生成されませんでした"
    },
    "testing": {
      "status": "pending"
    }
  }
}
```

## 優先度

**High** - 開発効率とリソース節約のため早期実装が望ましい

## 関連Issue

- #320 - テストインプリメンテーションフェーズのファイル名不一致問題

### 既存コードベースの理解

このリポジトリのプロジェクト構造、アーキテクチャ、コーディング規約を理解するため、以下のドキュメントを参照してください：

- プロジェクト全体のガイドライン: @CLAUDE.md（存在する場合）
- アーキテクチャ設計: @ARCHITECTURE.md（存在する場合）
- プロジェクトREADME: @README.md
- その他、関連するREADME、CONTRIBUTION.md等のドキュメント

上記ドキュメントから以下を把握してください：
- プロジェクトの目的とアーキテクチャ
- ディレクトリ構造とコンポーネント構成
- 既存のコーディング規約やパターン
- 開発ワークフロー

## 設計書作成手順

### 1. 既存コードベース分析

要件定義書とIssue内容から、以下を分析してください：

1. **影響範囲の特定**
   - どのコンポーネント（Ansible/Pulumi/Jenkins/Scripts）が影響を受けるか
   - 既存ファイルの修正が必要か、新規ファイルの作成が必要か
   - 依存関係のあるコンポーネントは何か

2. **既存パターンの調査**
   - 類似の機能実装がないか調査
   - 既存のコーディング規約やパターンを確認
   - 再利用可能なコンポーネントの特定

### 2. 実装戦略の判断（必須）

以下の3つから選択し、**判断根拠を明記**してください：

- **CREATE（新規作成）**: 既存コードとの依存関係がなく、完全に新しい機能
- **EXTEND（拡張）**: 既存コードを拡張・修正する必要がある
- **REFACTOR（リファクタリング）**: 既存コードの構造改善が主目的

**判断基準**：
- 既存ファイルへの影響範囲
- 新規ファイルの作成数
- 既存機能との統合度

**出力形式**：
```markdown
### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- （理由1）
- （理由2）
```

### 3. テスト戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **UNIT_ONLY**: Unitテストのみ
- **INTEGRATION_ONLY**: Integrationテストのみ
- **BDD_ONLY**: BDDテストのみ
- **UNIT_INTEGRATION**: Unit + Integration
- **UNIT_BDD**: Unit + BDD
- **INTEGRATION_BDD**: Integration + BDD
- **ALL**: すべて

**判断基準**：
- 機能の複雑度
- ユーザーストーリーの有無
- 既存テストとの整合性

**出力形式**：
```markdown
### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- （理由1）
- （理由2）
```

### 4. テストコード戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **EXTEND_TEST（既存テストの拡張）**: 既存テストファイルに追加
- **CREATE_TEST（新規テスト作成）**: 新しいテストファイルを作成
- **BOTH_TEST（両方）**: 既存テストの拡張と新規テストの作成

**判断基準**：
- 既存テストファイルの有無
- 既存テストとの関連性

**出力形式**：
```markdown
### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- （理由1）
- （理由2）
```

### 5. 設計書の構成

以下のセクションを含む設計書を作成してください：

#### 必須セクション：

1. **アーキテクチャ設計**
   - システム全体図
   - コンポーネント間の関係
   - データフロー

2. **実装戦略判断**（セクション2で記載）

3. **テスト戦略判断**（セクション3で記載）

4. **テストコード戦略判断**（セクション4で記載）

5. **影響範囲分析**
   - 既存コードへの影響
   - 依存関係の変更
   - マイグレーション要否

6. **変更・追加ファイルリスト**
   - 新規作成ファイル（相対パス）
   - 修正が必要な既存ファイル（相対パス）
   - 削除が必要なファイル（相対パス）

7. **詳細設計**
   - クラス設計（必要な場合）
   - 関数設計（主要な関数のみ）
   - データ構造設計
   - インターフェース設計

8. **セキュリティ考慮事項**
   - 認証・認可
   - データ保護
   - セキュリティリスクと対策

9. **非機能要件への対応**
   - パフォーマンス
   - スケーラビリティ
   - 保守性

10. **実装の順序**
    - 実装順序の推奨
    - 依存関係の考慮

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **既存プロジェクト構造を尊重**: 既存のディレクトリ構造やコーディング規約に従ってください
2. **トレーサビリティ**: 要件定義書の各要件に対応する設計を明示してください
3. **実装可能性**: 実装できない設計や曖昧な設計は避けてください
4. **判断の明示**: 3つの戦略判断（実装・テスト・テストコード）は必ず明記してください
5. **レビューされることを意識**: 設計書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（5つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 判断根拠は具体的かつ論理的に記載すること

## 出力形式

設計書は `.ai-workflow/issue-360/02_design/output/design.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。図表が必要な場合はMarkdownのコードブロックやテーブルを活用してください。

## 実装開始

上記を踏まえ、詳細設計書を作成してください。
