# テストコード実装フェーズ - レビュープロンプト

## レビュー対象

### テスト実装ログ
@.ai-workflow/issue-369/05_test_implementation/output/test-implementation.md

### 実装されたテストコード
テスト実装ログに記載されたテストファイルを確認してください。

### テストシナリオ（参考）
@.ai-workflow/issue-369/03_test_scenario/output/test-scenario.md

### 実装ログ（参考）
@.ai-workflow/issue-369/04_implementation/output/implementation.md

### テスト戦略（Phase 2で決定）
**UNIT_INTEGRATION**

## 品質ゲート（Phase 5）

テストコード実装は以下の品質ゲートをクリアする必要があります：

- [ ] **Phase 3のテストシナリオがすべて実装されている**
- [ ] **テストコードが実行可能である**
- [ ] **テストの意図がコメントで明確**

## ⚠️ 重要: Planning Phaseチェックリストとの照合（必須）

### 1. Planning.mdの読み込み

以下のファイルを読み込んでください：
- @.ai-workflow/issue-369/00_planning/output/planning.md

### 2. 該当フェーズのチェックリストを抽出

Planning.mdから、現在のフェーズ（"### Phase 5:" または "## Phase 5:"）のセクションを見つけ、タスクチェックリストを抽出してください。

**注意**: チェックリストが見つからない場合は、このチェックをスキップしてください。

### 3. テスト実装内容との照合

テスト実装ログ（test-implementation.md）と照合し、各タスクが完了しているかチェックしてください。

**完了の判定基準**:
- Task記載のテストファイルが作成されているか
- Task記載のテストケースが実装されているか
- サブタスクがすべて完了しているか

### 4. Planning.mdの更新

照合結果に基づき、planning.mdのチェックボックスを更新してください：

- 完了したタスク: `- [ ]` → `- [x]`
- 未完了のタスク: `- [ ]` のまま

**Editツールを使用**して、該当フェーズのセクションを更新してください。

### 5. レビュー判定への反映

- **すべてのタスクが完了**（全て `[x]`）: PASS または PASS_WITH_SUGGESTIONS
- **未完了タスクがある**（`[ ]` が残っている）: FAIL
  - レビューフィードバックに未完了タスクをリストアップ
  - 具体的に何が不足しているか説明

**例（FAIL時のフィードバック）**:
```
## Planning Phaseチェックリスト照合結果: FAIL

以下のタスクが未完了です：

- [ ] Task 5-2: 異常系テストケースの実装
  - 不足: tests/error_handling_test.py が実装されていません
- [ ] Task 5-3: 統合テストの実装
  - 不足: tests/integration_test.py が実装されていません

これらのタスクを完了してから再提出してください。
```

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - テストコードが次フェーズ（テスト実行）に進める状態であれば合格
   - 細かい最適化は改善提案として記載

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テスト実行）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - テスト実行で検出可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「間違い」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. テストシナリオとの整合性（最重要）

- Phase 3のテストシナリオに沿っているか
- テストシナリオの主要ケースがすべて実装されているか
- テストシナリオから逸脱していないか

### 2. テストカバレッジ

- 主要な機能がすべてテストされているか
- 正常系・異常系の両方がカバーされているか
- エッジケースが考慮されているか
- カバレッジの目標（80%以上推奨）が達成されているか

### 3. テストの独立性

- 各テストが独立して実行可能か
- テストの実行順序に依存していないか
- テスト間で状態を共有していないか

### 4. テストの可読性

- テストの意図がコメントで明確か
- Given-When-Then構造でテストが記述されているか
- テストケース名が適切か

### 5. モック・スタブの使用

- モック・スタブが適切に使用されているか
- 外部依存が適切に排除されているか
- モックの設定が正しいか

### 6. テストコードの品質

- テストコードが実行可能か（シンタックスエラーがないか）
- アサーション（assert文）が明確か
- テストユーティリティが適切に使用されているか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- テストシナリオの主要ケースが実装されていない
- テストコードが実行不可能（シンタックスエラー等）
- テストの独立性が保たれていない（他のテストに依存）
- 実コードが混入している（Phase 5では実コード変更禁止）

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- テストカバレッジの拡大
- エッジケースの追加
- コメントの充実
- テストヘルパーの抽出
- モックの改善

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **Phase 3のテストシナリオがすべて実装されている**: PASS/FAIL - （コメント）
- [x/  ] **テストコードが実行可能である**: PASS/FAIL - （コメント）
- [x/  ] **テストの意図がコメントで明確**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. テストシナリオとの整合性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. テストカバレッジ

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 3. テストの独立性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. テストの可読性

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 5. モック・スタブの使用

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. テストコードの品質

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（テストコード実装全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、テストコード実装のクリティカルシンキングレビューを実施してください。

**注意**: テスト実装ログだけでなく、実際に実装されたテストコードファイルも確認してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
