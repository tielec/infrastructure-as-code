# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-370/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-370/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #370
- **タイトル**: [IMPROVEMENT] AIワークフロー: GitHub Issue進捗コメント最適化（ページ重量化対策）
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/370
- **ラベル**: なし

### 本文

## 概要

AIワークフローの進捗をGitHub Issueにコメントで投稿していくと、**Issueページが非常に重くなる**問題が発生しています。

最適な対応策をゼロから検討し、実装したいです。

## 現状の問題

### 投稿されるコメントの量

現在の実装（`scripts/ai-workflow/phases/base_phase.py`）では、1つのフェーズで以下のタイミングでコメントが投稿されます：

1. **フェーズ開始時** (`post_progress()` - 650-654行目)
2. **レビュー結果** (`post_review()` - 677-681行目、745-749行目)
3. **リトライ時** (`post_progress()` - 702-705行目、767-769行目)
4. **フェーズ完了/失敗時** (`post_progress()` - 801-809行目)
5. **エラー発生時** (`post_progress()` - 820-822行目)
6. **Git push失敗時** (`post_progress()` - 838-841行目)

**1フェーズあたり最大10コメント以上** × **9フェーズ（Phase 0-8）** = **最大90コメント以上**

さらに、`post_output()`で成果物の内容も投稿される場合があり、コメント数はさらに増加します。

### Issueページへの影響

- ページの読み込みが遅い
- スクロールが重い
- 重要なコメントが埋もれる
- モバイルでは特に閲覧困難

## 対応策の検討

### オプション1: 進捗を1つのコメントに統合（GitHub API Edit Comment使用）

#### 概要
進捗コメントを1つだけ作成し、更新時にはGitHub APIの `Edit Comment` 機能で既存コメントを編集する。

#### 実装方法

**1. 初回投稿時にコメントIDを記録**

```python
class GitHubClient:
    def create_or_update_progress_comment(
        self,
        issue_number: int,
        content: str
    ) -> Dict[str, Any]:
        """
        進捗コメントを作成または更新

        Returns:
            Dict[str, Any]:
                - comment_id: int - コメントID
                - comment_url: str - コメントURL
        """
        # メタデータから既存コメントIDを取得
        existing_comment_id = self.metadata.get_progress_comment_id()

        if existing_comment_id:
            # 既存コメントを更新
            comment = self.repository.get_issue_comment(existing_comment_id)
            comment.edit(content)
            return {
                'comment_id': existing_comment_id,
                'comment_url': comment.html_url
            }
        else:
            # 新規コメント作成
            issue = self.repository.get_issue(issue_number)
            comment = issue.create_comment(content)

            # メタデータにコメントIDを保存
            self.metadata.save_progress_comment_id(comment.id)

            return {
                'comment_id': comment.id,
                'comment_url': comment.html_url
            }
```

**2. 進捗コメントのフォーマット**

```markdown
## 🤖 AI Workflow - 進捗状況

### 全体進捗

- ✅ Phase 0: Planning - **COMPLETED** (2025-01-15 10:30)
- ✅ Phase 1: Requirements - **COMPLETED** (2025-01-15 11:00)
- 🔄 Phase 2: Design - **IN PROGRESS** (開始: 2025-01-15 11:30)
- ⏸️ Phase 3: Test Scenario - **PENDING**
- ⏸️ Phase 4: Implementation - **PENDING**
- ⏸️ Phase 5: Test Implementation - **PENDING**
- ⏸️ Phase 6: Testing - **PENDING**
- ⏸️ Phase 7: Documentation - **PENDING**
- ⏸️ Phase 8: Report - **PENDING**

### 現在のフェーズ: Phase 2 (Design)

**ステータス**: IN PROGRESS
**開始時刻**: 2025-01-15 11:30:45
**試行回数**: 1/3

#### ログ

- `11:30:45` - Phase 2開始
- `11:32:10` - Execute実行中
- `11:35:20` - Execute完了
- `11:35:30` - Review実行中

<details>
<summary>完了したフェーズの詳細</summary>

### Phase 0: Planning

**ステータス**: COMPLETED
**レビュー結果**: PASS
**実行時間**: 5分30秒
**コスト**: $0.15

### Phase 1: Requirements

**ステータス**: COMPLETED
**レビュー結果**: PASS_WITH_SUGGESTIONS
**実行時間**: 8分20秒
**コスト**: $0.23

</details>

---
*最終更新: 2025-01-15 11:35:30*
*AI駆動開発自動化ワークフロー (Claude Agent SDK)*
```

**3. メタデータスキーマ拡張**

```json
{
  "github_integration": {
    "progress_comment_id": 123456789,
    "progress_comment_url": "https://github.com/..."
  }
}
```

#### メリット
- ✅ コメント数が1つのみ（非常にシンプル）
- ✅ 常に最新の状態が一番上に表示される
- ✅ Issueページが軽量
- ✅ 履歴は折りたたみ可能

#### デメリット
- ❌ コメント編集履歴が残る（GitHubのUI上で確認可能）
- ❌ 通知が更新のたびに飛ぶ可能性

---

### オプション2: GitHub Gistに進捗を記録し、Issueにはリンクのみ投稿

#### 概要
詳細な進捗ログはGitHub Gistに記録し、Issueには1つのコメントでGistリンクのみ投稿する。

#### 実装方法

**1. Gistの作成と更新**

```python
class GitHubClient:
    def create_or_update_progress_gist(
        self,
        issue_number: int,
        content: str
    ) -> Dict[str, Any]:
        """
        進捗Gistを作成または更新

        Returns:
            Dict[str, Any]:
                - gist_id: str
                - gist_url: str
        """
        existing_gist_id = self.metadata.get_progress_gist_id()

        if existing_gist_id:
            # 既存Gistを更新
            gist = self.github.get_gist(existing_gist_id)
            gist.edit(
                files={
                    f'ai-workflow-progress-issue-{issue_number}.md':
                        InputFileContent(content)
                }
            )
            return {
                'gist_id': existing_gist_id,
                'gist_url': gist.html_url
            }
        else:
            # 新規Gist作成
            gist = self.github.get_user().create_gist(
                public=False,
                files={
                    f'ai-workflow-progress-issue-{issue_number}.md':
                        InputFileContent(content)
                },
                description=f'AI Workflow Progress - Issue #{issue_number}'
            )

            # メタデータに保存
            self.metadata.save_progress_gist_id(gist.id)

            return {
                'gist_id': gist.id,
                'gist_url': gist.html_url
            }
```

**2. Issueコメント（1つのみ）**

```markdown
## 🤖 AI Workflow - 進捗状況

📊 **詳細な進捗はこちら**: [Progress Log (Gist)](https://gist.github.com/...)

### 現在のステータス

- **現在のフェーズ**: Phase 2 (Design)
- **ステータス**: IN PROGRESS
- **開始時刻**: 2025-01-15 11:30
- **試行回数**: 1/3

### 完了したフェーズ

✅ Phase 0: Planning - COMPLETED (PASS)
✅ Phase 1: Requirements - COMPLETED (PASS_WITH_SUGGESTIONS)

---
*最終更新: 2025-01-15 11:35:30*
*詳細ログは上記Gistリンクを参照*
```

#### メリット
- ✅ Issueコメント数が1つのみ
- ✅ 詳細ログは別管理で、Issue本体は軽量
- ✅ Gistは更新履歴が残る（リビジョン管理）
- ✅ Gistは単独でシェア可能

#### デメリット
- ❌ GitHubのUIから離れる（別タブで開く必要）
- ❌ Gist APIの追加実装が必要

---

### オプション3: Pull RequestのDescriptionに進捗を記録

#### 概要
IssueではなくPull RequestのDescription（本文）に進捗を記録し、常に最新状態を反映する。

#### 実装方法

**1. init時にPRを作成し、PR番号をメタデータに保存**（現在の実装に近い）

**2. PR Descriptionを更新**

```python
class GitHubClient:
    def update_pr_description_with_progress(
        self,
        pr_number: int,
        progress_content: str
    ):
        """
        PR DescriptionにAIワークフロー進捗を追記

        Args:
            pr_number: PR番号
            progress_content: 進捗内容（Markdown）
        """
        pr = self.repository.get_pull(pr_number)

        # 既存のDescription取得
        current_body = pr.body or ''

        # 進捗セクションを更新
        # "## 🤖 AI Workflow Progress" 以降を置き換え
        if '## 🤖 AI Workflow Progress' in current_body:
            # 既存進捗セクションを削除
            parts = current_body.split('## 🤖 AI Workflow Progress')
            new_body = parts[0].rstrip() + '\n\n## 🤖 AI Workflow Progress\n\n' + progress_content
        else:
            # 進捗セクションを追加
            new_body = current_body + '\n\n---\n\n## 🤖 AI Workflow Progress\n\n' + progress_content

        # PR Description更新
        pr.edit(body=new_body)
```

**3. PR Descriptionのフォーマット**

```markdown
<!-- 既存のPR本文 -->

## Summary
...

## TODO
- [ ] Phase 0: Planning
- [ ] Phase 1: Requirements
...

---

## 🤖 AI Workflow Progress

### 全体進捗

- ✅ Phase 0: Planning - COMPLETED (PASS) - 2025-01-15 10:30
- ✅ Phase 1: Requirements - COMPLETED (PASS_WITH_SUGGESTIONS) - 2025-01-15 11:00
- 🔄 Phase 2: Design - IN PROGRESS - 開始: 2025-01-15 11:30
- ⏸️ Phase 3-8: PENDING

### 現在のフェーズ: Phase 2 (Design)

**ステータス**: IN PROGRESS
**開始時刻**: 2025-01-15 11:30:45
**試行回数**: 1/3

#### 最新ログ

- `11:30:45` - Phase 2開始
- `11:32:10` - Execute実行中
- `11:35:20` - Execute完了
- `11:35:30` - Review実行中

<details>
<summary>詳細ログ（全フェーズ）</summary>

### Phase 0: Planning
...

### Phase 1: Requirements
...

</details>

---
*最終更新: 2025-01-15 11:35:30*
```

#### メリット
- ✅ PRとIssueの両方で進捗確認可能
- ✅ Issueコメントが不要（Issue本体は軽量）
- ✅ PRレビュー時に進捗が確認しやすい
- ✅ GitHub UI上で完結

#### デメリット
- ❌ PR Descriptionが長くなる
- ❌ init時にPR作成が必須

---

### オプション4: 進捗投稿の粒度を調整（最小限のコメント）

#### 概要
現在の投稿頻度を大幅に削減し、重要なタイミングのみコメント投稿する。

#### 投稿タイミングの見直し

**投稿する**:
- ✅ フェーズ完了時のみ（成功時のみ）
- ✅ 致命的なエラー時のみ

**投稿しない**:
- ❌ フェーズ開始時（不要）
- ❌ レビュー中（中間状態は不要）
- ❌ リトライ時（中間状態は不要）

#### 実装方法

`base_phase.py` の `run()` メソッドを修正：

```python
def run(self) -> bool:
    # ... 既存の処理 ...

    # ステータス更新
    self.update_phase_status(status=final_status, review_result=review_result)

    # 完了時のみ投稿
    if final_status == 'completed':
        self.post_progress(
            status='completed',
            details=f'{self.phase_name}フェーズが完了しました。レビュー結果: {review_result}'
        )
    # 失敗時のみ投稿（エラー詳細を含む）
    elif final_status == 'failed':
        self.post_progress(
            status='failed',
            details=f'{self.phase_name}フェーズが失敗しました。詳細はログを確認してください。'
        )

    # 中間状態（in_progress、リトライ等）は投稿しない
```

#### メリット
- ✅ コメント数が大幅に削減（最大9コメント: 各フェーズ完了時のみ）
- ✅ 実装が最もシンプル（既存コードの削除のみ）
- ✅ 重要な情報のみが投稿される

#### デメリット
- ❌ 中間状態が見えない（実行中かどうか不明）
- ❌ リアルタイム性が低い

---

### オプション5: 折りたたみ可能なコメント形式（Markdownの `<details>` タグ）

#### 概要
現在の投稿頻度を維持しつつ、コメント内容を折りたたみ可能にして視覚的な負荷を軽減。

#### 実装方法

```python
def post_progress(self, status: str, details: Optional[str] = None):
    """GitHubに進捗報告（折りたたみ形式）"""
    try:
        issue_number = int(self.metadata.data['issue_number'])

        # 折りたたみ可能なコメント
        body = f"<details>\n"
        body += f"<summary>🔄 Phase {self.phase_number} ({self.phase_name}) - {status.upper()}</summary>\n\n"
        body += f"**ステータス**: {status.upper()}\n\n"

        if details:
            body += f"{details}\n\n"

        body += f"*タイムスタンプ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*\n"
        body += "</details>"

        self.github.post_comment(issue_number, body)
        print(f"[INFO] GitHub Issue #{issue_number} に進捗を投稿しました: {status}")
    except Exception as e:
        print(f"[WARNING] GitHub投稿に失敗しました: {e}")
```

#### コメント例

```markdown
<details>
<summary>🔄 Phase 2 (Design) - IN PROGRESS</summary>

**ステータス**: IN PROGRESS

Design フェーズを開始しました。

*タイムスタンプ: 2025-01-15 11:30:45*
</details>
```

→ GitHubでは以下のように表示：

```
▶ 🔄 Phase 2 (Design) - IN PROGRESS
```

クリックすると展開される。

#### メリット
- ✅ コメント数は変わらないが、視覚的な負荷が軽減
- ✅ 実装が簡単（Markdown形式を変更するだけ）
- ✅ 詳細を見たい場合はクリックで展開可能

#### デメリット
- ❌ コメント数自体は減らない（Issueページの読み込みは重いまま）
- ❌ モバイルでは展開が面倒

---

## 推奨案

### 第1候補: オプション1（進捗を1つのコメントに統合）

**理由**:
- コメント数が1つのみで、Issue本体が軽量
- リアルタイム性が高い（常に最新状態が反映される）
- 実装もシンプル（GitHub API Edit Comment）
- 履歴は折りたたみで確認可能

### 第2候補: オプション2（GitHub Gist使用）

**理由**:
- Issueコメント数が1つのみ
- 詳細ログは別管理で、柔軟性が高い
- Gistは更新履歴が残る（リビジョン管理）

### 補助的施策: オプション5（折りたたみ形式）

レビュー結果などの**重要なコメントのみ**残し、それ以外は折りたたみ形式にする。

---

## 実装TODO

- [ ] 推奨案（オプション1 or 2）を選択
- [ ] `GitHubClient` に新しいメソッドを追加
  - `create_or_update_progress_comment()` または
  - `create_or_update_progress_gist()`
- [ ] `metadata.json` スキーマを拡張（コメントID or Gist IDを保存）
- [ ] `BasePhase.post_progress()` を修正
- [ ] `BasePhase.post_review()` を修正（必要に応じて）
- [ ] 既存のワークフローでテスト実行
- [ ] ドキュメント更新（README.md）

---

## 関連ファイル

- scripts/ai-workflow/phases/base_phase.py
- scripts/ai-workflow/core/github_client.py
- scripts/ai-workflow/core/metadata_manager.py
- scripts/ai-workflow/core/workflow_state.py

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **実装戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **テスト戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **既存コードへの影響範囲が分析されている**: PASS/FAIL - （コメント）
- [x/  ] **変更が必要なファイルがリストアップされている**: PASS/FAIL - （コメント）
- [x/  ] **設計が実装可能である**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、設計書のクリティカルシンキングレビューを実施してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
