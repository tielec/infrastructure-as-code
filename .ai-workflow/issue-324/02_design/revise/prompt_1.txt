# 詳細設計フェーズ - 修正プロンプト

## タスク概要
レビューで指摘された問題を修正し、改善された設計書を作成してください。

## 元の成果物
@.ai-workflow/issue-324/02_design/output/design.md

## レビュー結果
レビュー結果が空でした。

## 参考情報

### 要件定義書
@.ai-workflow/issue-324/01_requirements/output/requirements.md

### GitHub Issue情報
## Issue情報

- **Issue番号**: #324
- **タイトル**: [FEATURE] 実装フェーズとテストコード実装フェーズの分離
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/324
- **ラベル**: なし

### 本文

## 概要

現在のAIワークフローでは、Phase 4（implementation）で実コードとテストコードを同時に実装していますが、これらを別々のフェーズとして管理したい。

実装とテストを分離することで、以下のメリットが得られる：
- **段階的な開発**: 実コードの実装 → テストコードの実装という明確な流れ
- **レビューの焦点化**: 各フェーズで異なる観点でレビュー可能
- **並行作業の可能性**: 実装とテスト実装を別々に進められる（将来的に）
- **クリティカルシンキングレビューの精度向上**: 各フェーズで異なるレビュー基準を適用

## 現在のフェーズ構成

1. Phase 1: requirements（要件定義）
2. Phase 2: design（設計）
3. Phase 3: test_scenario（テストシナリオ）
4. **Phase 4: implementation（実装）** ← ここで実コードとテストコードを両方実装
5. Phase 5: testing（テスト実行）
6. Phase 6: documentation（ドキュメント）
7. Phase 7: report（レポート）

## 提案する新しいフェーズ構成

1. Phase 1: requirements（要件定義）
2. Phase 2: design（設計）
3. Phase 3: test_scenario（テストシナリオ）
4. **Phase 4: implementation（実装）** ← 実コードのみ実装
5. **Phase 5: test_implementation（テストコード実装）** ← 新規追加
6. Phase 6: testing（テスト実行）← Phase 5から繰り下げ
7. Phase 7: documentation（ドキュメント）← Phase 6から繰り下げ
8. Phase 8: report（レポート）← Phase 7から繰り下げ

## 要件

### 機能要件

**FR-001: Phase 5の新設（test_implementation）**
- テストコード実装に特化したフェーズを追加
- Phase 3（test_scenario）で作成されたテストシナリオを基に実装
- Phase 4（implementation）で実装された実コードに対するテストを作成

**FR-002: 既存フェーズの番号変更**
- Phase 5（testing）→ Phase 6（testing）
- Phase 6（documentation）→ Phase 7（documentation）
- Phase 7（report）→ Phase 8（report）

**FR-003: Phase 4（implementation）の責務明確化**
- 実コードのみを実装対象とする
- テストコードは Phase 5（test_implementation）に委譲
- プロンプトを更新して責務を明確化

**FR-004: Phase 5（test_implementation）のプロンプト作成**
- prompts/test_implementation/execute.txt: テストコード実装プロンプト
- prompts/test_implementation/review.txt: テストコードレビュープロンプト
- prompts/test_implementation/revise.txt: テストコード修正プロンプト（オプション）

**FR-005: metadata.jsonの拡張**
- phases配列にtest_implementationを追加
- 既存のメタデータ構造との互換性を維持

**FR-006: 依存関係の明確化**
- Phase 5（test_implementation）は Phase 4（implementation）の完了が前提
- Phase 6（testing）は Phase 5（test_implementation）の完了が前提

### 非機能要件

**NFR-001: 後方互換性**
- 既存のワークフロー（Phase 1-7）は引き続き動作
- 新しいフェーズ構成はオプトイン方式（設定で選択可能）

**NFR-002: パフォーマンス**
- フェーズ追加によるオーバーヘッドは最小限
- 各フェーズの実行時間は従来のPhase 4の半分程度を目標

**NFR-003: ログとトレーサビリティ**
- 各フェーズの実行ログを明確に分離
- Phase間の依存関係をログで追跡可能

## 受け入れ基準

- [ ] Phase 5（test_implementation）が新設されている
- [ ] Phase 5でテストコードのみが実装される
- [ ] Phase 4では実コードのみが実装される
- [ ] 既存のワークフロー（Phase 1-7）は引き続き動作する
- [ ] Jenkinsでの自動実行が可能
- [ ] クリティカルシンキングレビューが正しく機能する
- [ ] metadata.jsonにtest_implementationフェーズが記録される
- [ ] 全フェーズのGit auto-commit & pushが正しく動作する

## 優先度

High

## ラベル

enhancement, ai-workflow, refactoring

## 関連Issue

- 関連: #305（全フェーズ完成 v1.3.0）
- 依存: #315（テストシナリオフェーズのリトライ問題）

## 修正指示

### ブロッカー（BLOCKER）の解消

レビュー結果の「ブロッカー」セクションに記載された問題は、**次フェーズに進めない重大な問題**です。これらを必ず解消してください。

**ブロッカーの典型例**:
- 3つの戦略判断（実装・テスト・テストコード）が欠落 → 追加する
- 判断根拠が不十分 → 具体的かつ論理的に補強する
- ファイルリストが未記載 → リストアップする
- 設計が実装不可能 → 実装可能な設計に修正する
- 重大なセキュリティリスク → 対策を追加する

### 改善提案（SUGGESTION）の検討

レビュー結果の「改善提案」セクションに記載された項目は、可能な範囲で反映してください。

**改善提案の優先度**:
1. 設計の品質を大きく向上させる提案 → 優先的に反映
2. ドキュメントの充実（図表追加等） → 可能であれば反映
3. 細かい表現の改善 → 時間があれば反映

## 品質ゲート（Phase 2）

修正後の設計書は、以下の品質ゲートをすべて満たす必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## 修正方針

### 1. ブロッカー対応（最優先）

レビューで指摘されたブロッカーを1つずつ解消してください。

**対応方法**:
- 元の設計書を読み込む
- ブロッカー指摘箇所を特定
- 指摘内容を理解し、適切に修正
- 修正後、ブロッカーが解消されたか確認

### 2. 改善提案の反映（推奨）

可能な範囲で、レビューの改善提案を反映してください。

**対応方法**:
- 改善提案を読み込む
- 実装可能かつ効果的な提案を選択
- 元の設計書に追記・修正
- 全体の整合性を確認

### 3. 元の成果物の尊重

レビューで問題がなかった部分は、基本的に変更しないでください。

**注意点**:
- ブロッカー解消に必要な修正のみ実施
- 不必要な変更は避ける
- 元の設計の良い部分は維持する

## 修正後の確認事項

修正完了後、以下を確認してください：

1. **ブロッカーが解消されたか**
   - レビューで指摘されたすべてのブロッカーに対応したか
   - 対応内容が適切か

2. **品質ゲートを満たしているか**
   - 5つの品質ゲートすべてをクリアしているか

3. **全体の整合性**
   - 修正によって新たな矛盾が生まれていないか
   - ドキュメント全体が一貫しているか

4. **実装可能性**
   - 修正後の設計が実装可能か
   - 次フェーズ（テストシナリオ）に進めるか

## 出力形式

修正した設計書を `.ai-workflow/issue-324/02_design/output/design.md` として保存してください。

**上書き形式**で保存してください（元のファイルを置き換え）。

## 修正開始

上記を踏まえ、レビュー指摘事項を反映した改善版の設計書を作成してください。
