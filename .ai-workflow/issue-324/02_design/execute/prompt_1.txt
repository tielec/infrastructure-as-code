# 詳細設計フェーズ - 実行プロンプト

## タスク概要
要件定義書とGitHub Issueの内容から、詳細な設計書を作成してください。このフェーズでは、**実装戦略・テスト戦略・テストコード戦略の判断**も行います。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-324/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-324/01_requirements/output/requirements.md

### GitHub Issue情報
## Issue情報

- **Issue番号**: #324
- **タイトル**: [FEATURE] 実装フェーズとテストコード実装フェーズの分離
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/324
- **ラベル**: なし

### 本文

## 概要

現在のAIワークフローでは、Phase 4（implementation）で実コードとテストコードを同時に実装していますが、これらを別々のフェーズとして管理したい。

実装とテストを分離することで、以下のメリットが得られる：
- **段階的な開発**: 実コードの実装 → テストコードの実装という明確な流れ
- **レビューの焦点化**: 各フェーズで異なる観点でレビュー可能
- **並行作業の可能性**: 実装とテスト実装を別々に進められる（将来的に）
- **クリティカルシンキングレビューの精度向上**: 各フェーズで異なるレビュー基準を適用

## 現在のフェーズ構成

1. Phase 1: requirements（要件定義）
2. Phase 2: design（設計）
3. Phase 3: test_scenario（テストシナリオ）
4. **Phase 4: implementation（実装）** ← ここで実コードとテストコードを両方実装
5. Phase 5: testing（テスト実行）
6. Phase 6: documentation（ドキュメント）
7. Phase 7: report（レポート）

## 提案する新しいフェーズ構成

1. Phase 1: requirements（要件定義）
2. Phase 2: design（設計）
3. Phase 3: test_scenario（テストシナリオ）
4. **Phase 4: implementation（実装）** ← 実コードのみ実装
5. **Phase 5: test_implementation（テストコード実装）** ← 新規追加
6. Phase 6: testing（テスト実行）← Phase 5から繰り下げ
7. Phase 7: documentation（ドキュメント）← Phase 6から繰り下げ
8. Phase 8: report（レポート）← Phase 7から繰り下げ

## 要件

### 機能要件

**FR-001: Phase 5の新設（test_implementation）**
- テストコード実装に特化したフェーズを追加
- Phase 3（test_scenario）で作成されたテストシナリオを基に実装
- Phase 4（implementation）で実装された実コードに対するテストを作成

**FR-002: 既存フェーズの番号変更**
- Phase 5（testing）→ Phase 6（testing）
- Phase 6（documentation）→ Phase 7（documentation）
- Phase 7（report）→ Phase 8（report）

**FR-003: Phase 4（implementation）の責務明確化**
- 実コードのみを実装対象とする
- テストコードは Phase 5（test_implementation）に委譲
- プロンプトを更新して責務を明確化

**FR-004: Phase 5（test_implementation）のプロンプト作成**
- prompts/test_implementation/execute.txt: テストコード実装プロンプト
- prompts/test_implementation/review.txt: テストコードレビュープロンプト
- prompts/test_implementation/revise.txt: テストコード修正プロンプト（オプション）

**FR-005: metadata.jsonの拡張**
- phases配列にtest_implementationを追加
- 既存のメタデータ構造との互換性を維持

**FR-006: 依存関係の明確化**
- Phase 5（test_implementation）は Phase 4（implementation）の完了が前提
- Phase 6（testing）は Phase 5（test_implementation）の完了が前提

### 非機能要件

**NFR-001: 後方互換性**
- 既存のワークフロー（Phase 1-7）は引き続き動作
- 新しいフェーズ構成はオプトイン方式（設定で選択可能）

**NFR-002: パフォーマンス**
- フェーズ追加によるオーバーヘッドは最小限
- 各フェーズの実行時間は従来のPhase 4の半分程度を目標

**NFR-003: ログとトレーサビリティ**
- 各フェーズの実行ログを明確に分離
- Phase間の依存関係をログで追跡可能

## 受け入れ基準

- [ ] Phase 5（test_implementation）が新設されている
- [ ] Phase 5でテストコードのみが実装される
- [ ] Phase 4では実コードのみが実装される
- [ ] 既存のワークフロー（Phase 1-7）は引き続き動作する
- [ ] Jenkinsでの自動実行が可能
- [ ] クリティカルシンキングレビューが正しく機能する
- [ ] metadata.jsonにtest_implementationフェーズが記録される
- [ ] 全フェーズのGit auto-commit & pushが正しく動作する

## 優先度

High

## ラベル

enhancement, ai-workflow, refactoring

## 関連Issue

- 関連: #305（全フェーズ完成 v1.3.0）
- 依存: #315（テストシナリオフェーズのリトライ問題）

### 既存コードベースの理解

このリポジトリのプロジェクト構造、アーキテクチャ、コーディング規約を理解するため、以下のドキュメントを参照してください：

- プロジェクト全体のガイドライン: @CLAUDE.md（存在する場合）
- アーキテクチャ設計: @ARCHITECTURE.md（存在する場合）
- プロジェクトREADME: @README.md
- その他、関連するREADME、CONTRIBUTION.md等のドキュメント

上記ドキュメントから以下を把握してください：
- プロジェクトの目的とアーキテクチャ
- ディレクトリ構造とコンポーネント構成
- 既存のコーディング規約やパターン
- 開発ワークフロー

## 設計書作成手順

### 1. 既存コードベース分析

要件定義書とIssue内容から、以下を分析してください：

1. **影響範囲の特定**
   - どのコンポーネント（Ansible/Pulumi/Jenkins/Scripts）が影響を受けるか
   - 既存ファイルの修正が必要か、新規ファイルの作成が必要か
   - 依存関係のあるコンポーネントは何か

2. **既存パターンの調査**
   - 類似の機能実装がないか調査
   - 既存のコーディング規約やパターンを確認
   - 再利用可能なコンポーネントの特定

### 2. 実装戦略の判断（必須）

以下の3つから選択し、**判断根拠を明記**してください：

- **CREATE（新規作成）**: 既存コードとの依存関係がなく、完全に新しい機能
- **EXTEND（拡張）**: 既存コードを拡張・修正する必要がある
- **REFACTOR（リファクタリング）**: 既存コードの構造改善が主目的

**判断基準**：
- 既存ファイルへの影響範囲
- 新規ファイルの作成数
- 既存機能との統合度

**出力形式**：
```markdown
### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- （理由1）
- （理由2）
```

### 3. テスト戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **UNIT_ONLY**: Unitテストのみ
- **INTEGRATION_ONLY**: Integrationテストのみ
- **BDD_ONLY**: BDDテストのみ
- **UNIT_INTEGRATION**: Unit + Integration
- **UNIT_BDD**: Unit + BDD
- **INTEGRATION_BDD**: Integration + BDD
- **ALL**: すべて

**判断基準**：
- 機能の複雑度
- ユーザーストーリーの有無
- 既存テストとの整合性

**出力形式**：
```markdown
### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- （理由1）
- （理由2）
```

### 4. テストコード戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **EXTEND_TEST（既存テストの拡張）**: 既存テストファイルに追加
- **CREATE_TEST（新規テスト作成）**: 新しいテストファイルを作成
- **BOTH_TEST（両方）**: 既存テストの拡張と新規テストの作成

**判断基準**：
- 既存テストファイルの有無
- 既存テストとの関連性

**出力形式**：
```markdown
### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- （理由1）
- （理由2）
```

### 5. 設計書の構成

以下のセクションを含む設計書を作成してください：

#### 必須セクション：

1. **アーキテクチャ設計**
   - システム全体図
   - コンポーネント間の関係
   - データフロー

2. **実装戦略判断**（セクション2で記載）

3. **テスト戦略判断**（セクション3で記載）

4. **テストコード戦略判断**（セクション4で記載）

5. **影響範囲分析**
   - 既存コードへの影響
   - 依存関係の変更
   - マイグレーション要否

6. **変更・追加ファイルリスト**
   - 新規作成ファイル（相対パス）
   - 修正が必要な既存ファイル（相対パス）
   - 削除が必要なファイル（相対パス）

7. **詳細設計**
   - クラス設計（必要な場合）
   - 関数設計（主要な関数のみ）
   - データ構造設計
   - インターフェース設計

8. **セキュリティ考慮事項**
   - 認証・認可
   - データ保護
   - セキュリティリスクと対策

9. **非機能要件への対応**
   - パフォーマンス
   - スケーラビリティ
   - 保守性

10. **実装の順序**
    - 実装順序の推奨
    - 依存関係の考慮

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **既存プロジェクト構造を尊重**: 既存のディレクトリ構造やコーディング規約に従ってください
2. **トレーサビリティ**: 要件定義書の各要件に対応する設計を明示してください
3. **実装可能性**: 実装できない設計や曖昧な設計は避けてください
4. **判断の明示**: 3つの戦略判断（実装・テスト・テストコード）は必ず明記してください
5. **レビューされることを意識**: 設計書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（5つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 判断根拠は具体的かつ論理的に記載すること

## 出力形式

設計書は `.ai-workflow/issue-324/02_design/output/design.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。図表が必要な場合はMarkdownのコードブロックやテーブルを活用してください。

## 実装開始

上記を踏まえ、詳細設計書を作成してください。
