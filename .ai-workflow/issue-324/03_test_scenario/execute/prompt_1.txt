# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-324/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-324/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-324/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**INTEGRATION_BDD**

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #324
- **タイトル**: [FEATURE] 実装フェーズとテストコード実装フェーズの分離
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/324
- **ラベル**: なし

### 本文

## 概要

現在のAIワークフローでは、Phase 4（implementation）で実コードとテストコードを同時に実装していますが、これらを別々のフェーズとして管理したい。

実装とテストを分離することで、以下のメリットが得られる：
- **段階的な開発**: 実コードの実装 → テストコードの実装という明確な流れ
- **レビューの焦点化**: 各フェーズで異なる観点でレビュー可能
- **並行作業の可能性**: 実装とテスト実装を別々に進められる（将来的に）
- **クリティカルシンキングレビューの精度向上**: 各フェーズで異なるレビュー基準を適用

## 現在のフェーズ構成

1. Phase 1: requirements（要件定義）
2. Phase 2: design（設計）
3. Phase 3: test_scenario（テストシナリオ）
4. **Phase 4: implementation（実装）** ← ここで実コードとテストコードを両方実装
5. Phase 5: testing（テスト実行）
6. Phase 6: documentation（ドキュメント）
7. Phase 7: report（レポート）

## 提案する新しいフェーズ構成

1. Phase 1: requirements（要件定義）
2. Phase 2: design（設計）
3. Phase 3: test_scenario（テストシナリオ）
4. **Phase 4: implementation（実装）** ← 実コードのみ実装
5. **Phase 5: test_implementation（テストコード実装）** ← 新規追加
6. Phase 6: testing（テスト実行）← Phase 5から繰り下げ
7. Phase 7: documentation（ドキュメント）← Phase 6から繰り下げ
8. Phase 8: report（レポート）← Phase 7から繰り下げ

## 要件

### 機能要件

**FR-001: Phase 5の新設（test_implementation）**
- テストコード実装に特化したフェーズを追加
- Phase 3（test_scenario）で作成されたテストシナリオを基に実装
- Phase 4（implementation）で実装された実コードに対するテストを作成

**FR-002: 既存フェーズの番号変更**
- Phase 5（testing）→ Phase 6（testing）
- Phase 6（documentation）→ Phase 7（documentation）
- Phase 7（report）→ Phase 8（report）

**FR-003: Phase 4（implementation）の責務明確化**
- 実コードのみを実装対象とする
- テストコードは Phase 5（test_implementation）に委譲
- プロンプトを更新して責務を明確化

**FR-004: Phase 5（test_implementation）のプロンプト作成**
- prompts/test_implementation/execute.txt: テストコード実装プロンプト
- prompts/test_implementation/review.txt: テストコードレビュープロンプト
- prompts/test_implementation/revise.txt: テストコード修正プロンプト（オプション）

**FR-005: metadata.jsonの拡張**
- phases配列にtest_implementationを追加
- 既存のメタデータ構造との互換性を維持

**FR-006: 依存関係の明確化**
- Phase 5（test_implementation）は Phase 4（implementation）の完了が前提
- Phase 6（testing）は Phase 5（test_implementation）の完了が前提

### 非機能要件

**NFR-001: 後方互換性**
- 既存のワークフロー（Phase 1-7）は引き続き動作
- 新しいフェーズ構成はオプトイン方式（設定で選択可能）

**NFR-002: パフォーマンス**
- フェーズ追加によるオーバーヘッドは最小限
- 各フェーズの実行時間は従来のPhase 4の半分程度を目標

**NFR-003: ログとトレーサビリティ**
- 各フェーズの実行ログを明確に分離
- Phase間の依存関係をログで追跡可能

## 受け入れ基準

- [ ] Phase 5（test_implementation）が新設されている
- [ ] Phase 5でテストコードのみが実装される
- [ ] Phase 4では実コードのみが実装される
- [ ] 既存のワークフロー（Phase 1-7）は引き続き動作する
- [ ] Jenkinsでの自動実行が可能
- [ ] クリティカルシンキングレビューが正しく機能する
- [ ] metadata.jsonにtest_implementationフェーズが記録される
- [ ] 全フェーズのGit auto-commit & pushが正しく動作する

## 優先度

High

## ラベル

enhancement, ai-workflow, refactoring

## 関連Issue

- 関連: #305（全フェーズ完成 v1.3.0）
- 依存: #315（テストシナリオフェーズのリトライ問題）

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-324/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
