# 実装フェーズ - 実行プロンプト

## タスク概要
設計書とテストシナリオに基づいて、実際のコード実装を行ってください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-324/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 設計書
@.ai-workflow/issue-324/02_design/output/design.md

### テストシナリオ
@.ai-workflow/issue-324/03_test_scenario/output/test-scenario.md

### 要件定義書（参考）
@.ai-workflow/issue-324/01_requirements/output/requirements.md

### 実装戦略（Phase 2で決定）
**EXTEND**

## 実装戦略別の対応

Phase 2で決定された実装戦略に応じて、適切な実装を行ってください：

### CREATE（新規作成）
- 新しいファイルを作成
- 既存ファイルへの影響を最小限に
- 設計書の「新規作成ファイルリスト」に従う

### EXTEND（拡張）
- 既存ファイルを読み込み、理解
- 既存のコーディングスタイルに合わせて拡張
- 設計書の「修正ファイルリスト」に従う

### REFACTOR（リファクタリング）
- 既存コードの構造改善
- 機能を維持しながら品質向上
- テストが既に存在する場合、テストが通ることを確認

## 実装手順

### 1. 既存コードの理解

設計書に記載された「変更・追加ファイルリスト」を確認し、関連ファイルを読み込んでください。

**読み込むべきファイル**:
- 設計書に記載された既存ファイル
- 関連するドキュメント（README、CONTRIBUTION等）
- 既存のテストファイル（存在する場合）

### 2. コーディング規約の確認

プロジェクトのコーディング規約を確認してください：
- @CONTRIBUTION.md（存在する場合）
- @CLAUDE.md（存在する場合）
- 既存コードのスタイル

### 3. 実装の実行

設計書に従って、以下を実装してください：

#### 3.1 コード実装
- 設計書の「詳細設計」セクションに従う
- 関数・クラス・メソッドを実装
- 適切なエラーハンドリングを追加
- コメント・ドキュメント文字列を記載

#### 3.2 テストコード実装
- テストシナリオに基づいてテストコードを実装
- Phase 2で決定されたテスト戦略に従う
  - UNIT_ONLY: Unitテストのみ
  - INTEGRATION_BDD: Integration + BDDテスト
  - 等

#### 3.3 ファイル操作
以下のツールを使用してファイルを操作してください：
- **Read**: ファイルの読み込み
- **Write**: 新規ファイルの作成
- **Edit**: 既存ファイルの編集

### 4. 実装ログの記録

実装した内容を以下の形式で記録してください：

```markdown
# 実装ログ

## 実装サマリー
- 実装戦略: EXTEND
- 変更ファイル数: X個
- 新規作成ファイル数: Y個

## 変更ファイル一覧

### 新規作成
- `path/to/new_file1.py`: （説明）
- `path/to/new_file2.py`: （説明）

### 修正
- `path/to/existing_file.py`: （変更内容）

## 実装詳細

### ファイル1: path/to/file.py
- **変更内容**: （何を実装したか）
- **理由**: （なぜこの実装にしたか）
- **注意点**: （レビュー時の注意点）

（以下、各ファイルについて記載）

## テストコード

### 実装したテスト
- `tests/test_xxx.py`: （テスト内容）

## 次のステップ
- Phase 5でテストを実行
```

このログを `.ai-workflow/issue-324/04_implementation/output/implementation.md` として保存してください。

## 品質ゲート（Phase 4）

実装は以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の設計に沿った実装である**
- [ ] **既存コードの規約に準拠している**
- [ ] **基本的なエラーハンドリングがある**
- [ ] **テストコードが実装されている**
- [ ] **明らかなバグがない**

これらの品質ゲートは**必須要件**です。実装後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **設計準拠**: 設計書から逸脱しない
   - 設計書に記載されたファイルのみ変更
   - 設計書の方針に従った実装

2. **既存コードの尊重**: 既存のスタイルを維持
   - インデント、命名規則を合わせる
   - 既存パターンを踏襲

3. **段階的実装**: 一度にすべて実装せず、段階的に
   - コア機能から実装
   - テストしながら進める

4. **安全性**: 危険な操作を避ける
   - データ削除は慎重に
   - バックアップが必要な場合は明記

5. **レビューされることを意識**: 実装はクリティカルシンキングレビューが実施されます
   - 品質ゲート（5つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 実装の意図をコメントで明確に

## 実装開始

上記を踏まえ、コード実装とテストコード実装を行い、実装ログを作成してください。
