# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-324/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue情報

- **Issue番号**: #324
- **タイトル**: [FEATURE] 実装フェーズとテストコード実装フェーズの分離
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/324
- **ラベル**: なし

### 本文

## 概要

現在のAIワークフローでは、Phase 4（implementation）で実コードとテストコードを同時に実装していますが、これらを別々のフェーズとして管理したい。

実装とテストを分離することで、以下のメリットが得られる：
- **段階的な開発**: 実コードの実装 → テストコードの実装という明確な流れ
- **レビューの焦点化**: 各フェーズで異なる観点でレビュー可能
- **並行作業の可能性**: 実装とテスト実装を別々に進められる（将来的に）
- **クリティカルシンキングレビューの精度向上**: 各フェーズで異なるレビュー基準を適用

## 現在のフェーズ構成

1. Phase 1: requirements（要件定義）
2. Phase 2: design（設計）
3. Phase 3: test_scenario（テストシナリオ）
4. **Phase 4: implementation（実装）** ← ここで実コードとテストコードを両方実装
5. Phase 5: testing（テスト実行）
6. Phase 6: documentation（ドキュメント）
7. Phase 7: report（レポート）

## 提案する新しいフェーズ構成

1. Phase 1: requirements（要件定義）
2. Phase 2: design（設計）
3. Phase 3: test_scenario（テストシナリオ）
4. **Phase 4: implementation（実装）** ← 実コードのみ実装
5. **Phase 5: test_implementation（テストコード実装）** ← 新規追加
6. Phase 6: testing（テスト実行）← Phase 5から繰り下げ
7. Phase 7: documentation（ドキュメント）← Phase 6から繰り下げ
8. Phase 8: report（レポート）← Phase 7から繰り下げ

## 要件

### 機能要件

**FR-001: Phase 5の新設（test_implementation）**
- テストコード実装に特化したフェーズを追加
- Phase 3（test_scenario）で作成されたテストシナリオを基に実装
- Phase 4（implementation）で実装された実コードに対するテストを作成

**FR-002: 既存フェーズの番号変更**
- Phase 5（testing）→ Phase 6（testing）
- Phase 6（documentation）→ Phase 7（documentation）
- Phase 7（report）→ Phase 8（report）

**FR-003: Phase 4（implementation）の責務明確化**
- 実コードのみを実装対象とする
- テストコードは Phase 5（test_implementation）に委譲
- プロンプトを更新して責務を明確化

**FR-004: Phase 5（test_implementation）のプロンプト作成**
- prompts/test_implementation/execute.txt: テストコード実装プロンプト
- prompts/test_implementation/review.txt: テストコードレビュープロンプト
- prompts/test_implementation/revise.txt: テストコード修正プロンプト（オプション）

**FR-005: metadata.jsonの拡張**
- phases配列にtest_implementationを追加
- 既存のメタデータ構造との互換性を維持

**FR-006: 依存関係の明確化**
- Phase 5（test_implementation）は Phase 4（implementation）の完了が前提
- Phase 6（testing）は Phase 5（test_implementation）の完了が前提

### 非機能要件

**NFR-001: 後方互換性**
- 既存のワークフロー（Phase 1-7）は引き続き動作
- 新しいフェーズ構成はオプトイン方式（設定で選択可能）

**NFR-002: パフォーマンス**
- フェーズ追加によるオーバーヘッドは最小限
- 各フェーズの実行時間は従来のPhase 4の半分程度を目標

**NFR-003: ログとトレーサビリティ**
- 各フェーズの実行ログを明確に分離
- Phase間の依存関係をログで追跡可能

## 受け入れ基準

- [ ] Phase 5（test_implementation）が新設されている
- [ ] Phase 5でテストコードのみが実装される
- [ ] Phase 4では実コードのみが実装される
- [ ] 既存のワークフロー（Phase 1-7）は引き続き動作する
- [ ] Jenkinsでの自動実行が可能
- [ ] クリティカルシンキングレビューが正しく機能する
- [ ] metadata.jsonにtest_implementationフェーズが記録される
- [ ] 全フェーズのGit auto-commit & pushが正しく動作する

## 優先度

High

## ラベル

enhancement, ai-workflow, refactoring

## 関連Issue

- 関連: #305（全フェーズ完成 v1.3.0）
- 依存: #315（テストシナリオフェーズのリトライ問題）

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-324/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
