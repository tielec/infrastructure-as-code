# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-331/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-331/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #331
- **タイトル**: [BUG] Phase execute()失敗時にリトライ機能が動作しない
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/331
- **ラベル**: bug

### 本文

## 問題の概要

メソッドにおいて、が失敗した場合に即座にして終了してしまい、リトライループ(revise()による修正)が実行されないバグがあります。

## 問題の場所

**ファイル**: `scripts/ai-workflow/phases/base_phase.py`  
**行数**: 616-624

### 現在のコード

```python
# フェーズ実行
execute_result = self.execute()

if not execute_result.get('success', False):
    # 実行失敗
    final_status = 'failed'
    self.update_phase_status(status='failed')
    self.post_progress(
        status='failed',
        details=f"実行エラー: {execute_result.get('error', 'Unknown error')}"
    )
    return False  # ← ★ここで即座に終了！リトライしない！
```

## 期待される動作 vs 実際の動作

### 期待される動作
1. `execute()`が失敗
2. リトライループに入る
3. `revise()`でフィードバックに基づいて修正
4. 最大3回までリトライ
5. リトライが全て失敗したら`return False`

### 実際の動作
1. `execute()`が失敗
2. **即座に`return False`で終了** ← 問題！
3. リトライループには到達しない

## 再現手順

1. Phase 5 (testing) で`test-result.md`が生成されない状況を作る
2. `execute()`が`success: False`を返す
3. 本来は`revise()`でリトライすべきだが、即座に失敗終了する

## 解決策

`execute()`と`revise()`を同じリトライループ内に統合する必要があります。

### 修正案

```python
# ━━━ リトライループ ━━━
for attempt in range(1, self.MAX_RETRIES + 1):
    print(f"\n{'='*80}")
    print(f"[ATTEMPT {attempt}/{self.MAX_RETRIES}] Phase: {self.phase_name}")
    print(f"{'='*80}\n")
    
    # 初回はexecute()、2回目以降はrevise()
    if attempt == 1:
        result = self.execute()
    else:
        # レビュー結果に基づいてrevise()
        review_result = self.review()
        if review_result['result'] == 'PASS':
            # レビューが成功した場合は終了
            final_status = 'completed'
            break
        
        # revise()を実行
        feedback = review_result.get('feedback', '')
        result = self.revise(review_feedback=feedback)
    
    # 結果チェック
    if result.get('success', False):
        final_status = 'completed'
        break
    else:
        print(f"[WARNING] Attempt {attempt} failed: {result.get('error', 'Unknown')}" )
        if attempt == self.MAX_RETRIES:
            final_status = 'failed'
            self.update_phase_status(status='failed')
            self.post_progress(
                status='failed',
                details=f"最大リトライ回数({self.MAX_RETRIES})に到達しました"
            )
            return False
```

## 影響範囲

全てのPhaseクラス(`requirements`, `design`, `test_scenario`, `implementation`, `testing`, `documentation`, `report`)

## 優先度

**High** - リトライ機能が完全に動作しないため、一時的なエラーでもワークフロー全体が停止する

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **実装戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **テスト戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **既存コードへの影響範囲が分析されている**: PASS/FAIL - （コメント）
- [x/  ] **変更が必要なファイルがリストアップされている**: PASS/FAIL - （コメント）
- [x/  ] **設計が実装可能である**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、設計書のクリティカルシンキングレビューを実施してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
