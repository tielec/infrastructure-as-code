# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### 要件定義書
@.ai-workflow/issue-331/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-331/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**UNIT_INTEGRATION**

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #331
- **タイトル**: [BUG] Phase execute()失敗時にリトライ機能が動作しない
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/331
- **ラベル**: bug

### 本文

## 問題の概要

メソッドにおいて、が失敗した場合に即座にして終了してしまい、リトライループ(revise()による修正)が実行されないバグがあります。

## 問題の場所

**ファイル**: `scripts/ai-workflow/phases/base_phase.py`  
**行数**: 616-624

### 現在のコード

```python
# フェーズ実行
execute_result = self.execute()

if not execute_result.get('success', False):
    # 実行失敗
    final_status = 'failed'
    self.update_phase_status(status='failed')
    self.post_progress(
        status='failed',
        details=f"実行エラー: {execute_result.get('error', 'Unknown error')}"
    )
    return False  # ← ★ここで即座に終了！リトライしない！
```

## 期待される動作 vs 実際の動作

### 期待される動作
1. `execute()`が失敗
2. リトライループに入る
3. `revise()`でフィードバックに基づいて修正
4. 最大3回までリトライ
5. リトライが全て失敗したら`return False`

### 実際の動作
1. `execute()`が失敗
2. **即座に`return False`で終了** ← 問題！
3. リトライループには到達しない

## 再現手順

1. Phase 5 (testing) で`test-result.md`が生成されない状況を作る
2. `execute()`が`success: False`を返す
3. 本来は`revise()`でリトライすべきだが、即座に失敗終了する

## 解決策

`execute()`と`revise()`を同じリトライループ内に統合する必要があります。

### 修正案

```python
# ━━━ リトライループ ━━━
for attempt in range(1, self.MAX_RETRIES + 1):
    print(f"\n{'='*80}")
    print(f"[ATTEMPT {attempt}/{self.MAX_RETRIES}] Phase: {self.phase_name}")
    print(f"{'='*80}\n")
    
    # 初回はexecute()、2回目以降はrevise()
    if attempt == 1:
        result = self.execute()
    else:
        # レビュー結果に基づいてrevise()
        review_result = self.review()
        if review_result['result'] == 'PASS':
            # レビューが成功した場合は終了
            final_status = 'completed'
            break
        
        # revise()を実行
        feedback = review_result.get('feedback', '')
        result = self.revise(review_feedback=feedback)
    
    # 結果チェック
    if result.get('success', False):
        final_status = 'completed'
        break
    else:
        print(f"[WARNING] Attempt {attempt} failed: {result.get('error', 'Unknown')}" )
        if attempt == self.MAX_RETRIES:
            final_status = 'failed'
            self.update_phase_status(status='failed')
            self.post_progress(
                status='failed',
                details=f"最大リトライ回数({self.MAX_RETRIES})に到達しました"
            )
            return False
```

## 影響範囲

全てのPhaseクラス(`requirements`, `design`, `test_scenario`, `implementation`, `testing`, `documentation`, `report`)

## 優先度

**High** - リトライ機能が完全に動作しないため、一時的なエラーでもワークフロー全体が停止する

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-331/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
