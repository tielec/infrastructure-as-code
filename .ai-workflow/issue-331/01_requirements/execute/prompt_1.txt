# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## Issue情報

## Issue情報

- **Issue番号**: #331
- **タイトル**: [BUG] Phase execute()失敗時にリトライ機能が動作しない
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/331
- **ラベル**: bug

### 本文

## 問題の概要

メソッドにおいて、が失敗した場合に即座にして終了してしまい、リトライループ(revise()による修正)が実行されないバグがあります。

## 問題の場所

**ファイル**: `scripts/ai-workflow/phases/base_phase.py`  
**行数**: 616-624

### 現在のコード

```python
# フェーズ実行
execute_result = self.execute()

if not execute_result.get('success', False):
    # 実行失敗
    final_status = 'failed'
    self.update_phase_status(status='failed')
    self.post_progress(
        status='failed',
        details=f"実行エラー: {execute_result.get('error', 'Unknown error')}"
    )
    return False  # ← ★ここで即座に終了！リトライしない！
```

## 期待される動作 vs 実際の動作

### 期待される動作
1. `execute()`が失敗
2. リトライループに入る
3. `revise()`でフィードバックに基づいて修正
4. 最大3回までリトライ
5. リトライが全て失敗したら`return False`

### 実際の動作
1. `execute()`が失敗
2. **即座に`return False`で終了** ← 問題！
3. リトライループには到達しない

## 再現手順

1. Phase 5 (testing) で`test-result.md`が生成されない状況を作る
2. `execute()`が`success: False`を返す
3. 本来は`revise()`でリトライすべきだが、即座に失敗終了する

## 解決策

`execute()`と`revise()`を同じリトライループ内に統合する必要があります。

### 修正案

```python
# ━━━ リトライループ ━━━
for attempt in range(1, self.MAX_RETRIES + 1):
    print(f"\n{'='*80}")
    print(f"[ATTEMPT {attempt}/{self.MAX_RETRIES}] Phase: {self.phase_name}")
    print(f"{'='*80}\n")
    
    # 初回はexecute()、2回目以降はrevise()
    if attempt == 1:
        result = self.execute()
    else:
        # レビュー結果に基づいてrevise()
        review_result = self.review()
        if review_result['result'] == 'PASS':
            # レビューが成功した場合は終了
            final_status = 'completed'
            break
        
        # revise()を実行
        feedback = review_result.get('feedback', '')
        result = self.revise(review_feedback=feedback)
    
    # 結果チェック
    if result.get('success', False):
        final_status = 'completed'
        break
    else:
        print(f"[WARNING] Attempt {attempt} failed: {result.get('error', 'Unknown')}" )
        if attempt == self.MAX_RETRIES:
            final_status = 'failed'
            self.update_phase_status(status='failed')
            self.post_progress(
                status='failed',
                details=f"最大リトライ回数({self.MAX_RETRIES})に到達しました"
            )
            return False
```

## 影響範囲

全てのPhaseクラス(`requirements`, `design`, `test_scenario`, `implementation`, `testing`, `documentation`, `report`)

## 優先度

**High** - リトライ機能が完全に動作しないため、一時的なエラーでもワークフロー全体が停止する

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-331/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
