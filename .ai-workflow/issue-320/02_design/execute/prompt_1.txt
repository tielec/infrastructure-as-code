# 詳細設計フェーズ - 実行プロンプト

## タスク概要
要件定義書とGitHub Issueの内容から、詳細な設計書を作成してください。このフェーズでは、**実装戦略・テスト戦略・テストコード戦略の判断**も行います。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-320/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-320/01_requirements/output/requirements.md

### GitHub Issue情報
## Issue情報

- **Issue番号**: #320
- **タイトル**: [FEATURE] AIワークフロー: 全フェーズ一括実行機能（--phase all）
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/320
- **ラベル**: なし

### 本文

## 概要

現在のAIワークフローでは、各フェーズを個別に実行する必要があります。
開発効率を向上させるため、全フェーズ（Phase 1-7）を順次自動実行する機能を追加したいです。

## 背景

### 現在の実行方法
各フェーズを手動で順番に実行する必要がある:

```bash
python main.py execute --phase requirements --issue 305
python main.py execute --phase design --issue 305
python main.py execute --phase test_scenario --issue 305
python main.py execute --phase implementation --issue 305
python main.py execute --phase testing --issue 305
python main.py execute --phase documentation --issue 305
python main.py execute --phase report --issue 305
```

### 問題点
- **手動実行の手間**: 7回のコマンド実行が必要
- **実行忘れのリスク**: フェーズのスキップや順番ミス
- **自動化困難**: CI/CD統合時に複雑なスクリプトが必要

## 提案機能

### 1. `--phase all` オプションの追加

全フェーズを順次実行:

```bash
# 全フェーズ（Phase 1-7）を順次実行
python main.py execute --phase all --issue 305
```

### 2. 実行フロー

```
Phase 1 (requirements) → レビュー → Phase 2 (design) → レビュー → ... → Phase 7 (report)
```

各フェーズで以下を自動実行:
1. フェーズ実行（execute）
2. レビュー（review）
3. レビュー結果がFAILの場合は修正（revise）
4. Git commit & push（BasePhaseで自動）
5. 次フェーズへ

### 3. エラーハンドリング

```python
def execute_all_phases(issue_number: int) -> Dict[str, Any]:
    """
    全フェーズを順次実行
    
    Args:
        issue_number: Issue番号
    
    Returns:
        Dict[str, Any]: 実行結果サマリー
    """
    phases = [
        'requirements',
        'design', 
        'test_scenario',
        'implementation',
        'testing',
        'documentation',
        'report'
    ]
    
    results = {}
    for phase in phases:
        print(f"\n{'='*60}")
        print(f"Starting Phase: {phase}")
        print(f"{'='*60}\n")
        
        try:
            # フェーズ実行
            result = execute_phase(phase, issue_number)
            results[phase] = result
            
            if not result['success']:
                # フェーズ失敗時は停止
                print(f"[ERROR] Phase '{phase}' failed. Stopping workflow.")
                return {
                    'success': False,
                    'completed_phases': list(results.keys()),
                    'failed_phase': phase,
                    'error': result.get('error')
                }
                
        except Exception as e:
            print(f"[ERROR] Exception in phase '{phase}': {e}")
            results[phase] = {'success': False, 'error': str(e)}
            return {
                'success': False,
                'completed_phases': list(results.keys()),
                'failed_phase': phase,
                'error': str(e)
            }
    
    return {
        'success': True,
        'completed_phases': phases,
        'results': results
    }
```

### 4. 進捗表示

実行中の進捗を表示:

```
=============================================================
AI Workflow Full Execution - Issue #305
=============================================================

Progress: [1/7] Phase: requirements
Status: ✓ Completed (Review: PASS)

Progress: [2/7] Phase: design  
Status: ✓ Completed (Review: PASS_WITH_SUGGESTIONS)

Progress: [3/7] Phase: test_scenario
Status: ⏳ In Progress...

...
```

### 5. 実行サマリー

全フェーズ完了後にサマリーを表示:

```
=============================================================
Execution Summary - Issue #305
=============================================================

Total Phases: 7
✓ Completed: 7
✗ Failed: 0

Phase Results:
  1. requirements     ✓ PASS
  2. design           ✓ PASS_WITH_SUGGESTIONS
  3. test_scenario    ✓ PASS
  4. implementation   ✓ PASS
  5. testing          ✓ PASS
  6. documentation    ✓ PASS
  7. report           ✓ PASS

Total Execution Time: 45m 32s
Total Cost: $2.45 USD

All phases completed successfully! 🎉
=============================================================
```

## 実装方針

### Phase 1: 基本実装
- [ ] `execute_all_phases()` 関数の実装
- [ ] `main.py` の `execute` コマンドに `--phase all` オプション追加
- [ ] フェーズ順次実行ロジックの実装

### Phase 2: エラーハンドリング強化
- [ ] フェーズ失敗時の停止処理
- [ ] 例外ハンドリング
- [ ] ロールバック機能（オプション）

### Phase 3: 進捗表示・ログ出力
- [ ] リアルタイム進捗表示
- [ ] 各フェーズの開始・完了ログ
- [ ] 実行サマリーの生成

### Phase 4: オプション機能
- [ ] `--continue-on-error`: エラー時も継続実行
- [ ] `--start-from <phase>`: 特定フェーズから再開
- [ ] `--dry-run`: 実行計画のプレビュー

## CLIコマンド例

### 基本実行
```bash
# 全フェーズを順次実行
python main.py execute --phase all --issue 305
```

### Docker環境での実行
```bash
docker run --rm   -e CLAUDE_CODE_OAUTH_TOKEN="${CLAUDE_CODE_OAUTH_TOKEN}"   -e GITHUB_TOKEN="${GITHUB_TOKEN}"   -e GITHUB_REPOSITORY="${GITHUB_REPOSITORY}"   -v "$(pwd):/workspace"   -w /workspace/scripts/ai-workflow   ai-workflow:latest   python main.py execute --phase all --issue 305
```

### オプション付き実行（将来）
```bash
# エラーがあっても継続
python main.py execute --phase all --issue 305 --continue-on-error

# Phase 4から再開
python main.py execute --phase all --issue 305 --start-from implementation

# 実行計画のプレビュー
python main.py execute --phase all --issue 305 --dry-run
```

## 期待される効果

1. **実行効率の向上**: 1回のコマンドで全フェーズ完了
2. **人的ミスの削減**: フェーズのスキップや順番ミスを防止
3. **CI/CD統合の簡素化**: 単一コマンドで完結
4. **開発体験の向上**: 自動化による開発者の負担軽減

## Jenkins統合

`ai-workflow-orchestrator` ジョブでの活用:

```groovy
stage('Execute All Phases') {
    steps {
        script {
            docker.image('ai-workflow:latest').inside {
                sh '''
                    python main.py execute --phase all --issue ${ISSUE_NUMBER}
                '''
            }
        }
    }
}
```

## Issue #319 との関係

- **#319**: フェーズ依存関係の柔軟化（部分実行）
- **本Issue**: 全フェーズ一括実行（完全自動化）

両機能は相補的:
- 小規模タスク: #319の部分実行機能を使用
- 大規模タスク: 本Issueの全フェーズ実行機能を使用

## 検討事項

### パフォーマンス
- 全フェーズ実行の所要時間（推定30-60分）
- Claude API使用量とコスト管理

### エラーリカバリー
- フェーズ失敗時の再実行方法
- 途中からの再開機能の必要性

### ログ管理
- 長時間実行のログ出力方法
- 進捗状況の可視化

## 関連Issue

- #305 AI Workflow: Jenkins統合完成とPhase終了後の自動commit & push機能
- #319 AIワークフロー: フェーズ依存関係の柔軟化と選択的実行機能

## タスク

- [ ] Phase 1: 基本実装
- [ ] Phase 2: エラーハンドリング強化
- [ ] Phase 3: 進捗表示・ログ出力
- [ ] Phase 4: オプション機能
- [ ] E2Eテストの追加
- [ ] README.md更新（使用例追加）
- [ ] Jenkinsfile更新（all option統合）

### 既存コードベースの理解

このリポジトリのプロジェクト構造、アーキテクチャ、コーディング規約を理解するため、以下のドキュメントを参照してください：

- プロジェクト全体のガイドライン: @CLAUDE.md（存在する場合）
- アーキテクチャ設計: @ARCHITECTURE.md（存在する場合）
- プロジェクトREADME: @README.md
- その他、関連するREADME、CONTRIBUTION.md等のドキュメント

上記ドキュメントから以下を把握してください：
- プロジェクトの目的とアーキテクチャ
- ディレクトリ構造とコンポーネント構成
- 既存のコーディング規約やパターン
- 開発ワークフロー

## 設計書作成手順

### 1. 既存コードベース分析

要件定義書とIssue内容から、以下を分析してください：

1. **影響範囲の特定**
   - どのコンポーネント（Ansible/Pulumi/Jenkins/Scripts）が影響を受けるか
   - 既存ファイルの修正が必要か、新規ファイルの作成が必要か
   - 依存関係のあるコンポーネントは何か

2. **既存パターンの調査**
   - 類似の機能実装がないか調査
   - 既存のコーディング規約やパターンを確認
   - 再利用可能なコンポーネントの特定

### 2. 実装戦略の判断（必須）

以下の3つから選択し、**判断根拠を明記**してください：

- **CREATE（新規作成）**: 既存コードとの依存関係がなく、完全に新しい機能
- **EXTEND（拡張）**: 既存コードを拡張・修正する必要がある
- **REFACTOR（リファクタリング）**: 既存コードの構造改善が主目的

**判断基準**：
- 既存ファイルへの影響範囲
- 新規ファイルの作成数
- 既存機能との統合度

**出力形式**：
```markdown
### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- （理由1）
- （理由2）
```

### 3. テスト戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **UNIT_ONLY**: Unitテストのみ
- **INTEGRATION_ONLY**: Integrationテストのみ
- **BDD_ONLY**: BDDテストのみ
- **UNIT_INTEGRATION**: Unit + Integration
- **UNIT_BDD**: Unit + BDD
- **INTEGRATION_BDD**: Integration + BDD
- **ALL**: すべて

**判断基準**：
- 機能の複雑度
- ユーザーストーリーの有無
- 既存テストとの整合性

**出力形式**：
```markdown
### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- （理由1）
- （理由2）
```

### 4. テストコード戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **EXTEND_TEST（既存テストの拡張）**: 既存テストファイルに追加
- **CREATE_TEST（新規テスト作成）**: 新しいテストファイルを作成
- **BOTH_TEST（両方）**: 既存テストの拡張と新規テストの作成

**判断基準**：
- 既存テストファイルの有無
- 既存テストとの関連性

**出力形式**：
```markdown
### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- （理由1）
- （理由2）
```

### 5. 設計書の構成

以下のセクションを含む設計書を作成してください：

#### 必須セクション：

1. **アーキテクチャ設計**
   - システム全体図
   - コンポーネント間の関係
   - データフロー

2. **実装戦略判断**（セクション2で記載）

3. **テスト戦略判断**（セクション3で記載）

4. **テストコード戦略判断**（セクション4で記載）

5. **影響範囲分析**
   - 既存コードへの影響
   - 依存関係の変更
   - マイグレーション要否

6. **変更・追加ファイルリスト**
   - 新規作成ファイル（相対パス）
   - 修正が必要な既存ファイル（相対パス）
   - 削除が必要なファイル（相対パス）

7. **詳細設計**
   - クラス設計（必要な場合）
   - 関数設計（主要な関数のみ）
   - データ構造設計
   - インターフェース設計

8. **セキュリティ考慮事項**
   - 認証・認可
   - データ保護
   - セキュリティリスクと対策

9. **非機能要件への対応**
   - パフォーマンス
   - スケーラビリティ
   - 保守性

10. **実装の順序**
    - 実装順序の推奨
    - 依存関係の考慮

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **既存プロジェクト構造を尊重**: 既存のディレクトリ構造やコーディング規約に従ってください
2. **トレーサビリティ**: 要件定義書の各要件に対応する設計を明示してください
3. **実装可能性**: 実装できない設計や曖昧な設計は避けてください
4. **判断の明示**: 3つの戦略判断（実装・テスト・テストコード）は必ず明記してください
5. **レビューされることを意識**: 設計書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（5つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 判断根拠は具体的かつ論理的に記載すること

## 出力形式

設計書は `.ai-workflow/issue-320/02_design/output/design.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。図表が必要な場合はMarkdownのコードブロックやテーブルを活用してください。

## 実装開始

上記を踏まえ、詳細設計書を作成してください。
