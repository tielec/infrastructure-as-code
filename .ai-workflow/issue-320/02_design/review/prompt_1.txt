# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-320/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-320/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #320
- **タイトル**: [FEATURE] AIワークフロー: 全フェーズ一括実行機能（--phase all）
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/320
- **ラベル**: なし

### 本文

## 概要

現在のAIワークフローでは、各フェーズを個別に実行する必要があります。
開発効率を向上させるため、全フェーズ（Phase 1-7）を順次自動実行する機能を追加したいです。

## 背景

### 現在の実行方法
各フェーズを手動で順番に実行する必要がある:

```bash
python main.py execute --phase requirements --issue 305
python main.py execute --phase design --issue 305
python main.py execute --phase test_scenario --issue 305
python main.py execute --phase implementation --issue 305
python main.py execute --phase testing --issue 305
python main.py execute --phase documentation --issue 305
python main.py execute --phase report --issue 305
```

### 問題点
- **手動実行の手間**: 7回のコマンド実行が必要
- **実行忘れのリスク**: フェーズのスキップや順番ミス
- **自動化困難**: CI/CD統合時に複雑なスクリプトが必要

## 提案機能

### 1. `--phase all` オプションの追加

全フェーズを順次実行:

```bash
# 全フェーズ（Phase 1-7）を順次実行
python main.py execute --phase all --issue 305
```

### 2. 実行フロー

```
Phase 1 (requirements) → レビュー → Phase 2 (design) → レビュー → ... → Phase 7 (report)
```

各フェーズで以下を自動実行:
1. フェーズ実行（execute）
2. レビュー（review）
3. レビュー結果がFAILの場合は修正（revise）
4. Git commit & push（BasePhaseで自動）
5. 次フェーズへ

### 3. エラーハンドリング

```python
def execute_all_phases(issue_number: int) -> Dict[str, Any]:
    """
    全フェーズを順次実行
    
    Args:
        issue_number: Issue番号
    
    Returns:
        Dict[str, Any]: 実行結果サマリー
    """
    phases = [
        'requirements',
        'design', 
        'test_scenario',
        'implementation',
        'testing',
        'documentation',
        'report'
    ]
    
    results = {}
    for phase in phases:
        print(f"\n{'='*60}")
        print(f"Starting Phase: {phase}")
        print(f"{'='*60}\n")
        
        try:
            # フェーズ実行
            result = execute_phase(phase, issue_number)
            results[phase] = result
            
            if not result['success']:
                # フェーズ失敗時は停止
                print(f"[ERROR] Phase '{phase}' failed. Stopping workflow.")
                return {
                    'success': False,
                    'completed_phases': list(results.keys()),
                    'failed_phase': phase,
                    'error': result.get('error')
                }
                
        except Exception as e:
            print(f"[ERROR] Exception in phase '{phase}': {e}")
            results[phase] = {'success': False, 'error': str(e)}
            return {
                'success': False,
                'completed_phases': list(results.keys()),
                'failed_phase': phase,
                'error': str(e)
            }
    
    return {
        'success': True,
        'completed_phases': phases,
        'results': results
    }
```

### 4. 進捗表示

実行中の進捗を表示:

```
=============================================================
AI Workflow Full Execution - Issue #305
=============================================================

Progress: [1/7] Phase: requirements
Status: ✓ Completed (Review: PASS)

Progress: [2/7] Phase: design  
Status: ✓ Completed (Review: PASS_WITH_SUGGESTIONS)

Progress: [3/7] Phase: test_scenario
Status: ⏳ In Progress...

...
```

### 5. 実行サマリー

全フェーズ完了後にサマリーを表示:

```
=============================================================
Execution Summary - Issue #305
=============================================================

Total Phases: 7
✓ Completed: 7
✗ Failed: 0

Phase Results:
  1. requirements     ✓ PASS
  2. design           ✓ PASS_WITH_SUGGESTIONS
  3. test_scenario    ✓ PASS
  4. implementation   ✓ PASS
  5. testing          ✓ PASS
  6. documentation    ✓ PASS
  7. report           ✓ PASS

Total Execution Time: 45m 32s
Total Cost: $2.45 USD

All phases completed successfully! 🎉
=============================================================
```

## 実装方針

### Phase 1: 基本実装
- [ ] `execute_all_phases()` 関数の実装
- [ ] `main.py` の `execute` コマンドに `--phase all` オプション追加
- [ ] フェーズ順次実行ロジックの実装

### Phase 2: エラーハンドリング強化
- [ ] フェーズ失敗時の停止処理
- [ ] 例外ハンドリング
- [ ] ロールバック機能（オプション）

### Phase 3: 進捗表示・ログ出力
- [ ] リアルタイム進捗表示
- [ ] 各フェーズの開始・完了ログ
- [ ] 実行サマリーの生成

### Phase 4: オプション機能
- [ ] `--continue-on-error`: エラー時も継続実行
- [ ] `--start-from <phase>`: 特定フェーズから再開
- [ ] `--dry-run`: 実行計画のプレビュー

## CLIコマンド例

### 基本実行
```bash
# 全フェーズを順次実行
python main.py execute --phase all --issue 305
```

### Docker環境での実行
```bash
docker run --rm   -e CLAUDE_CODE_OAUTH_TOKEN="${CLAUDE_CODE_OAUTH_TOKEN}"   -e GITHUB_TOKEN="${GITHUB_TOKEN}"   -e GITHUB_REPOSITORY="${GITHUB_REPOSITORY}"   -v "$(pwd):/workspace"   -w /workspace/scripts/ai-workflow   ai-workflow:latest   python main.py execute --phase all --issue 305
```

### オプション付き実行（将来）
```bash
# エラーがあっても継続
python main.py execute --phase all --issue 305 --continue-on-error

# Phase 4から再開
python main.py execute --phase all --issue 305 --start-from implementation

# 実行計画のプレビュー
python main.py execute --phase all --issue 305 --dry-run
```

## 期待される効果

1. **実行効率の向上**: 1回のコマンドで全フェーズ完了
2. **人的ミスの削減**: フェーズのスキップや順番ミスを防止
3. **CI/CD統合の簡素化**: 単一コマンドで完結
4. **開発体験の向上**: 自動化による開発者の負担軽減

## Jenkins統合

`ai-workflow-orchestrator` ジョブでの活用:

```groovy
stage('Execute All Phases') {
    steps {
        script {
            docker.image('ai-workflow:latest').inside {
                sh '''
                    python main.py execute --phase all --issue ${ISSUE_NUMBER}
                '''
            }
        }
    }
}
```

## Issue #319 との関係

- **#319**: フェーズ依存関係の柔軟化（部分実行）
- **本Issue**: 全フェーズ一括実行（完全自動化）

両機能は相補的:
- 小規模タスク: #319の部分実行機能を使用
- 大規模タスク: 本Issueの全フェーズ実行機能を使用

## 検討事項

### パフォーマンス
- 全フェーズ実行の所要時間（推定30-60分）
- Claude API使用量とコスト管理

### エラーリカバリー
- フェーズ失敗時の再実行方法
- 途中からの再開機能の必要性

### ログ管理
- 長時間実行のログ出力方法
- 進捗状況の可視化

## 関連Issue

- #305 AI Workflow: Jenkins統合完成とPhase終了後の自動commit & push機能
- #319 AIワークフロー: フェーズ依存関係の柔軟化と選択的実行機能

## タスク

- [ ] Phase 1: 基本実装
- [ ] Phase 2: エラーハンドリング強化
- [ ] Phase 3: 進捗表示・ログ出力
- [ ] Phase 4: オプション機能
- [ ] E2Eテストの追加
- [ ] README.md更新（使用例追加）
- [ ] Jenkinsfile更新（all option統合）

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **実装戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **テスト戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **既存コードへの影響範囲が分析されている**: PASS/FAIL - （コメント）
- [x/  ] **変更が必要なファイルがリストアップされている**: PASS/FAIL - （コメント）
- [x/  ] **設計が実装可能である**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、設計書のクリティカルシンキングレビューを実施してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
