# プロジェクト計画フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細なプロジェクト計画書を作成してください。
Phase 0はプロジェクトマネージャの役割を担い、開発作業を計画的かつ効率的に進められるようにします。

## Issue情報

## Issue情報

- **Issue番号**: #320
- **タイトル**: [FEATURE] AIワークフロー: 全フェーズ一括実行機能（--phase all）
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/320
- **ラベル**: なし

### 本文

## 概要

現在のAIワークフローでは、各フェーズを個別に実行する必要があります。
開発効率を向上させるため、全フェーズ（Phase 1-7）を順次自動実行する機能を追加したいです。

## 背景

### 現在の実行方法
各フェーズを手動で順番に実行する必要がある:

```bash
python main.py execute --phase requirements --issue 305
python main.py execute --phase design --issue 305
python main.py execute --phase test_scenario --issue 305
python main.py execute --phase implementation --issue 305
python main.py execute --phase testing --issue 305
python main.py execute --phase documentation --issue 305
python main.py execute --phase report --issue 305
```

### 問題点
- **手動実行の手間**: 7回のコマンド実行が必要
- **実行忘れのリスク**: フェーズのスキップや順番ミス
- **自動化困難**: CI/CD統合時に複雑なスクリプトが必要

## 提案機能

### 1. `--phase all` オプションの追加

全フェーズを順次実行:

```bash
# 全フェーズ（Phase 1-7）を順次実行
python main.py execute --phase all --issue 305
```

### 2. 実行フロー

```
Phase 1 (requirements) → レビュー → Phase 2 (design) → レビュー → ... → Phase 7 (report)
```

各フェーズで以下を自動実行:
1. フェーズ実行（execute）
2. レビュー（review）
3. レビュー結果がFAILの場合は修正（revise）
4. Git commit & push（BasePhaseで自動）
5. 次フェーズへ

### 3. エラーハンドリング

```python
def execute_all_phases(issue_number: int) -> Dict[str, Any]:
    """
    全フェーズを順次実行
    
    Args:
        issue_number: Issue番号
    
    Returns:
        Dict[str, Any]: 実行結果サマリー
    """
    phases = [
        'requirements',
        'design', 
        'test_scenario',
        'implementation',
        'testing',
        'documentation',
        'report'
    ]
    
    results = {}
    for phase in phases:
        print(f"\n{'='*60}")
        print(f"Starting Phase: {phase}")
        print(f"{'='*60}\n")
        
        try:
            # フェーズ実行
            result = execute_phase(phase, issue_number)
            results[phase] = result
            
            if not result['success']:
                # フェーズ失敗時は停止
                print(f"[ERROR] Phase '{phase}' failed. Stopping workflow.")
                return {
                    'success': False,
                    'completed_phases': list(results.keys()),
                    'failed_phase': phase,
                    'error': result.get('error')
                }
                
        except Exception as e:
            print(f"[ERROR] Exception in phase '{phase}': {e}")
            results[phase] = {'success': False, 'error': str(e)}
            return {
                'success': False,
                'completed_phases': list(results.keys()),
                'failed_phase': phase,
                'error': str(e)
            }
    
    return {
        'success': True,
        'completed_phases': phases,
        'results': results
    }
```

### 4. 進捗表示

実行中の進捗を表示:

```
=============================================================
AI Workflow Full Execution - Issue #305
=============================================================

Progress: [1/7] Phase: requirements
Status: ✓ Completed (Review: PASS)

Progress: [2/7] Phase: design  
Status: ✓ Completed (Review: PASS_WITH_SUGGESTIONS)

Progress: [3/7] Phase: test_scenario
Status: ⏳ In Progress...

...
```

### 5. 実行サマリー

全フェーズ完了後にサマリーを表示:

```
=============================================================
Execution Summary - Issue #305
=============================================================

Total Phases: 7
✓ Completed: 7
✗ Failed: 0

Phase Results:
  1. requirements     ✓ PASS
  2. design           ✓ PASS_WITH_SUGGESTIONS
  3. test_scenario    ✓ PASS
  4. implementation   ✓ PASS
  5. testing          ✓ PASS
  6. documentation    ✓ PASS
  7. report           ✓ PASS

Total Execution Time: 45m 32s
Total Cost: $2.45 USD

All phases completed successfully! 🎉
=============================================================
```

## 実装方針

### Phase 1: 基本実装
- [ ] `execute_all_phases()` 関数の実装
- [ ] `main.py` の `execute` コマンドに `--phase all` オプション追加
- [ ] フェーズ順次実行ロジックの実装

### Phase 2: エラーハンドリング強化
- [ ] フェーズ失敗時の停止処理
- [ ] 例外ハンドリング
- [ ] ロールバック機能（オプション）

### Phase 3: 進捗表示・ログ出力
- [ ] リアルタイム進捗表示
- [ ] 各フェーズの開始・完了ログ
- [ ] 実行サマリーの生成

### Phase 4: オプション機能
- [ ] `--continue-on-error`: エラー時も継続実行
- [ ] `--start-from <phase>`: 特定フェーズから再開
- [ ] `--dry-run`: 実行計画のプレビュー

## CLIコマンド例

### 基本実行
```bash
# 全フェーズを順次実行
python main.py execute --phase all --issue 305
```

### Docker環境での実行
```bash
docker run --rm   -e CLAUDE_CODE_OAUTH_TOKEN="${CLAUDE_CODE_OAUTH_TOKEN}"   -e GITHUB_TOKEN="${GITHUB_TOKEN}"   -e GITHUB_REPOSITORY="${GITHUB_REPOSITORY}"   -v "$(pwd):/workspace"   -w /workspace/scripts/ai-workflow   ai-workflow:latest   python main.py execute --phase all --issue 305
```

### オプション付き実行（将来）
```bash
# エラーがあっても継続
python main.py execute --phase all --issue 305 --continue-on-error

# Phase 4から再開
python main.py execute --phase all --issue 305 --start-from implementation

# 実行計画のプレビュー
python main.py execute --phase all --issue 305 --dry-run
```

## 期待される効果

1. **実行効率の向上**: 1回のコマンドで全フェーズ完了
2. **人的ミスの削減**: フェーズのスキップや順番ミスを防止
3. **CI/CD統合の簡素化**: 単一コマンドで完結
4. **開発体験の向上**: 自動化による開発者の負担軽減

## Jenkins統合

`ai-workflow-orchestrator` ジョブでの活用:

```groovy
stage('Execute All Phases') {
    steps {
        script {
            docker.image('ai-workflow:latest').inside {
                sh '''
                    python main.py execute --phase all --issue ${ISSUE_NUMBER}
                '''
            }
        }
    }
}
```

## Issue #319 との関係

- **#319**: フェーズ依存関係の柔軟化（部分実行）
- **本Issue**: 全フェーズ一括実行（完全自動化）

両機能は相補的:
- 小規模タスク: #319の部分実行機能を使用
- 大規模タスク: 本Issueの全フェーズ実行機能を使用

## 検討事項

### パフォーマンス
- 全フェーズ実行の所要時間（推定30-60分）
- Claude API使用量とコスト管理

### エラーリカバリー
- フェーズ失敗時の再実行方法
- 途中からの再開機能の必要性

### ログ管理
- 長時間実行のログ出力方法
- 進捗状況の可視化

## 関連Issue

- #305 AI Workflow: Jenkins統合完成とPhase終了後の自動commit & push機能
- #319 AIワークフロー: フェーズ依存関係の柔軟化と選択的実行機能

## タスク

- [ ] Phase 1: 基本実装
- [ ] Phase 2: エラーハンドリング強化
- [ ] Phase 3: 進捗表示・ログ出力
- [ ] Phase 4: オプション機能
- [ ] E2Eテストの追加
- [ ] README.md更新（使用例追加）
- [ ] Jenkinsfile更新（all option統合）

## プロジェクト計画書の構成

以下のセクションを含むプロジェクト計画書を作成してください：

### 1. Issue分析
- **複雑度**: 簡単/中程度/複雑を判定
  - 簡単: 単一ファイルの修正、シンプルな機能追加（見積もり: ~4時間）
  - 中程度: 複数ファイルの修正、既存機能の拡張（見積もり: 4~16時間）
  - 複雑: アーキテクチャ変更、新規サブシステム追加（見積もり: 16時間~）
- **見積もり工数**: X時間（根拠を記載）
- **リスク評価**: 低/中/高

### 2. 実装戦略判断

**重要**: このセクションは最も重要です。Phase 2（Design）で使用されるため、必ず明記してください。

#### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- CREATE: 新規ファイル・クラス・モジュールの作成が中心
- EXTEND: 既存コードの拡張（機能追加）が中心
- REFACTOR: 既存コードのリファクタリング（構造改善）が中心

（判断理由を具体的に記載）

#### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- UNIT_ONLY: ユニットテストのみ（単純なロジック、外部依存なし）
- INTEGRATION_ONLY: インテグレーションテストのみ（外部システム連携中心）
- BDD_ONLY: BDDテストのみ（ユーザーストーリー中心）
- UNIT_INTEGRATION: ユニット + インテグレーション（一般的な機能開発）
- UNIT_BDD: ユニット + BDD（エンドユーザー向け機能）
- INTEGRATION_BDD: インテグレーション + BDD（システム間連携＋ユーザーストーリー）
- ALL: すべてのテストレベル（大規模な変更、高リスク）

（判断理由を具体的に記載）

#### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- EXTEND_TEST: 既存テストファイルに追加（既存機能の拡張時）
- CREATE_TEST: 新規テストファイル作成（新規機能追加時）
- BOTH_TEST: 両方（既存テスト拡張 + 新規テスト作成）

（判断理由を具体的に記載）

### 3. 影響範囲分析
- **既存コードへの影響**: 変更が必要なファイル・モジュール
- **依存関係の変更**: 新規依存の追加、既存依存の変更
- **マイグレーション要否**: データベーススキーマ変更、設定ファイル変更等

### 4. タスク分割

各フェーズについて、サブタスクを洗い出してください：

#### Phase 1: 要件定義 (見積もり: Xh)
- サブタスク1
- サブタスク2
...

#### Phase 2: 設計 (見積もり: Xh)
...

#### Phase 3: テストシナリオ (見積もり: Xh)
...

#### Phase 4: 実装 (見積もり: Xh)
...

#### Phase 5: テスト (見積もり: Xh)
...

#### Phase 6: ドキュメント (見積もり: Xh)
...

#### Phase 7: レポート (見積もり: Xh)
...

**タスク粒度基準**:
- 1タスク = 1~4時間程度で完了可能な作業単位
- 明確な完了条件（Done criteria）を持つ
- 他のタスクから独立して実装・テスト可能

### 5. 依存関係

タスク間の依存関係をMermaid形式で図示してください：

```mermaid
graph TD
    P1[Phase 1] --> P2[Phase 2]
    P2 --> P3[Phase 3]
    P3 --> P4[Phase 4]
    P4 --> P5[Phase 5]
    P5 --> P6[Phase 6]
    P6 --> P7[Phase 7]
```

### 6. リスクと軽減策

潜在的なリスクを洗い出し、各リスクに対する軽減策を記載してください：

#### リスク1: （リスク名）
- **影響度**: 低/中/高
- **確率**: 低/中/高
- **軽減策**: （具体的な対策）

#### リスク2: （リスク名）
...

**リスクカテゴリ**:
- 技術的リスク: 新技術の学習コスト、既存システムとの統合問題
- スコープリスク: 要件の曖昧さ、スコープクリープ
- リソースリスク: 工数不足、スキル不足
- 依存リスク: 外部システム依存、ブロッキング問題

### 7. 品質ゲート

各フェーズの合格基準を定義してください：

#### Phase 1: 要件定義
- [ ] 機能要件が明確に記載されている
- [ ] 受け入れ基準が定義されている
...

#### Phase 2: 設計
- [ ] 実装戦略の判断根拠が明記されている
- [ ] テスト戦略の判断根拠が明記されている
...

（以下、Phase 3~7についても記載）

## 出力形式

Markdown形式でプロジェクト計画書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-320/00_planning/output/planning.md
```

## 品質ゲート（Phase 0）

作成するプロジェクト計画書は、以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略が明確に決定されている**（CREATE/EXTEND/REFACTOR）
- [ ] **テスト戦略が明確に決定されている**（UNIT_ONLY/.../ALL）
- [ ] **テストコード戦略が明確に決定されている**（EXTEND_TEST/CREATE_TEST/BOTH_TEST）
- [ ] **影響範囲が分析されている**
- [ ] **タスク分割が適切な粒度である**（1タスク = 1~4時間）
- [ ] **リスクが洗い出されている**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **実装戦略の判断**: Phase 2で使用されるため、必ず明記してください
   - 実装戦略: CREATE/EXTEND/REFACTOR
   - テスト戦略: UNIT_ONLY/.../ALL
   - テストコード戦略: EXTEND_TEST/CREATE_TEST/BOTH_TEST

2. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な計画を記述
   - NG例: "適切に対応する"、"必要に応じて実施"
   - OK例: "Phase 2で詳細設計を実施"、"最大3回のリトライを実施"

3. **実現可能性**: 見積もりが現実的か、リソースは十分か確認
   - タスク粒度が大きすぎないか（1タスク = 1~4時間）
   - 依存関係が正確に記載されているか

4. **リスク分析の網羅性**: 重要なリスクが見逃されていないか確認
   - 技術的リスク、スコープリスク、リソースリスク、依存リスク

5. **レビューされることを意識**: 作成した計画書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（6つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント

## プロジェクト計画書の作成を開始してください
