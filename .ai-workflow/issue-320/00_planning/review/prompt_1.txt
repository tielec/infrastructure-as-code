# プロジェクト計画書レビュー - レビュープロンプト

## タスク概要

作成されたプロジェクト計画書をクリティカルシンキングによってレビューし、実現可能性と品質を確認してください。

## 計画書

@.ai-workflow/issue-320/00_planning/output/planning.md

## レビュー観点

以下の観点から計画書をレビューしてください：

### 1. 実現可能性
- **見積もりの妥当性**: タスクの見積もりが現実的か
- **リソースの充足性**: 必要なリソース（時間、スキル）は十分か
- **技術的実現可能性**: 提案された技術・アプローチは実現可能か
- **依存関係の整合性**: タスク間の依存関係が論理的に整合しているか

### 2. タスク分割の適切性
- **粒度の適切性**: 1タスク = 1~4時間程度の作業単位になっているか
- **完了条件の明確性**: 各タスクの完了条件（Done criteria）が明確か
- **独立性**: 各タスクが他のタスクから独立して実装・テスト可能か
- **網羅性**: Issue本文のTODOがすべてタスクに反映されているか

### 3. リスク分析の網羅性
- **リスクカテゴリの網羅**: 技術的、スコープ、リソース、依存の各リスクが考慮されているか
- **影響度・確率の妥当性**: リスクの影響度と確率が適切に評価されているか
- **軽減策の具体性**: 各リスクに対する軽減策が具体的に記載されているか
- **見落としリスクの有無**: 重要なリスクが見落とされていないか

### 4. 戦略判断の妥当性
- **実装戦略**: CREATE/EXTEND/REFACTORの選択が適切か（必須チェック）
- **テスト戦略**: UNIT_ONLY/.../ALLの選択が適切か（必須チェック）
- **テストコード戦略**: EXTEND_TEST/CREATE_TEST/BOTH_TESTの選択が適切か（必須チェック）
- **判断根拠**: 各戦略の選択理由が明確に記載されているか

### 5. 品質ゲートの確認

以下の品質ゲートがすべて満たされているか確認してください：

- [ ] **実装戦略が明確に決定されている**（CREATE/EXTEND/REFACTOR）
- [ ] **テスト戦略が明確に決定されている**（UNIT_ONLY/.../ALL）
- [ ] **テストコード戦略が明確に決定されている**（EXTEND_TEST/CREATE_TEST/BOTH_TEST）
- [ ] **影響範囲が分析されている**
- [ ] **タスク分割が適切な粒度である**（1タスク = 1~4時間）
- [ ] **リスクが洗い出されている**

## レビュー判定基準

レビュー結果は以下の3段階で判定してください：

### PASS（合格）
- すべての品質ゲートを満たしている
- ブロッカー（次フェーズに進めない問題）がない
- 計画が実行可能で、適切に構造化されている

### PASS_WITH_SUGGESTIONS（条件付き合格）
- すべての品質ゲートを満たしている
- ブロッカーはないが、改善余地がある
- 改善提案を記載するが、現時点での実行は可能

### FAIL（不合格）
- 品質ゲートのいずれかを満たしていない
- ブロッカー（次フェーズに進めない問題）が存在する
- 修正が必要

**重要**:
- ブロッカーとは「このまま次フェーズに進むと確実に問題が発生する事項」を指します
- 改善提案は「より良くするための提案」であり、ブロッカーではありません
- 判定は厳密に行い、ブロッカーがあればFAILとしてください

## ブロッカーの例

以下はブロッカーの例です（これらが存在する場合はFAIL）：

1. **戦略未定義**: 実装戦略・テスト戦略・テストコード戦略のいずれかが明記されていない
2. **タスク粒度の問題**: タスクが大きすぎる（8時間以上）または小さすぎる（15分以下）
3. **依存関係の矛盾**: タスクAがタスクBに依存し、タスクBがタスクAに依存（循環依存）
4. **実現不可能な見積もり**: 明らかに実現不可能な短時間見積もり
5. **重要リスクの見落とし**: 明らかに重大なリスクが記載されていない

## 改善提案の例

以下は改善提案の例です（これらはPASS_WITH_SUGGESTIONSで記載）：

1. **見積もりの精度向上**: バッファを追加してより安全な見積もりにする
2. **リスク分析の詳細化**: リスクの軽減策をより具体的に記載する
3. **タスク分割の細分化**: タスクをより小さな単位に分割して進捗管理しやすくする
4. **品質ゲートの追加**: より厳密な品質チェック項目を追加する

## レビュー結果の出力形式

以下の形式でレビュー結果を出力してください：

```markdown
## レビュー結果

**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**

## 実現可能性

（実現可能性に関するコメント）

## タスク分割の適切性

（タスク分割に関するコメント）

## リスク分析の網羅性

（リスク分析に関するコメント）

## 戦略判断の妥当性

（戦略判断に関するコメント）

## 品質ゲート確認

- [x/　] 実装戦略が明確に決定されている
- [x/　] テスト戦略が明確に決定されている
- [x/　] テストコード戦略が明確に決定されている
- [x/　] 影響範囲が分析されている
- [x/　] タスク分割が適切な粒度である
- [x/　] リスクが洗い出されている

## ブロッカー（FAIL時のみ）

1. （ブロッカー1の説明）
2. （ブロッカー2の説明）
...

## 改善提案（PASS_WITH_SUGGESTIONS時のみ）

1. （改善提案1の説明）
2. （改善提案2の説明）
...

## 総合評価

（総合的な評価コメント）
```

## 注意事項

1. **客観性**: 感情や主観を排除し、事実に基づいてレビュー
2. **建設的**: 批判だけでなく、具体的な改善案を提示
3. **明確性**: ブロッカーと改善提案を明確に区別
4. **完全性**: すべてのレビュー観点を網羅してチェック

## レビューを開始してください
