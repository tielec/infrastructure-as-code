# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-320/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue情報

- **Issue番号**: #320
- **タイトル**: [FEATURE] AIワークフロー: 全フェーズ一括実行機能（--phase all）
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/320
- **ラベル**: なし

### 本文

## 概要

現在のAIワークフローでは、各フェーズを個別に実行する必要があります。
開発効率を向上させるため、全フェーズ（Phase 1-7）を順次自動実行する機能を追加したいです。

## 背景

### 現在の実行方法
各フェーズを手動で順番に実行する必要がある:

```bash
python main.py execute --phase requirements --issue 305
python main.py execute --phase design --issue 305
python main.py execute --phase test_scenario --issue 305
python main.py execute --phase implementation --issue 305
python main.py execute --phase testing --issue 305
python main.py execute --phase documentation --issue 305
python main.py execute --phase report --issue 305
```

### 問題点
- **手動実行の手間**: 7回のコマンド実行が必要
- **実行忘れのリスク**: フェーズのスキップや順番ミス
- **自動化困難**: CI/CD統合時に複雑なスクリプトが必要

## 提案機能

### 1. `--phase all` オプションの追加

全フェーズを順次実行:

```bash
# 全フェーズ（Phase 1-7）を順次実行
python main.py execute --phase all --issue 305
```

### 2. 実行フロー

```
Phase 1 (requirements) → レビュー → Phase 2 (design) → レビュー → ... → Phase 7 (report)
```

各フェーズで以下を自動実行:
1. フェーズ実行（execute）
2. レビュー（review）
3. レビュー結果がFAILの場合は修正（revise）
4. Git commit & push（BasePhaseで自動）
5. 次フェーズへ

### 3. エラーハンドリング

```python
def execute_all_phases(issue_number: int) -> Dict[str, Any]:
    """
    全フェーズを順次実行
    
    Args:
        issue_number: Issue番号
    
    Returns:
        Dict[str, Any]: 実行結果サマリー
    """
    phases = [
        'requirements',
        'design', 
        'test_scenario',
        'implementation',
        'testing',
        'documentation',
        'report'
    ]
    
    results = {}
    for phase in phases:
        print(f"\n{'='*60}")
        print(f"Starting Phase: {phase}")
        print(f"{'='*60}\n")
        
        try:
            # フェーズ実行
            result = execute_phase(phase, issue_number)
            results[phase] = result
            
            if not result['success']:
                # フェーズ失敗時は停止
                print(f"[ERROR] Phase '{phase}' failed. Stopping workflow.")
                return {
                    'success': False,
                    'completed_phases': list(results.keys()),
                    'failed_phase': phase,
                    'error': result.get('error')
                }
                
        except Exception as e:
            print(f"[ERROR] Exception in phase '{phase}': {e}")
            results[phase] = {'success': False, 'error': str(e)}
            return {
                'success': False,
                'completed_phases': list(results.keys()),
                'failed_phase': phase,
                'error': str(e)
            }
    
    return {
        'success': True,
        'completed_phases': phases,
        'results': results
    }
```

### 4. 進捗表示

実行中の進捗を表示:

```
=============================================================
AI Workflow Full Execution - Issue #305
=============================================================

Progress: [1/7] Phase: requirements
Status: ✓ Completed (Review: PASS)

Progress: [2/7] Phase: design  
Status: ✓ Completed (Review: PASS_WITH_SUGGESTIONS)

Progress: [3/7] Phase: test_scenario
Status: ⏳ In Progress...

...
```

### 5. 実行サマリー

全フェーズ完了後にサマリーを表示:

```
=============================================================
Execution Summary - Issue #305
=============================================================

Total Phases: 7
✓ Completed: 7
✗ Failed: 0

Phase Results:
  1. requirements     ✓ PASS
  2. design           ✓ PASS_WITH_SUGGESTIONS
  3. test_scenario    ✓ PASS
  4. implementation   ✓ PASS
  5. testing          ✓ PASS
  6. documentation    ✓ PASS
  7. report           ✓ PASS

Total Execution Time: 45m 32s
Total Cost: $2.45 USD

All phases completed successfully! 🎉
=============================================================
```

## 実装方針

### Phase 1: 基本実装
- [ ] `execute_all_phases()` 関数の実装
- [ ] `main.py` の `execute` コマンドに `--phase all` オプション追加
- [ ] フェーズ順次実行ロジックの実装

### Phase 2: エラーハンドリング強化
- [ ] フェーズ失敗時の停止処理
- [ ] 例外ハンドリング
- [ ] ロールバック機能（オプション）

### Phase 3: 進捗表示・ログ出力
- [ ] リアルタイム進捗表示
- [ ] 各フェーズの開始・完了ログ
- [ ] 実行サマリーの生成

### Phase 4: オプション機能
- [ ] `--continue-on-error`: エラー時も継続実行
- [ ] `--start-from <phase>`: 特定フェーズから再開
- [ ] `--dry-run`: 実行計画のプレビュー

## CLIコマンド例

### 基本実行
```bash
# 全フェーズを順次実行
python main.py execute --phase all --issue 305
```

### Docker環境での実行
```bash
docker run --rm   -e CLAUDE_CODE_OAUTH_TOKEN="${CLAUDE_CODE_OAUTH_TOKEN}"   -e GITHUB_TOKEN="${GITHUB_TOKEN}"   -e GITHUB_REPOSITORY="${GITHUB_REPOSITORY}"   -v "$(pwd):/workspace"   -w /workspace/scripts/ai-workflow   ai-workflow:latest   python main.py execute --phase all --issue 305
```

### オプション付き実行（将来）
```bash
# エラーがあっても継続
python main.py execute --phase all --issue 305 --continue-on-error

# Phase 4から再開
python main.py execute --phase all --issue 305 --start-from implementation

# 実行計画のプレビュー
python main.py execute --phase all --issue 305 --dry-run
```

## 期待される効果

1. **実行効率の向上**: 1回のコマンドで全フェーズ完了
2. **人的ミスの削減**: フェーズのスキップや順番ミスを防止
3. **CI/CD統合の簡素化**: 単一コマンドで完結
4. **開発体験の向上**: 自動化による開発者の負担軽減

## Jenkins統合

`ai-workflow-orchestrator` ジョブでの活用:

```groovy
stage('Execute All Phases') {
    steps {
        script {
            docker.image('ai-workflow:latest').inside {
                sh '''
                    python main.py execute --phase all --issue ${ISSUE_NUMBER}
                '''
            }
        }
    }
}
```

## Issue #319 との関係

- **#319**: フェーズ依存関係の柔軟化（部分実行）
- **本Issue**: 全フェーズ一括実行（完全自動化）

両機能は相補的:
- 小規模タスク: #319の部分実行機能を使用
- 大規模タスク: 本Issueの全フェーズ実行機能を使用

## 検討事項

### パフォーマンス
- 全フェーズ実行の所要時間（推定30-60分）
- Claude API使用量とコスト管理

### エラーリカバリー
- フェーズ失敗時の再実行方法
- 途中からの再開機能の必要性

### ログ管理
- 長時間実行のログ出力方法
- 進捗状況の可視化

## 関連Issue

- #305 AI Workflow: Jenkins統合完成とPhase終了後の自動commit & push機能
- #319 AIワークフロー: フェーズ依存関係の柔軟化と選択的実行機能

## タスク

- [ ] Phase 1: 基本実装
- [ ] Phase 2: エラーハンドリング強化
- [ ] Phase 3: 進捗表示・ログ出力
- [ ] Phase 4: オプション機能
- [ ] E2Eテストの追加
- [ ] README.md更新（使用例追加）
- [ ] Jenkinsfile更新（all option統合）

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-320/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
