# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-320/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-320/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-320/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**UNIT_INTEGRATION**

### GitHub Issue情報（参考）
## Issue情報

- **Issue番号**: #320
- **タイトル**: [FEATURE] AIワークフロー: 全フェーズ一括実行機能（--phase all）
- **状態**: open
- **URL**: https://github.com/tielec/infrastructure-as-code/issues/320
- **ラベル**: なし

### 本文

## 概要

現在のAIワークフローでは、各フェーズを個別に実行する必要があります。
開発効率を向上させるため、全フェーズ（Phase 1-7）を順次自動実行する機能を追加したいです。

## 背景

### 現在の実行方法
各フェーズを手動で順番に実行する必要がある:

```bash
python main.py execute --phase requirements --issue 305
python main.py execute --phase design --issue 305
python main.py execute --phase test_scenario --issue 305
python main.py execute --phase implementation --issue 305
python main.py execute --phase testing --issue 305
python main.py execute --phase documentation --issue 305
python main.py execute --phase report --issue 305
```

### 問題点
- **手動実行の手間**: 7回のコマンド実行が必要
- **実行忘れのリスク**: フェーズのスキップや順番ミス
- **自動化困難**: CI/CD統合時に複雑なスクリプトが必要

## 提案機能

### 1. `--phase all` オプションの追加

全フェーズを順次実行:

```bash
# 全フェーズ（Phase 1-7）を順次実行
python main.py execute --phase all --issue 305
```

### 2. 実行フロー

```
Phase 1 (requirements) → レビュー → Phase 2 (design) → レビュー → ... → Phase 7 (report)
```

各フェーズで以下を自動実行:
1. フェーズ実行（execute）
2. レビュー（review）
3. レビュー結果がFAILの場合は修正（revise）
4. Git commit & push（BasePhaseで自動）
5. 次フェーズへ

### 3. エラーハンドリング

```python
def execute_all_phases(issue_number: int) -> Dict[str, Any]:
    """
    全フェーズを順次実行
    
    Args:
        issue_number: Issue番号
    
    Returns:
        Dict[str, Any]: 実行結果サマリー
    """
    phases = [
        'requirements',
        'design', 
        'test_scenario',
        'implementation',
        'testing',
        'documentation',
        'report'
    ]
    
    results = {}
    for phase in phases:
        print(f"\n{'='*60}")
        print(f"Starting Phase: {phase}")
        print(f"{'='*60}\n")
        
        try:
            # フェーズ実行
            result = execute_phase(phase, issue_number)
            results[phase] = result
            
            if not result['success']:
                # フェーズ失敗時は停止
                print(f"[ERROR] Phase '{phase}' failed. Stopping workflow.")
                return {
                    'success': False,
                    'completed_phases': list(results.keys()),
                    'failed_phase': phase,
                    'error': result.get('error')
                }
                
        except Exception as e:
            print(f"[ERROR] Exception in phase '{phase}': {e}")
            results[phase] = {'success': False, 'error': str(e)}
            return {
                'success': False,
                'completed_phases': list(results.keys()),
                'failed_phase': phase,
                'error': str(e)
            }
    
    return {
        'success': True,
        'completed_phases': phases,
        'results': results
    }
```

### 4. 進捗表示

実行中の進捗を表示:

```
=============================================================
AI Workflow Full Execution - Issue #305
=============================================================

Progress: [1/7] Phase: requirements
Status: ✓ Completed (Review: PASS)

Progress: [2/7] Phase: design  
Status: ✓ Completed (Review: PASS_WITH_SUGGESTIONS)

Progress: [3/7] Phase: test_scenario
Status: ⏳ In Progress...

...
```

### 5. 実行サマリー

全フェーズ完了後にサマリーを表示:

```
=============================================================
Execution Summary - Issue #305
=============================================================

Total Phases: 7
✓ Completed: 7
✗ Failed: 0

Phase Results:
  1. requirements     ✓ PASS
  2. design           ✓ PASS_WITH_SUGGESTIONS
  3. test_scenario    ✓ PASS
  4. implementation   ✓ PASS
  5. testing          ✓ PASS
  6. documentation    ✓ PASS
  7. report           ✓ PASS

Total Execution Time: 45m 32s
Total Cost: $2.45 USD

All phases completed successfully! 🎉
=============================================================
```

## 実装方針

### Phase 1: 基本実装
- [ ] `execute_all_phases()` 関数の実装
- [ ] `main.py` の `execute` コマンドに `--phase all` オプション追加
- [ ] フェーズ順次実行ロジックの実装

### Phase 2: エラーハンドリング強化
- [ ] フェーズ失敗時の停止処理
- [ ] 例外ハンドリング
- [ ] ロールバック機能（オプション）

### Phase 3: 進捗表示・ログ出力
- [ ] リアルタイム進捗表示
- [ ] 各フェーズの開始・完了ログ
- [ ] 実行サマリーの生成

### Phase 4: オプション機能
- [ ] `--continue-on-error`: エラー時も継続実行
- [ ] `--start-from <phase>`: 特定フェーズから再開
- [ ] `--dry-run`: 実行計画のプレビュー

## CLIコマンド例

### 基本実行
```bash
# 全フェーズを順次実行
python main.py execute --phase all --issue 305
```

### Docker環境での実行
```bash
docker run --rm   -e CLAUDE_CODE_OAUTH_TOKEN="${CLAUDE_CODE_OAUTH_TOKEN}"   -e GITHUB_TOKEN="${GITHUB_TOKEN}"   -e GITHUB_REPOSITORY="${GITHUB_REPOSITORY}"   -v "$(pwd):/workspace"   -w /workspace/scripts/ai-workflow   ai-workflow:latest   python main.py execute --phase all --issue 305
```

### オプション付き実行（将来）
```bash
# エラーがあっても継続
python main.py execute --phase all --issue 305 --continue-on-error

# Phase 4から再開
python main.py execute --phase all --issue 305 --start-from implementation

# 実行計画のプレビュー
python main.py execute --phase all --issue 305 --dry-run
```

## 期待される効果

1. **実行効率の向上**: 1回のコマンドで全フェーズ完了
2. **人的ミスの削減**: フェーズのスキップや順番ミスを防止
3. **CI/CD統合の簡素化**: 単一コマンドで完結
4. **開発体験の向上**: 自動化による開発者の負担軽減

## Jenkins統合

`ai-workflow-orchestrator` ジョブでの活用:

```groovy
stage('Execute All Phases') {
    steps {
        script {
            docker.image('ai-workflow:latest').inside {
                sh '''
                    python main.py execute --phase all --issue ${ISSUE_NUMBER}
                '''
            }
        }
    }
}
```

## Issue #319 との関係

- **#319**: フェーズ依存関係の柔軟化（部分実行）
- **本Issue**: 全フェーズ一括実行（完全自動化）

両機能は相補的:
- 小規模タスク: #319の部分実行機能を使用
- 大規模タスク: 本Issueの全フェーズ実行機能を使用

## 検討事項

### パフォーマンス
- 全フェーズ実行の所要時間（推定30-60分）
- Claude API使用量とコスト管理

### エラーリカバリー
- フェーズ失敗時の再実行方法
- 途中からの再開機能の必要性

### ログ管理
- 長時間実行のログ出力方法
- 進捗状況の可視化

## 関連Issue

- #305 AI Workflow: Jenkins統合完成とPhase終了後の自動commit & push機能
- #319 AIワークフロー: フェーズ依存関係の柔軟化と選択的実行機能

## タスク

- [ ] Phase 1: 基本実装
- [ ] Phase 2: エラーハンドリング強化
- [ ] Phase 3: 進捗表示・ログ出力
- [ ] Phase 4: オプション機能
- [ ] E2Eテストの追加
- [ ] README.md更新（使用例追加）
- [ ] Jenkinsfile更新（all option統合）

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-320/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
