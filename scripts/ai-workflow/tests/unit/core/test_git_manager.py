"""GitManagerクラスのUnitテスト

テストシナリオ（UT-GM-001～UT-GM-017）に基づいてテストを実装
"""
import tempfile
import shutil
from pathlib import Path
from unittest.mock import Mock, MagicMock, patch
import pytest
from git import Repo, GitCommandError

from core.git_manager import GitManager
from core.metadata_manager import MetadataManager


@pytest.fixture
def temp_git_repo():
    """一時的なGitリポジトリを作成"""
    temp_dir = tempfile.mkdtemp()
    repo = Repo.init(temp_dir)

    # 初期コミット作成
    test_file = Path(temp_dir) / 'README.md'
    test_file.write_text('# Test Repository')
    repo.index.add(['README.md'])
    repo.index.commit('Initial commit')

    yield temp_dir, repo

    # クリーンアップ
    shutil.rmtree(temp_dir)


@pytest.fixture
def mock_metadata():
    """モックMetadataManagerを作成"""
    metadata = Mock(spec=MetadataManager)
    metadata.data = {
        'issue_number': 305,
        'issue_title': 'Test Issue',
        'phases': {
            '01_requirements': {
                'phase_number': '01',
                'phase_name': 'requirements',
                'status': 'completed'
            }
        }
    }
    return metadata


# UT-GM-001: コミットメッセージ生成（正常系）
def test_create_commit_message_success(temp_git_repo, mock_metadata):
    """コミットメッセージが正しいフォーマットで生成されることを検証"""
    temp_dir, _ = temp_git_repo
    git_manager = GitManager(
        repo_path=Path(temp_dir),
        metadata_manager=mock_metadata
    )

    message = git_manager.create_commit_message(
        phase_name='requirements',
        status='completed',
        review_result='PASS'
    )

    # 検証ポイント
    assert '[ai-workflow] Phase 1 (requirements) - completed' in message
    assert 'Issue: #305' in message
    assert 'Phase: 1 (requirements)' in message
    assert 'Status: completed' in message
    assert 'Review: PASS' in message
    assert 'Auto-generated by AI Workflow' in message


# UT-GM-002: コミットメッセージ生成（レビュー未実施）
def test_create_commit_message_no_review(temp_git_repo, mock_metadata):
    """レビュー未実施時にN/Aが設定されることを検証"""
    temp_dir, _ = temp_git_repo
    git_manager = GitManager(
        repo_path=Path(temp_dir),
        metadata_manager=mock_metadata
    )

    message = git_manager.create_commit_message(
        phase_name='requirements',
        status='completed',
        review_result=None
    )

    # 検証ポイント
    assert 'Review: N/A' in message


# UT-GM-003: コミットメッセージ生成（失敗ステータス）
def test_create_commit_message_failed(temp_git_repo, mock_metadata):
    """Phase失敗時のメッセージが正しく生成されることを検証"""
    temp_dir, _ = temp_git_repo
    git_manager = GitManager(
        repo_path=Path(temp_dir),
        metadata_manager=mock_metadata
    )

    message = git_manager.create_commit_message(
        phase_name='implementation',
        status='failed',
        review_result='FAIL'
    )

    # 検証ポイント
    assert '[ai-workflow] Phase 4 (implementation) - failed' in message
    assert 'Status: failed' in message
    assert 'Review: FAIL' in message


# UT-GM-004: Phase成果物のcommit（正常系）
def test_commit_phase_output_success(temp_git_repo, mock_metadata):
    """.ai-workflow/issue-305/ 配下のファイルが正しくcommitされることを検証"""
    temp_dir, repo = temp_git_repo
    git_manager = GitManager(
        repo_path=Path(temp_dir),
        metadata_manager=mock_metadata
    )

    # テストファイルを作成
    workflow_dir = Path(temp_dir) / '.ai-workflow' / 'issue-305' / '01_requirements' / 'output'
    workflow_dir.mkdir(parents=True, exist_ok=True)

    test_file1 = workflow_dir / 'requirements.md'
    test_file1.write_text('# Requirements')

    test_file2 = Path(temp_dir) / 'README.md'
    test_file2.write_text('# Updated README')

    # Commit実行
    result = git_manager.commit_phase_output(
        phase_name='requirements',
        status='completed',
        review_result='PASS'
    )

    # 検証ポイント
    assert result['success'] is True
    assert result['commit_hash'] is not None
    assert len(result['files_committed']) == 1
    assert '.ai-workflow/issue-305/' in result['files_committed'][0]
    assert 'README.md' not in str(result['files_committed'])


# UT-GM-005: Phase成果物のcommit（ファイル0件）
def test_commit_phase_output_no_files(temp_git_repo, mock_metadata):
    """コミット対象ファイルが0件の場合、スキップされることを検証"""
    temp_dir, repo = temp_git_repo
    git_manager = GitManager(
        repo_path=Path(temp_dir),
        metadata_manager=mock_metadata
    )

    # ファイルを変更しない（クリーン状態）
    result = git_manager.commit_phase_output(
        phase_name='requirements',
        status='completed',
        review_result='PASS'
    )

    # 検証ポイント
    assert result['success'] is True
    assert result['commit_hash'] is None
    assert result['files_committed'] == []
    assert result['error'] is None


# UT-GM-006: Phase成果物のcommit（Git未初期化エラー）
def test_commit_phase_output_git_not_found(mock_metadata):
    """Gitリポジトリが存在しない場合、エラーが返されることを検証"""
    non_existent_path = Path('/non/existent/path')

    with pytest.raises(RuntimeError, match='Git repository not found'):
        GitManager(
            repo_path=non_existent_path,
            metadata_manager=mock_metadata
        )


# UT-GM-007: リモートリポジトリへのpush（正常系）
def test_push_to_remote_success(temp_git_repo, mock_metadata):
    """リモートリポジトリへのpushが成功することを検証"""
    temp_dir, repo = temp_git_repo
    git_manager = GitManager(
        repo_path=Path(temp_dir),
        metadata_manager=mock_metadata
    )

    # モックでpushを成功させる
    with patch.object(repo.remote('origin'), 'push') as mock_push:
        mock_push.return_value = None

        result = git_manager.push_to_remote()

        # 検証ポイント
        assert result['success'] is True
        assert result['retries'] == 0
        assert result['error'] is None


# UT-GM-008: リモートリポジトリへのpush（リトライ成功）
def test_push_to_remote_retry(temp_git_repo, mock_metadata):
    """ネットワークエラー時にリトライして成功することを検証"""
    temp_dir, repo = temp_git_repo
    git_manager = GitManager(
        repo_path=Path(temp_dir),
        metadata_manager=mock_metadata
    )

    # 1回目失敗、2回目成功
    with patch.object(repo.remote('origin'), 'push') as mock_push:
        mock_push.side_effect = [
            GitCommandError('push', 'Network timeout'),
            None
        ]

        result = git_manager.push_to_remote(retry_delay=0.1)

        # 検証ポイント
        assert result['success'] is True
        assert result['retries'] == 1
        assert result['error'] is None


# UT-GM-009: リモートリポジトリへのpush（権限エラー）
def test_push_to_remote_permission_error(temp_git_repo, mock_metadata):
    """権限エラー時にリトライせず即座にエラーを返すことを検証"""
    temp_dir, repo = temp_git_repo
    git_manager = GitManager(
        repo_path=Path(temp_dir),
        metadata_manager=mock_metadata
    )

    # 権限エラーをシミュレート
    with patch.object(repo.remote('origin'), 'push') as mock_push:
        mock_push.side_effect = GitCommandError('push', 'Permission denied')

        result = git_manager.push_to_remote(retry_delay=0.1)

        # 検証ポイント
        assert result['success'] is False
        assert result['retries'] == 0
        assert 'Permission' in result['error']


# UT-GM-010: リモートリポジトリへのpush（最大リトライ超過）
def test_push_to_remote_max_retries(temp_git_repo, mock_metadata):
    """最大リトライ回数を超えた場合、エラーを返すことを検証"""
    temp_dir, repo = temp_git_repo
    git_manager = GitManager(
        repo_path=Path(temp_dir),
        metadata_manager=mock_metadata
    )

    # すべてのpush試行が失敗
    with patch.object(repo.remote('origin'), 'push') as mock_push:
        mock_push.side_effect = GitCommandError('push', 'Network timeout')

        result = git_manager.push_to_remote(max_retries=3, retry_delay=0.1)

        # 検証ポイント
        assert result['success'] is False
        assert result['retries'] == 3
        assert 'Max retries exceeded' in result['error']


# UT-GM-011: Git状態確認（クリーン状態）
def test_get_status_clean(temp_git_repo, mock_metadata):
    """クリーンな状態のGit情報が取得できることを検証"""
    temp_dir, repo = temp_git_repo
    git_manager = GitManager(
        repo_path=Path(temp_dir),
        metadata_manager=mock_metadata
    )

    status = git_manager.get_status()

    # 検証ポイント
    assert status['branch'] == 'master' or status['branch'] == 'main'
    assert status['is_dirty'] is False
    assert status['untracked_files'] == []
    assert status['modified_files'] == []


# UT-GM-012: Git状態確認（変更あり）
def test_get_status_dirty(temp_git_repo, mock_metadata):
    """未コミットの変更がある場合の情報が取得できることを検証"""
    temp_dir, repo = temp_git_repo
    git_manager = GitManager(
        repo_path=Path(temp_dir),
        metadata_manager=mock_metadata
    )

    # 新規ファイル追加
    new_file = Path(temp_dir) / 'new_file.md'
    new_file.write_text('# New File')

    # 既存ファイル変更
    existing_file = Path(temp_dir) / 'README.md'
    existing_file.write_text('# Updated')

    status = git_manager.get_status()

    # 検証ポイント
    assert status['is_dirty'] is True
    assert 'new_file.md' in status['untracked_files']
    assert 'README.md' in status['modified_files']


# UT-GM-013: ファイルフィルタリング（正常系）
def test_filter_phase_files(temp_git_repo, mock_metadata):
    """.ai-workflow/issue-305/ 配下のファイルのみフィルタリングされることを検証"""
    temp_dir, _ = temp_git_repo
    git_manager = GitManager(
        repo_path=Path(temp_dir),
        metadata_manager=mock_metadata
    )

    files = [
        '.ai-workflow/issue-305/01_requirements/output/requirements.md',
        '.ai-workflow/issue-305/02_design/output/design.md',
        'README.md',
        'scripts/ai-workflow/main.py',
        '.ai-workflow/issue-304/01_requirements/output/requirements.md'
    ]

    filtered = git_manager._filter_phase_files(files, 305)

    # 検証ポイント
    assert len(filtered) == 2
    assert '.ai-workflow/issue-305/01_requirements/output/requirements.md' in filtered
    assert '.ai-workflow/issue-305/02_design/output/design.md' in filtered
    assert 'README.md' not in filtered
    assert 'scripts/ai-workflow/main.py' not in filtered


# UT-GM-014: ファイルフィルタリング（0件）
def test_filter_phase_files_empty(temp_git_repo, mock_metadata):
    """対象ファイルが0件の場合、空リストが返されることを検証"""
    temp_dir, _ = temp_git_repo
    git_manager = GitManager(
        repo_path=Path(temp_dir),
        metadata_manager=mock_metadata
    )

    files = [
        'README.md',
        'scripts/ai-workflow/main.py'
    ]

    filtered = git_manager._filter_phase_files(files, 305)

    # 検証ポイント
    assert filtered == []


# UT-GM-015: リトライ可能エラーの判定（ネットワークエラー）
def test_is_retriable_error_network(temp_git_repo, mock_metadata):
    """ネットワークエラーがリトライ可能と判定されることを検証"""
    temp_dir, _ = temp_git_repo
    git_manager = GitManager(
        repo_path=Path(temp_dir),
        metadata_manager=mock_metadata
    )

    error = GitCommandError('push', 'Network timeout')

    # 検証ポイント
    assert git_manager._is_retriable_error(error) is True


# UT-GM-016: リトライ可能エラーの判定（権限エラー）
def test_is_retriable_error_permission(temp_git_repo, mock_metadata):
    """権限エラーがリトライ不可能と判定されることを検証"""
    temp_dir, _ = temp_git_repo
    git_manager = GitManager(
        repo_path=Path(temp_dir),
        metadata_manager=mock_metadata
    )

    error = GitCommandError('push', 'Permission denied')

    # 検証ポイント
    assert git_manager._is_retriable_error(error) is False


# UT-GM-017: リトライ可能エラーの判定（認証エラー）
def test_is_retriable_error_auth(temp_git_repo, mock_metadata):
    """認証エラーがリトライ不可能と判定されることを検証"""
    temp_dir, _ = temp_git_repo
    git_manager = GitManager(
        repo_path=Path(temp_dir),
        metadata_manager=mock_metadata
    )

    error = GitCommandError('push', 'Authentication failed')

    # 検証ポイント
    assert git_manager._is_retriable_error(error) is False
