# テストコード実装フェーズ - 修正プロンプト

## タスク概要
レビューで指摘された問題を修正し、改善されたテストコードを実装してください。

## レビュー結果
{review_feedback}

## 参考情報

### テスト実装ログ
{test_implementation_document_path}

### テストシナリオ
{test_scenario_document_path}

### 実装ログ
{implementation_document_path}

### テスト戦略（Phase 2で決定）
**{test_strategy}**

## 修正指示

### ブロッカー（BLOCKER）の解消

レビュー結果の「ブロッカー」セクションに記載された問題は、**次フェーズに進めない重大な問題**です。これらを必ず解消してください。

**ブロッカーの典型例**:
- テストシナリオの主要ケースが未実装 → テストケースを追加
- テストコードが実行不可能 → シンタックスエラーを修正
- テストの独立性が保たれていない → テスト間の依存を排除
- 実コードが混入している → 実コード変更を削除（Phase 5では実コード変更禁止）

### 改善提案（SUGGESTION）の検討

レビュー結果の「改善提案」セクションに記載された項目は、可能な範囲で反映してください。

**改善提案の優先度**:
1. テストカバレッジ拡大 → 優先的に反映
2. エッジケースの追加 → 可能であれば反映
3. コメント・ドキュメント追加 → 時間があれば反映

## 品質ゲート（Phase 5）

修正後のテストコード実装は、以下の品質ゲートをすべて満たす必要があります：

- [ ] **Phase 3のテストシナリオがすべて実装されている**
- [ ] **テストコードが実行可能である**
- [ ] **テストの意図がコメントで明確**

## 修正方針

### 1. ブロッカー対応（最優先）

レビューで指摘されたブロッカーを1つずつ解消してください。

**対応方法**:
- 実装されたテストコードを読み込む
- ブロッカー指摘箇所を特定
- 指摘内容を理解し、適切に修正
- 修正後、ブロッカーが解消されたか確認

### 2. 改善提案の反映（推奨）

可能な範囲で、レビューの改善提案を反映してください。

**対応方法**:
- 改善提案を読み込む
- 実装可能かつ効果的な提案を選択
- テストコードを修正・追加
- 全体の整合性を確認

### 3. 既存テストの尊重

レビューで問題がなかった部分は、基本的に変更しないでください。

**注意点**:
- ブロッカー解消に必要な修正のみ実施
- 不必要な変更は避ける
- 動作しているテストは維持する

## 修正後の確認事項

修正完了後、以下を確認してください：

1. **ブロッカーが解消されたか**
   - レビューで指摘されたすべてのブロッカーに対応したか
   - 対応内容が適切か

2. **品質ゲートを満たしているか**
   - 3つの品質ゲートすべてをクリアしているか

3. **テストが実行可能か**
   - テストコードにシンタックスエラーがないか
   - テストフレームワークで実行可能か

4. **全体の整合性**
   - 修正によって新たな問題が生まれていないか
   - テストコード全体が一貫しているか

5. **次フェーズへの準備**
   - 修正後のテストコードが実行可能か
   - Phase 6（テスト実行）に進めるか

## テスト実装ログの更新

修正内容をテスト実装ログに追記してください：

```markdown
## 修正履歴

### 修正1: （ブロッカー/改善提案の内容）
- **指摘内容**: （レビューでの指摘）
- **修正内容**: （どう修正したか）
- **影響範囲**: （どのファイルを変更したか）
```

## 出力形式

修正後のテスト実装ログを `.ai-workflow/issue-{issue_number}/05_test_implementation/output/test_implementation.md` として**上書き保存**してください。

## 修正開始

上記を踏まえ、レビュー指摘事項を反映した改善版のテストコードを実装し、テスト実装ログを更新してください。
