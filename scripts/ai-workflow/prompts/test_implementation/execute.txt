# テストコード実装フェーズ - 実行プロンプト

## タスク概要
Phase 3のテストシナリオとPhase 4の実装に基づいて、テストコードを実装してください。

## 入力情報

### Planning Phase成果物
- Planning Document: {planning_document_path}

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### テストシナリオ
{test_scenario_document_path}

### 実装ログ
{implementation_document_path}

### 設計書（参考）
{design_document_path}

### テスト戦略（Phase 2で決定）
**{test_strategy}**

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、適切なテストコードを実装してください：

### UNIT_ONLY
- 各関数・メソッドの単体テストのみ実装
- モック・スタブを活用して外部依存を排除

### INTEGRATION_ONLY
- コンポーネント間の統合テストのみ実装
- 実際のDBやAPIを使用したテスト

### UNIT_INTEGRATION
- ユニットテストと統合テストの両方を実装
- ユニットテスト: 関数・メソッドレベル
- 統合テスト: コンポーネント間の連携

### BDD
- Given-When-Then形式のBDDテストを実装
- ユーザーストーリーに基づくシナリオテスト

### ALL（UNIT + INTEGRATION + BDD）
- すべてのテストタイプを実装
- 包括的なテストカバレッジを確保

## テストコード実装手順

### 1. テストシナリオの確認

Phase 3で作成されたテストシナリオを確認してください：
- 正常系シナリオ
- 異常系シナリオ
- エッジケースシナリオ

### 2. 実装コードの理解

Phase 4で実装された実コードを確認してください：
- 実装されたクラス・関数
- インターフェース
- データ構造

### 3. テストコードの実装

テストシナリオに基づいて、以下を実装してください：

#### 3.1 テストファイル作成
- 命名規則: test_*.py または *_test.py
- 配置場所: tests/ ディレクトリ配下
- テスト戦略に応じた適切なディレクトリ構造（tests/unit/、tests/integration/等）

#### 3.2 テストケース実装
- Given-When-Then構造でテストを記述
- アサーション（assert文）を明確に
- テストの意図をコメントで記載

#### 3.3 テストユーティリティ
- モック・スタブの実装
- テストフィクスチャの作成
- テストヘルパー関数

### 4. テスト実装ログの記録

実装した内容を以下の形式で記録してください：

```markdown
# テストコード実装ログ

## 実装サマリー
- テスト戦略: {test_strategy}
- テストファイル数: X個
- テストケース数: Y個

## テストファイル一覧

### 新規作成
- `tests/test_xxx.py`: （説明）

## テストケース詳細

### ファイル: tests/test_xxx.py
- **test_function1**: （テスト内容）
- **test_function2**: （テスト内容）

## 次のステップ
- Phase 6でテストを実行
```

このログを `.ai-workflow/issue-{issue_number}/05_test_implementation/output/test_implementation.md` として保存してください。

## 品質ゲート（Phase 5）

テストコード実装は以下の品質ゲートを満たす必要があります：

- [ ] **Phase 3のテストシナリオがすべて実装されている**
- [ ] **テストコードが実行可能である**
- [ ] **テストの意図がコメントで明確**

これらの品質ゲートは**必須要件**です。実装後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **責務の明確化**: テストコードのみを実装
   - 実コードは Phase 4 で実装済み
   - Phase 5 では一切の実コード変更を行わない

2. **テストの独立性**: テスト間の依存関係を避ける
   - 各テストは独立して実行可能
   - テストの実行順序に依存しない

3. **テストカバレッジ**: 十分なカバレッジを確保
   - 主要な機能はすべてテスト
   - エッジケースも考慮

4. **レビューされることを意識**: テストコードはクリティカルシンキングレビューが実施されます
   - 品質ゲート（3つの必須要件）を最優先で満たすこと
   - テストの意図を明確に

## テストコード実装開始

上記を踏まえ、テストコードを実装し、実装ログを作成してください。
