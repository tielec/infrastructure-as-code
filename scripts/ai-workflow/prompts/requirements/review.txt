# 要件定義フェーズ - レビュープロンプト

## タスク概要

生成された要件定義書をクリティカルシンキングでレビューし、品質を評価してください。

**最優先事項**: レビュー完了後、必ず最終行に判定キーワードを明記すること。

## レビュー対象

{requirements_document_path}

## 品質ゲート（Phase 1）

要件定義書は以下の品質ゲートをクリアする必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。1つでも満たされていない場合は「FAIL」と判定してください。

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**: 100点満点を求めず、プロジェクトを前進させられる品質を目指す
2. **ブロッカーと改善提案を明確に区別**: 次フェーズに進めない問題（ブロッカー）と、改善が望ましい事項（改善提案）を明確に分ける
3. **実用的でバランスの取れた判断**: 理論的完璧性よりも、実装可能性とビジネス価値を重視
4. **建設的なフィードバック**: 問題指摘だけでなく、具体的な改善提案を提示

## レビュー観点

以下の観点で要件定義書を評価してください：

### 1. 具体性（Specificity）
- [ ] 要件が具体的かつ明確に記述されているか
- [ ] 曖昧な表現（「適切に」「必要に応じて」など）が使われていないか
- [ ] 数値や基準が明示されているか

### 2. 完全性（Completeness）
- [ ] Issue本文の情報が漏れなく反映されているか
- [ ] 機能要件がすべて網羅されているか
- [ ] 非機能要件が適切に定義されているか
- [ ] 制約事項・前提条件が明記されているか

### 3. 検証可能性（Verifiability）
- [ ] 各要件が検証可能（テスト可能）な形で記述されているか
- [ ] 受け入れ基準が明確に定義されているか
- [ ] 成功条件・失敗条件が識別可能か

### 4. 整合性（Consistency）
- [ ] 各セクション間で矛盾がないか
- [ ] プロジェクトの全体方針（CLAUDE.md、ARCHITECTURE.md）と整合しているか
- [ ] 既存システムとの整合性が考慮されているか

### 5. 実現可能性（Feasibility）
- [ ] 技術的に実現可能な要件か
- [ ] リソース制約（時間、人員、予算）を考慮しているか
- [ ] 既存技術スタックと整合しているか

### 6. 優先度（Priority）
- [ ] 各要件の優先度が適切に設定されているか
- [ ] MVP（Minimum Viable Product）範囲が明確か
- [ ] 段階的なリリース計画が考慮されているか

### 7. セキュリティ（Security）
- [ ] セキュリティ要件が適切に定義されているか
- [ ] 認証・認可・暗号化などが考慮されているか
- [ ] 機密情報の取り扱いが明記されているか

### 8. パフォーマンス（Performance）
- [ ] パフォーマンス要件が定義されているか
- [ ] レスポンスタイム、スループット、リソース使用量などが明示されているか

## 判定基準

### ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

**ブロッカー（BLOCKER）**: 次フェーズ（設計）に進めない重大な問題
- 品質ゲート（4つの必須要件）が満たされていない
- 機能要件が不明確で実装の方向性が定まらない
- 論理的な矛盾があり、このまま進めると手戻りが発生する
- Issue本文との重大な乖離がある

**改善提案（SUGGESTION）**: 次フェーズに進めるが、改善が望ましい事項
- 非機能要件の一部が不足している（将来追加可能）
- より良い表現方法や構成がある
- セキュリティ・パフォーマンス要件の詳細化が望ましい
- ドキュメント構造の改善余地がある

### 判定ルール

以下のいずれかの判定を返してください：

#### PASS（合格）
- 品質ゲート（4つの必須要件）をすべて満たしている
- ブロッカーが存在しない
- 軽微な改善提案のみ（typoレベル、または改善提案なし）

#### PASS_WITH_SUGGESTIONS（条件付き合格）
- 品質ゲート（4つの必須要件）をすべて満たしている
- ブロッカーは存在しないが、改善提案がある
- 次フェーズに進めるが、検討すべき改善点がある

#### FAIL（不合格）
- 品質ゲート（4つの必須要件）のいずれかが満たされていない
- ブロッカーが1つ以上存在する
- このまま次フェーズに進むと手戻りが発生するリスクが高い

## 出力形式

以下の形式でレビュー結果を記述してください：

```markdown
# 要件定義レビュー

## 品質ゲート評価

- [ ] 機能要件が明確に記載されている: [PASS/FAIL] - [理由]
- [ ] 受け入れ基準が定義されている: [PASS/FAIL] - [理由]
- [ ] スコープが明確である: [PASS/FAIL] - [理由]
- [ ] 論理的な矛盾がない: [PASS/FAIL] - [理由]

## 詳細レビュー

### 1. 具体性（Specificity）
[評価内容...]

### 2. 完全性（Completeness）
[評価内容...]

### 3. 検証可能性（Verifiability）
[評価内容...]

### 4. 整合性（Consistency）
[評価内容...]

### 5. 実現可能性（Feasibility）
[評価内容...]

### 6. 優先度（Priority）
[評価内容...]

### 7. セキュリティ（Security）
[評価内容...]

### 8. パフォーマンス（Performance）
[評価内容...]

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

[ブロッカーがある場合は箇条書きで記載、なければ「なし」]

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

[改善提案がある場合は箇条書きで記載、なければ「なし」]

## 総合評価

[総合的なフィードバック...]

---
**判定: PASS | PASS_WITH_SUGGESTIONS | FAIL**
```

**重要**: 最終行に必ず「**判定: PASS**」「**判定: PASS_WITH_SUGGESTIONS**」「**判定: FAIL**」のいずれかを記載してください。

## レビュー実施時の注意事項

1. **品質ゲートを最優先**: 4つの必須要件が満たされているかを最初に確認
2. **ブロッカーと改善提案を明確に分離**: 混同しないように注意
3. **80点で十分の原則**: 完璧を求めすぎず、プロジェクトを前進させられる品質を目指す
4. **建設的なフィードバック**: 問題指摘だけでなく、具体的な改善方法を提示
5. **実装可能性を重視**: 理論的完璧性よりも、実装可能性とビジネス価値を優先

## 参考情報

必要に応じて以下を参照してください：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- 関連する@CONTRIBUTION.md - 開発ガイドライン

## 必須アクション

**レビュー完了後、必ず最終行に「**判定: PASS**」「**判定: PASS_WITH_SUGGESTIONS**」「**判定: FAIL**」のいずれかを明記してください。判定の明記は必須です。**

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
