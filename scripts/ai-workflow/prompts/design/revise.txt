# 詳細設計フェーズ - 修正プロンプト

## タスク概要
レビューで指摘された問題を修正し、改善された設計書を作成してください。

## 元の成果物
{design_document_path}

## レビュー結果
{review_feedback}

## 参考情報

### 要件定義書
{requirements_document_path}

### GitHub Issue情報
{issue_info}

## 修正指示

### ブロッカー（BLOCKER）の解消

レビュー結果の「ブロッカー」セクションに記載された問題は、**次フェーズに進めない重大な問題**です。これらを必ず解消してください。

**ブロッカーの典型例**:
- 3つの戦略判断（実装・テスト・テストコード）が欠落 → 追加する
- 判断根拠が不十分 → 具体的かつ論理的に補強する
- ファイルリストが未記載 → リストアップする
- 設計が実装不可能 → 実装可能な設計に修正する
- 重大なセキュリティリスク → 対策を追加する

### 改善提案（SUGGESTION）の検討

レビュー結果の「改善提案」セクションに記載された項目は、可能な範囲で反映してください。

**改善提案の優先度**:
1. 設計の品質を大きく向上させる提案 → 優先的に反映
2. ドキュメントの充実（図表追加等） → 可能であれば反映
3. 細かい表現の改善 → 時間があれば反映

## 品質ゲート（Phase 2）

修正後の設計書は、以下の品質ゲートをすべて満たす必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## 修正方針

### 1. ブロッカー対応（最優先）

レビューで指摘されたブロッカーを1つずつ解消してください。

**対応方法**:
- 元の設計書を読み込む
- ブロッカー指摘箇所を特定
- 指摘内容を理解し、適切に修正
- 修正後、ブロッカーが解消されたか確認

### 2. 改善提案の反映（推奨）

可能な範囲で、レビューの改善提案を反映してください。

**対応方法**:
- 改善提案を読み込む
- 実装可能かつ効果的な提案を選択
- 元の設計書に追記・修正
- 全体の整合性を確認

### 3. 元の成果物の尊重

レビューで問題がなかった部分は、基本的に変更しないでください。

**注意点**:
- ブロッカー解消に必要な修正のみ実施
- 不必要な変更は避ける
- 元の設計の良い部分は維持する

## 修正後の確認事項

修正完了後、以下を確認してください：

1. **ブロッカーが解消されたか**
   - レビューで指摘されたすべてのブロッカーに対応したか
   - 対応内容が適切か

2. **品質ゲートを満たしているか**
   - 5つの品質ゲートすべてをクリアしているか

3. **全体の整合性**
   - 修正によって新たな矛盾が生まれていないか
   - ドキュメント全体が一貫しているか

4. **実装可能性**
   - 修正後の設計が実装可能か
   - 次フェーズ（テストシナリオ）に進めるか

## 出力形式

修正した設計書を `.ai-workflow/issue-{issue_number}/design.md` として保存してください。

**上書き形式**で保存してください（元のファイルを置き換え）。

## 修正開始

上記を踏まえ、レビュー指摘事項を反映した改善版の設計書を作成してください。
