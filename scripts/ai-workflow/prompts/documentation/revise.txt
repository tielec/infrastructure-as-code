# ドキュメント更新フェーズ - 修正プロンプト

## タスク概要
レビューで指摘された問題を修正し、ドキュメント更新を改善してください。

## レビュー結果
{review_feedback}

## 参考情報

### 現在の更新ログ
{documentation_update_log_path}

### 各フェーズ成果物
- Phase 1: {requirements_document_path}
- Phase 2: {design_document_path}
- Phase 3: {test_scenario_document_path}
- Phase 4: {implementation_document_path}
- Phase 5: {test_result_document_path}

## 修正指示

### ブロッカー（BLOCKER）の解消

レビュー結果の「ブロッカー」セクションに記載された問題は、**次フェーズに進めない重大な問題**です。

**対応必須**:
- ドキュメント探索の不足 → 再探索して更新ログに追加
- 重要なドキュメントの更新漏れ → 該当ドキュメントを更新
- 更新内容の誤り → 修正
- スタイル破壊 → 既存スタイルに合わせて修正
- 更新ログの不足 → 詳細化

### 改善提案（SUGGESTION）への対応

レビュー結果の「改善提案」セクションに記載された事項は、より良いドキュメント更新にするための提案です。

**対応推奨**（すべて対応する必要はない）:
- 追加のドキュメント更新
- 説明の詳細化
- フォーマットの改善
- 更新ログの表現改善

## 修正方針

### 1. ドキュメント探索の徹底

以下の場所を再確認してください：

- プロジェクトルート直下の.mdファイル
- サブディレクトリ内の.mdファイル（.ai-workflowディレクトリは除く）
- docsディレクトリ（存在する場合）

### 2. 更新判断の見直し

各ドキュメントについて、再度以下の質問に答えてください：

1. **このドキュメントの読者は、今回の変更を知る必要があるか？**
2. **知らないと、読者が困るか？誤解するか？**
3. **ドキュメントの内容が古くなっていないか？**

→ **1つでもYesなら、更新対象**

### 3. 更新内容の改善

既存のスタイル・フォーマットを維持しながら：

- 変更内容を簡潔に記載
- 正確な情報を記載（Phase 2, 4と整合）
- ユーザー視点で有用な情報に絞る

### 4. 更新ログの改善

documentation-update-log.mdに以下を記載：

```markdown
# プロジェクトドキュメント更新ログ

## 調査したドキュメント

（全ての.mdファイルを相対パスでリストアップ）
- `相対パス1`
- `相対パス2`
- ...

## 更新したドキュメント

### `相対パス`
**更新理由**: （1行で説明）

**主な変更内容**:
- （変更点1）
- （変更点2）
- ...

## 更新不要と判断したドキュメント

- `相対パス`: 理由（1行）
- ...
```

## 修正後の確認事項

修正完了後、以下を確認してください：

1. **ブロッカーが解消されたか**
   - レビューで指摘されたすべてのブロッカーに対応したか

2. **品質ゲートを満たしているか**
   - [ ] 影響を受けるドキュメントが特定されている
   - [ ] 必要なドキュメントが更新されている
   - [ ] 更新内容が記録されている

3. **ユーザーが困らないか**
   - このドキュメント更新で、ユーザーが必要な情報を得られるか

## ドキュメント更新

1. 修正が必要なプロジェクトドキュメントを直接更新
2. 更新ログを `.ai-workflow/issue-{issue_number}/06_documentation/output/documentation-update-log.md` として**上書き保存**

## 修正開始

上記を踏まえ、レビュー指摘事項に対応してドキュメント更新を改善してください。
