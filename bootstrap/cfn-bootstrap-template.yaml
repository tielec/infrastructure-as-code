AWSTemplateFormatVersion: '2010-09-09'
Description: 'Bootstrap EC2 Instance with minimal setup (Git and Ansible only) and Pulumi Backend S3 Bucket - Fixed for Jenkins Agent'

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t4g.small
    AllowedValues:
      - t4g.small
      - t4g.medium
      - t4g.large
    ConstraintDescription: Must be a valid EC2 instance type.

  AllowedIP:
    Description: The IP address range that can be used to SSH to the EC2 instance
    Type: String
    Default: 0.0.0.0/0
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  LatestAmiId:
    Description: Latest Amazon Linux 2 ARM64 AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2

Resources:
  # S3 Bucket for Pulumi Backend
  PulumiStateBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'pulumi-state-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 90
      Tags:
        - Key: Name
          Value: Pulumi-State-Bucket
        - Key: Purpose
          Value: Pulumi-Backend

  # S3 Bucket Policy - Simplified to use IAM Role directly
  PulumiStateBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PulumiStateBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Allow Bootstrap IAM Role to access Pulumi state
          - Sid: AllowBootstrapRolePulumiAccess
            Effect: Allow
            Principal:
              AWS: !GetAtt BootstrapIAMRole.Arn
            Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:PutObject'
              - 's3:DeleteObject'
              - 's3:ListBucket'
              - 's3:ListBucketVersions'
              - 's3:GetBucketLocation'
              - 's3:GetBucketVersioning'
            Resource:
              - !Sub '${PulumiStateBucket.Arn}'
              - !Sub '${PulumiStateBucket.Arn}/*'
          # Deny insecure transport
          - Sid: DenyInsecureTransport
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub '${PulumiStateBucket.Arn}'
              - !Sub '${PulumiStateBucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Bootstrap-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Bootstrap-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Bootstrap-Public-Subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Bootstrap-Public-RT

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  BootstrapSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and Jenkins agent connectivity
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedIP
        # Jenkins JNLP port (if needed)
        - IpProtocol: tcp
          FromPort: 50000
          ToPort: 50000
          CidrIp: !Ref AllowedIP
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Bootstrap-SG

  # S3 Access Policy for Pulumi State Bucket
  PulumiS3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PulumiS3Access
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:PutObject'
              - 's3:DeleteObject'
              - 's3:ListBucket'
              - 's3:ListBucketVersions'
              - 's3:GetBucketLocation'
              - 's3:GetBucketVersioning'
            Resource:
              - !Sub '${PulumiStateBucket.Arn}'
              - !Sub '${PulumiStateBucket.Arn}/*'
      Roles:
        - !Ref BootstrapIAMRole

  BootstrapIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-BootstrapIAMRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Tags:
        - Key: Name
          Value: Bootstrap-IAM-Role
        - Key: Purpose
          Value: Jenkins-Agent

  BootstrapInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref BootstrapIAMRole

  BootstrapInstance:
    Type: AWS::EC2::Instance
    DependsOn: 
      - PulumiStateBucketPolicy
      - PulumiS3AccessPolicy
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref BootstrapSecurityGroup
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref BootstrapInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          
          # システムの更新
          yum update -y
          yum install -y git python3 python3-pip jq
          
          # Ansibleのインストール
          pip3 install ansible
          
          # SSMエージェントのインストールと起動（リモート管理用）
          yum install -y amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          
          # Pulumiのインストール
          curl -fsSL https://get.pulumi.com | sh
          echo 'export PATH=$PATH:$HOME/.pulumi/bin' >> /home/ec2-user/.bashrc
          
          # Jenkins用Java（OpenJDK）のインストール
          yum install -y java-11-amazon-corretto-headless
          
          # AWS CLIの設定（インスタンスロールを使用）
          echo 'export AWS_DEFAULT_REGION=${AWS::Region}' >> /home/ec2-user/.bashrc
          
          # セットアップガイドの作成
          cat > /home/ec2-user/SETUP_GUIDE.txt << 'EOF'
          === Bootstrap Environment Setup Guide ===
          
          This EC2 instance has been configured with the minimum required tools.
          To complete the setup, follow these two simple steps:
          
          1. Clone your Git repository:
             git clone <YOUR_REPOSITORY_URL> && cd <YOUR_REPOSITORY_DIRECTORY>
          
          2. Run the bootstrap setup script:
             ./scripts/setup-bootstrap.sh
          
          === Pulumi Backend Configuration ===
          
          A Pulumi state backend S3 bucket has been created for you:
          Bucket Name: ${PulumiStateBucket}
          
          To configure Pulumi to use this backend, run:
          pulumi login s3://${PulumiStateBucket}
          
          The bucket has the following features enabled:
          - Versioning (for state history)
          - Encryption (AES256)
          - Public access blocking
          - Lifecycle policy (90 days retention for old versions)
          
          === Jenkins Agent Configuration ===
          
          This instance is configured to work as a Jenkins agent with:
          - Java 11 (Corretto) installed
          - SSH access enabled
          - SSM Agent for remote management
          - Full access to the Pulumi state S3 bucket
          
          Note: The Bootstrap IAM role has AdministratorAccess plus explicit permissions to the Pulumi state bucket.
          
          === Testing S3 Access ===
          
          To verify S3 bucket access, run:
          aws s3 ls s3://${PulumiStateBucket}/
          
          That's it! The setup script will install all necessary tools and configure your environment.
          EOF
          
          chown ec2-user:ec2-user /home/ec2-user/SETUP_GUIDE.txt
          
          # S3アクセステストスクリプトの作成
          cat > /home/ec2-user/test-s3-access.sh << 'EOF'
          #!/bin/bash
          echo "Testing S3 bucket access..."
          BUCKET_NAME="${PulumiStateBucket}"
          
          echo "1. Listing bucket contents:"
          aws s3 ls s3://$BUCKET_NAME/ 2>&1
          
          echo -e "\n2. Testing write access:"
          echo "test" > /tmp/test-file.txt
          aws s3 cp /tmp/test-file.txt s3://$BUCKET_NAME/test-file.txt 2>&1
          
          echo -e "\n3. Testing read access:"
          aws s3 cp s3://$BUCKET_NAME/test-file.txt /tmp/test-file-downloaded.txt 2>&1
          
          echo -e "\n4. Cleaning up test file:"
          aws s3 rm s3://$BUCKET_NAME/test-file.txt 2>&1
          
          echo -e "\nS3 access test completed!"
          EOF
          
          chmod +x /home/ec2-user/test-s3-access.sh
          chown ec2-user:ec2-user /home/ec2-user/test-s3-access.sh
          
          # 起動時にセットアップガイドを表示
          echo "if [ -t 1 ]; then" >> /home/ec2-user/.bashrc
          echo "cat /home/ec2-user/SETUP_GUIDE.txt" >> /home/ec2-user/.bashrc
          echo "fi" >> /home/ec2-user/.bashrc
          
          echo "Bootstrap minimal setup complete!"

      Tags:
        - Key: Name
          Value: Bootstrap-Jenkins-Agent
        - Key: Purpose
          Value: Jenkins-Agent

Outputs:
  BootstrapInstanceId:
    Description: ID of the bootstrap EC2 instance
    Value: !Ref BootstrapInstance

  BootstrapPublicIP:
    Description: Public IP address of the bootstrap EC2 instance
    Value: !GetAtt BootstrapInstance.PublicIp

  BootstrapPublicDnsName:
    Description: Public DNS name of the bootstrap EC2 instance
    Value: !GetAtt BootstrapInstance.PublicDnsName

  VPCID:
    Description: VPC ID
    Value: !Ref VPC

  PublicSubnetID:
    Description: Public Subnet ID
    Value: !Ref PublicSubnet

  PulumiStateBucketName:
    Description: Name of the S3 bucket for Pulumi state storage
    Value: !Ref PulumiStateBucket
    Export:
      Name: !Sub '${AWS::StackName}-PulumiStateBucket'

  PulumiBackendURL:
    Description: Pulumi backend URL for login
    Value: !Sub 's3://${PulumiStateBucket}'
  
  BootstrapIAMRoleArn:
    Description: ARN of the Bootstrap IAM Role
    Value: !GetAtt BootstrapIAMRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-BootstrapIAMRoleArn'
  
  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub 'ssh -i <your-key.pem> ec2-user@${BootstrapInstance.PublicIp}'
  
  TestS3AccessCommand:
    Description: Command to test S3 bucket access
    Value: './test-s3-access.sh'
