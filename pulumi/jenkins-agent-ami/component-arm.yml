name: JenkinsAgentSetup-arm64
description: Install and configure Jenkins Agent dependencies for ARM64
schemaVersion: 1.0

phases:
  - name: build
    steps:
      - name: UpdateSystem
        action: ExecuteBash
        inputs:
          commands:
            - echo "Starting Jenkins Agent setup for ARM64"
            - dnf update -y

      - name: InstallBasicPackages
        action: ExecuteBash
        inputs:
          commands:
            - dnf install -y git jq wget tar gzip unzip which
            - dnf install -y amazon-ssm-agent

      - name: InstallDocker
        action: ExecuteBash
        inputs:
          commands:
            - dnf install -y docker
            - systemctl enable docker
            - groupadd -f docker
            - chmod 666 /var/run/docker.sock || true

      - name: InstallJava
        action: ExecuteBash
        inputs:
          commands:
            - dnf install -y java-21-amazon-corretto
            - java -version

      - name: InstallBuildTools
        action: ExecuteBash
        inputs:
          commands:
            - dnf install -y gcc gcc-c++ make
            - dnf install -y python3 python3-pip
            - pip3 install --upgrade pip
            - pip3 install awscli

      - name: InstallNodeJS
        action: ExecuteBash
        inputs:
          commands:
            - curl -sL https://rpm.nodesource.com/setup_18.x | bash -
            - dnf install -y nodejs
            - npm install -g npm@latest
            - node --version
            - npm --version

      - name: InstallPulumi
        action: ExecuteBash
        inputs:
          commands:
            - echo "Installing Pulumi..."
            - curl -fsSL https://get.pulumi.com | sh -s -- --version latest
            - cp /root/.pulumi/bin/pulumi /usr/local/bin/
            - chmod 755 /usr/local/bin/pulumi
            - pulumi version

      - name: InstallAnsible
        action: ExecuteBash
        inputs:
          commands:
            - echo "Installing Ansible..."
            - pip3 install ansible ansible-core
            - ansible --version

      - name: InstallMitogen
        action: ExecuteBash
        inputs:
          commands:
            - echo "Installing Mitogen for Ansible..."
            - pip3 install mitogen
            - python3 -c "import ansible_mitogen" && echo "Mitogen installed successfully"

      - name: CreateJenkinsUser
        action: ExecuteBash
        inputs:
          commands:
            - useradd -m -d /home/jenkins -s /bin/bash jenkins || true
            - usermod -aG docker jenkins
            - newgrp docker || true
            - mkdir -p /home/jenkins/agent
            - mkdir -p /home/jenkins/.docker
            - chown -R jenkins:jenkins /home/jenkins
            - echo '{"group":"docker"}' > /etc/docker/daemon.json || true
            - chmod 666 /var/run/docker.sock || true

      - name: SetupSwap
        action: ExecuteBash
        inputs:
          commands:
            - dd if=/dev/zero of=/swapfile bs=1M count=2048
            - chmod 600 /swapfile
            - mkswap /swapfile
            - echo '/swapfile none swap sw 0 0' >> /etc/fstab

      - name: ConfigureTmp
        action: ExecuteBash
        inputs:
          commands:
            - echo 'tmpfs /tmp tmpfs defaults,noatime,size=2G 0 0' >> /etc/fstab

      - name: CleanupCache
        action: ExecuteBash
        inputs:
          commands:
            - dnf clean all
            - rm -rf /var/cache/dnf
            - rm -rf /tmp/*

  - name: validate
    steps:
      - name: ValidateInstallation
        action: ExecuteBash
        inputs:
          commands:
            - java -version
            - docker --version
            - git --version
            - node --version
            - npm --version
            - python3 --version
            - aws --version
            - pulumi version
            - ansible --version
            - python3 -c "import ansible_mitogen; print('Mitogen: OK')"