name: JenkinsAgentSetup-arm64
description: Install and configure Jenkins Agent dependencies for ARM64
schemaVersion: 1.0

phases:
  - name: build
    steps:
      - name: ExpandEBSVolume
        action: ExecuteBash
        inputs:
          commands:
            - echo "Expanding EBS volume to use full capacity..."
            - |
              # ルートデバイスの情報を取得
              ROOT_DEVICE=$(df / | tail -1 | awk '{print $1}')
              echo "Root device: $ROOT_DEVICE"
              
              # デバイス名からパーティション番号を取得
              if [[ "$ROOT_DEVICE" =~ nvme ]]; then
                  DEVICE_NAME=$(echo "$ROOT_DEVICE" | sed 's/p[0-9]*$//')
                  PARTITION_NUM=$(echo "$ROOT_DEVICE" | grep -o '[0-9]*$')
              else
                  DEVICE_NAME=$(echo "$ROOT_DEVICE" | sed 's/[0-9]*$//')
                  PARTITION_NUM=$(echo "$ROOT_DEVICE" | grep -o '[0-9]*$')
              fi
              
              # cloud-utils-growpartのインストール
              dnf install -y cloud-utils-growpart || yum install -y cloud-utils-growpart
              
              # パーティションの拡張
              growpart "$DEVICE_NAME" "$PARTITION_NUM" || echo "Partition might already be expanded"
              
              # ファイルシステムの拡張
              FS_TYPE=$(blkid -o value -s TYPE "$ROOT_DEVICE")
              if [[ "$FS_TYPE" =~ ext[234] ]]; then
                  resize2fs "$ROOT_DEVICE"
              elif [[ "$FS_TYPE" == "xfs" ]]; then
                  xfs_growfs -d /
              fi
              
              echo "Disk usage after expansion:"
              df -h /

      - name: UpdateSystem
        action: ExecuteBash
        inputs:
          commands:
            - echo "Starting Jenkins Agent setup for ARM64"
            - dnf update -y

      - name: InstallBasicPackages
        action: ExecuteBash
        inputs:
          commands:
            - dnf install -y git jq wget tar gzip unzip which
            - dnf install -y amazon-ssm-agent

      - name: InstallDocker
        action: ExecuteBash
        inputs:
          commands:
            - dnf install -y docker
            - systemctl enable docker
            - groupadd -f docker
            - chmod 666 /var/run/docker.sock || true

      - name: InstallJava
        action: ExecuteBash
        inputs:
          commands:
            - dnf install -y java-21-amazon-corretto
            - java -version

      - name: InstallBuildTools
        action: ExecuteBash
        inputs:
          commands:
            - dnf install -y gcc gcc-c++ make
            - dnf install -y python3 python3-pip
            - pip3 install --upgrade pip
            - pip3 install awscli

      - name: InstallNodeJS
        action: ExecuteBash
        inputs:
          commands:
            - curl -sL https://rpm.nodesource.com/setup_20.x | bash -
            - dnf install -y nodejs
            - node --version
            - npm --version
            - npm install -g npm@latest
            - npm install -g typescript
            - npm install -g ts-node

      - name: InstallPulumi
        action: ExecuteBash
        inputs:
          commands:
            - echo "Installing Pulumi..."
            - curl -fsSL https://get.pulumi.com | sh
            - echo "Finding pulumi binary..."
            - find / -name pulumi -type f 2>/dev/null | head -1 || true
            - |
              # Pulumiバイナリと言語プラグインをシステム全体で利用可能にする
              if [ -d "/.pulumi/bin" ]; then
                cp -r /.pulumi/bin/* /usr/local/bin/ || echo "Failed to copy from /.pulumi/bin"
              elif [ -d "/root/.pulumi/bin" ]; then
                cp -r /root/.pulumi/bin/* /usr/local/bin/ || echo "Failed to copy from /root/.pulumi/bin"
              elif [ -d "/home/ec2-user/.pulumi/bin" ]; then
                cp -r /home/ec2-user/.pulumi/bin/* /usr/local/bin/ || echo "Failed to copy from /home/ec2-user/.pulumi/bin"
              fi
            - chmod 755 /usr/local/bin/pulumi* || true
            - /usr/local/bin/pulumi version
            - |
              # Node.js言語プラグインを明示的にインストール
              /usr/local/bin/pulumi plugin install language nodejs || true
              # プラグインの確認
              /usr/local/bin/pulumi plugin ls

      - name: InstallAnsible
        action: ExecuteBash
        inputs:
          commands:
            - echo "Installing Ansible..."
            - pip3 install ansible ansible-core
            - ansible --version

      - name: InstallMitogen
        action: ExecuteBash
        inputs:
          commands:
            - echo "Installing Mitogen for Ansible..."
            - pip3 install mitogen
            - python3 -c "import ansible_mitogen" && echo "Mitogen installed successfully"

      - name: CreateJenkinsUser
        action: ExecuteBash
        inputs:
          commands:
            - useradd -m -d /home/jenkins -s /bin/bash jenkins || true
            - usermod -aG docker jenkins
            - newgrp docker || true
            - mkdir -p /home/jenkins/agent
            - mkdir -p /home/jenkins/.docker
            - mkdir -p /home/jenkins/.pulumi/plugins
            - |
              # Pulumiプラグインをjenkinsユーザーにもコピー
              if [ -d "/usr/local/bin" ]; then
                cp /usr/local/bin/pulumi* /home/jenkins/.pulumi/plugins/ 2>/dev/null || true
              fi
              # Pulumiバイナリへのシンボリックリンク作成
              ln -sf /usr/local/bin/pulumi /home/jenkins/.pulumi/bin/pulumi 2>/dev/null || true
              mkdir -p /home/jenkins/.pulumi/bin
            - chown -R jenkins:jenkins /home/jenkins
            - echo '{"group":"docker"}' > /etc/docker/daemon.json || true
            - chmod 666 /var/run/docker.sock || true
            - |
              # jenkinsユーザーの環境変数設定
              echo 'export PATH="/usr/local/bin:$PATH"' >> /home/jenkins/.bashrc
              echo 'export PULUMI_SKIP_UPDATE_CHECK=true' >> /home/jenkins/.bashrc

      - name: SetupSwap
        action: ExecuteBash
        inputs:
          commands:
            - dd if=/dev/zero of=/swapfile bs=1M count=2048
            - chmod 600 /swapfile
            - mkswap /swapfile
            - echo '/swapfile none swap sw 0 0' >> /etc/fstab

      - name: CleanupCache
        action: ExecuteBash
        inputs:
          commands:
            - dnf clean all
            - rm -rf /var/cache/dnf
            - rm -rf /tmp/*

  - name: validate
    steps:
      - name: ValidateInstallation
        action: ExecuteBash
        inputs:
          commands:
            - java -version
            - docker --version
            - git --version
            - node --version
            - npm --version
            - python3 --version
            - aws --version
            - pulumi version
            - ansible --version
            - echo "Checking Mitogen installation..."
            - python3 -m ansible_mitogen || echo "Mitogen module check completed"