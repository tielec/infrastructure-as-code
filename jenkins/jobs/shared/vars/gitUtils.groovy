#!/usr/bin/env groovy

import jp.co.tielec.git.GitClientBase
import jp.co.tielec.git.GitHubApiClient
import jp.co.tielec.git.GitHubPullRequest
import jp.co.tielec.git.GitHubSettings
import jp.co.tielec.git.GitOperationException

/**
 * Git操作に関するユーティリティ
 * このクラスはファサードとして動作し、内部実装クラスへの簡易アクセスを提供します
 */

// 内部インスタンス
@groovy.transform.Field 
private GitClientBase gitClient

@groovy.transform.Field 
private GitHubApiClient apiClient

@groovy.transform.Field 
private GitHubPullRequest prClient

@groovy.transform.Field 
private GitHubSettings settingsClient

/**
 * Gitクライアントの初期化
 */
private void initClients() {
    if (!gitClient) {
        gitClient = new GitClientBase(this)
    }
    if (!apiClient) {
        apiClient = new GitHubApiClient(this)
    }
    if (!prClient) {
        prClient = new GitHubPullRequest(this)
    }
    if (!settingsClient) {
        settingsClient = new GitHubSettings(this)
    }
}

/**
 * Gitの基本設定を行う
 * @param config 設定（オプション）
 *        - email: コミット用メールアドレス（デフォルト: 'tielec-dev-jenkins@tielec.net'）
 *        - username: コミット用ユーザー名（デフォルト: 'TIELEC Dev Jenkins'）
 */
def setupGit(Map config = [:]) {
    initClients()
    return gitClient.setupGit(config)
}

/**
 * GitHub認証ユーザーの情報を取得する
 * @param config 設定（オプション）
 *        - credentialsId: 認証情報ID（デフォルト: 'github-pat'）
 * @return 認証ユーザーの情報（login, id, name等）
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def getAuthenticatedUser(Map config = [:]) {
    initClients()
    return apiClient.getAuthenticatedUser(config)
}

/**
 * リポジトリをチェックアウトする
 * @param url リポジトリURL
 * @param branch ブランチ名
 * @param credentialsId 認証情報ID
 * @param config 設定（オプション）
 * @throws IllegalArgumentException 必須パラメータが不足している場合
 */
def checkoutRepository(String url, String branch, String credentialsId, Map config = [:]) {
    initClients()
    return gitClient.checkoutRepository(url, branch, credentialsId, config)
}

/**
 * PRの情報を取得する
 * @param prNumber PR番号
 * @param config 設定（オプション）
 *        - credentialsId: 認証情報ID（デフォルト: 'github-pat'）
 *        - repoOwner: リポジトリオーナー
 *        - repoName: リポジトリ名
 * @return PRの情報
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def getPullRequestInfo(int prNumber, Map config = [:]) {
    initClients()
    return prClient.getPullRequestInfo(prNumber, config)
}

/**
 * 最新のPull Requestを取得する
 * @param config 設定（オプション）
 *        - credentialsId: 認証情報ID（デフォルト: 'github-pat'）
 *        - repoOwner: リポジトリオーナー
 *        - repoName: リポジトリ名
 *        - state: PRの状態（デフォルト: 'open'）
 * @return 最新のPR情報
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def getLatestPullRequest(Map config = [:]) {
    initClients()
    return prClient.getLatestPullRequest(config)
}

/**
 * 最新のプルリクエスト情報を安全に取得する（例外をスローしない）
 * @param repoOwner リポジトリのオーナー
 * @param repoName リポジトリ名
 * @return 成功/失敗のステータスとデータを含むマップ
 */
def safeGetLatestPullRequest(String repoOwner, String repoName) {
    initClients()
    return prClient.safeGetLatestPullRequest(repoOwner, repoName)
}

/**
 * マージ済みのPRを取得する
 * @param config 設定（オプション）
 * @return マージ済みPRのリスト
 * @throws IllegalArgumentException 必須パラメータが不足している場合
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def getMergedPullRequests(Map config = [:]) {
    initClients()
    return prClient.getMergedPullRequests(config)
}

/**
 * PR内の自動生成コメントを抽出する
 * @param prNumber PR番号
 * @param config 設定（オプション）
 * @return 自動生成コメントのリスト
 * @throws IllegalArgumentException 必須パラメータが不足している場合
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def extractAutoGeneratedComments(int prNumber, Map config = [:]) {
    initClients()
    return prClient.extractAutoGeneratedComments(prNumber, config)
}

/**
 * マージ済みPRから自動生成コメントをまとめて抽出する
 * @param config 設定（オプション）
 * @return PR情報とコメントの配列
 * @throws IllegalArgumentException 必須パラメータが不足している場合
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def extractCommentsFromMergedPRs(Map config = [:]) {
    initClients()
    return prClient.extractCommentsFromMergedPRs(config)
}

/**
 * 指定された日付範囲内でマージされたPRから自動生成コメントを抽出する
 * @param config 設定（オプション）
 * @return PR情報とコメントの配列
 * @throws IllegalArgumentException 必須パラメータが不足している場合
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def extractCommentsFromMergedPRsByDate(Map config = [:]) {
    initClients()
    return prClient.extractCommentsFromMergedPRsByDate(config)
}

/**
 * PRの差分情報を取得する
 * @param prNumber PR番号
 * @param config 設定（オプション）
 * @return 差分情報のリスト
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def getPullRequestDiff(int prNumber, Map config = [:]) {
    initClients()
    return prClient.getPullRequestDiff(prNumber, config)
}

/**
 * PRのファイル一覧を取得する
 * @param prNumber PR番号
 * @param config 設定（オプション）
 * @return ファイル名とステータスのリスト
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def getPullRequestFiles(def prNumberParam, String targetBranch = 'main', Map config = [:]) {
    initClients()
    return prClient.getPullRequestFiles(prNumberParam, targetBranch, config)
}

/**
 * PRにコメントを投稿する
 * @param prNumber PR番号
 * @param comment コメント内容
 * @param config 設定（オプション）
 * @return コメントの投稿結果
 * @throws IllegalArgumentException コメントが空の場合
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def createPullRequestComment(int prNumber, String comment, Map config = [:]) {
    initClients()
    return prClient.createPullRequestComment(prNumber, comment, config)
}

/**
 * PRの既存コメントを更新する
 * @param commentId コメントID（数値または文字列）
 * @param comment 新しいコメント内容
 * @param config 設定（オプション）
 * @return 更新結果
 * @throws IllegalArgumentException パラメータが不正な場合
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def updatePullRequestComment(def commentId, String comment, Map config = [:]) {
    initClients()
    return prClient.updatePullRequestComment(commentId, comment, config)
}

/**
 * PRのタイトルを更新する
 * @param prNumber PR番号
 * @param title 新しいタイトル
 * @param config 設定（オプション）
 * @return 更新結果
 * @throws IllegalArgumentException タイトルが空の場合
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def updatePullRequestTitle(int prNumber, String title, Map config = [:]) {
    initClients()
    return prClient.updatePullRequestTitle(prNumber, title, config)
}

/**
 * PRのコメント一覧を取得する
 * @param prNumber PR番号
 * @param config 設定（オプション）
 * @return コメント一覧
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def getPullRequestComments(int prNumber, Map config = [:]) {
    initClients()
    return prClient.getPullRequestComments(prNumber, config)
}

/**
 * 特定のユーザーのPRコメントを検索する
 * @param prNumber PR番号
 * @param username 検索対象のユーザー名
 * @param config 設定（オプション）
 * @return 該当するコメントのリスト
 */
def findUserComment(int prNumber, String username, Map config = [:]) {
    initClients()
    return prClient.findUserComment(prNumber, username, config)
}

/**
 * PRコメントを更新または新規作成する
 * @param prNumber PR番号
 * @param comment コメント内容
 * @param username 更新対象のユーザー名（既存コメント検索用）
 * @param config 設定（オプション）
 * @return 更新または作成されたコメント
 */
def upsertPullRequestComment(int prNumber, String comment, String username, Map config = [:]) {
    initClients()
    return prClient.upsertPullRequestComment(prNumber, comment, username, config)
}

/**
 * GitHub Pull Requestを作成する
 * @param title PRのタイトル
 * @param body PRの本文
 * @param headBranch 変更を含むブランチ名
 * @param baseBranch マージ先のブランチ名
 * @param config 追加設定
 * @return 作成されたPRの情報
 * @throws IllegalArgumentException 必須パラメータが不足している場合
 * @throws GitOperationException PR作成に失敗した場合
 */
def createPullRequest(String title, String body, String headBranch, String baseBranch, Map config = [:]) {
    initClients()
    return prClient.createPullRequest(title, body, headBranch, baseBranch, config)
}

/**
 * 変更を新しいブランチにコミットしてプッシュする
 * @param branchName 作成するブランチ名
 * @param commitMessage コミットメッセージ
 * @param files コミット対象のファイルまたはディレクトリのリスト
 * @param config 追加設定
 * @throws IllegalArgumentException 必須パラメータが不足している場合
 * @throws GitOperationException Git操作に失敗した場合
 */
def commitAndPushChanges(String branchName, String commitMessage, def files, Map config = [:]) {
    initClients()
    return gitClient.commitAndPushChanges(branchName, commitMessage, files, config)
}

/**
 * 変更を新しいブランチにコミットしてプッシュする
 * @param branchName 作成するブランチ名
 * @param commitMessage コミットメッセージ
 * @param files コミット対象のファイルまたはディレクトリのリスト
 * @param credentialsId 認証情報ID
 * @param config 追加設定
 * @throws IllegalArgumentException 必須パラメータが不足している場合
 * @throws GitOperationException Git操作に失敗した場合
 */
def commitAndPushChanges(String branchName, String commitMessage, def files, String credentialsId, Map config = [:]) {
    initClients()
    return gitClient.commitAndPushChanges(branchName, commitMessage, files, credentialsId, config)
}

/**
 * リポジトリURLからオーナーとリポジトリ名を抽出する
 * @param repoUrl リポジトリURL
 * @return [リポジトリオーナー, リポジトリ名] の配列
 * @throws GitOperationException 抽出に失敗した場合
 */
def extractRepoInfo(String repoUrl) {
    initClients()
    return gitClient.extractRepoInfo(repoUrl)
}

/**
 * 現在のリポジトリからオーナーとリポジトリ名を取得する
 * @return [リポジトリオーナー, リポジトリ名] の配列
 * @throws GitOperationException 取得に失敗した場合
 */
def getCurrentRepoInfo() {
    initClients()
    return gitClient.getCurrentRepoInfo()
}

/**
 * GitHub API呼び出しの共通処理
 * @param url APIのエンドポイントURL
 * @param method HTTPメソッド（デフォルト: 'GET'）
 * @param body リクエストボディ（オプション）
 * @param config 設定（オプション）
 * @return APIレスポンス
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def callGitHubApi(String url, String method = 'GET', def body = null, Map config = [:]) {
    initClients()
    return apiClient.callGitHubApi(url, method, body, config)
}

/**
 * GitHub APIのレート制限情報を取得する
 * @param config 設定（オプション）
 *        - authType: 認証タイプ (GitHubApiClient.AuthType.PAT または GitHubApiClient.AuthType.GITHUB_APP)
 *        - credentialsId: 認証情報ID
 * @return レート制限情報
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def getRateLimit(Map config = [:]) {
    initClients()
    return apiClient.getRateLimit(config)
}

/**
 * GitHub Appのインストール情報を取得する
 * @param config 設定（オプション）
 *        - credentialsId: GitHub App認証情報ID (デフォルト: 'github-app-credentials')
 * @return アプリのインストール情報
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def getGitHubAppInstallations(Map config = [:]) {
    initClients()
    
    // 認証タイプをGitHub Appに設定
    def updatedConfig = [:] + config
    updatedConfig.authType = GitHubApiClient.AuthType.GITHUB_APP
    
    return apiClient.getGitHubAppInstallations(updatedConfig)
}

/**
 * Check Runを作成する
 * @param repoOwner リポジトリオーナー
 * @param repoName リポジトリ名
 * @param headSha コミットのSHA
 * @param checkName チェック名
 * @param status ステータス (queued, in_progress, completed)
 * @param conclusion 結論 (success, failure, neutral, cancelled, skipped, timed_out, or action_required)
 * @param config 設定（オプション）
 *        - credentialsId: GitHub App認証情報ID (デフォルト: 'github-app-credentials')
 *        - title: チェック出力のタイトル
 *        - summary: チェック出力の概要
 *        - text: チェック出力の詳細テキスト
 * @return 作成されたCheck Runの情報
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def createCheckRun(String repoOwner, String repoName, String headSha, String checkName, 
                  String status, String conclusion = null, Map config = [:]) {
    initClients()
    
    // 認証タイプをGitHub Appに設定
    def updatedConfig = [:] + config
    updatedConfig.authType = GitHubApiClient.AuthType.GITHUB_APP
    
    return apiClient.createCheckRun(repoOwner, repoName, headSha, checkName, status, conclusion, updatedConfig)
}

/**
 * 指定した認証方式でGitHub接続をテストする
 * @param config 設定（オプション）
 *        - authType: 認証タイプ (GitHubApiClient.AuthType.PAT または GitHubApiClient.AuthType.GITHUB_APP)
 *        - credentialsId: 認証情報ID (デフォルト: authTypeに応じて'github-pat'または'github-app-credentials')
 * @return テスト結果 (success: true/false, rate_limit: レート制限情報)
 */
def testGitHubConnection(Map config = [:]) {
    initClients()
    
    // デフォルトはPAT認証
    def authType = config.authType ?: GitHubApiClient.AuthType.PAT
    
    // configからauthTypeを削除して他のパラメータを渡す
    def updatedConfig = [:] + config
    updatedConfig.remove('authType')
    
    return apiClient.testGitHubConnection(authType, updatedConfig)
}

/**
 * PAT認証で接続をテストする
 * @param config 設定（オプション）
 *        - credentialsId: PAT認証情報ID (デフォルト: 'github-pat')
 * @return テスト結果 (success: true/false, rate_limit: レート制限情報)
 */
def testPATConnection(Map config = [:]) {
    initClients()
    return apiClient.testPATConnection(config)
}

/**
 * GitHub App接続をテストする（シンプル版 - レート制限情報の取得のみ）
 * @param config 設定（オプション）
 *        - credentialsId: GitHub App認証情報ID (デフォルト: 'github-app-credentials')
 * @return テスト結果 (success: true/false, rate_limit: レート制限情報)
 */
def testGitHubAppConnection(Map config = [:]) {
    initClients()
    
    // 認証タイプをGitHub Appに設定
    def updatedConfig = [:] + config
    updatedConfig.authType = GitHubApiClient.AuthType.GITHUB_APP
    
    return testGitHubConnection(updatedConfig)
}

/**
 * GitHub APIの認証タイプの列挙型を取得する（GitHubApiClient.AuthTypeへの参照）
 * @return 認証タイプの列挙型
 */
def getAuthType() {
    initClients()
    return GitHubApiClient.AuthType
}

// ==================== Webhook操作 ====================

/**
 * Webhookの一覧を取得する
 * @param config 設定（オプション）
 * @return Webhookの一覧
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def listWebhooks(Map config = [:]) {
    initClients()
    return settingsClient.listWebhooks(config)
}

/**
 * 特定のWebhookを取得する
 * @param hookId Webhook ID
 * @param config 設定（オプション）
 * @return Webhookの情報
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def getWebhook(def hookId, Map config = [:]) {
    initClients()
    return settingsClient.getWebhook(hookId, config)
}

/**
 * Webhookを作成する
 * @param url Webhook送信先URL
 * @param events 受信するイベントのリスト
 * @param config 設定（オプション）
 *        - active: Webhookの有効/無効（デフォルト: true）
 *        - contentType: コンテンツタイプ（デフォルト: 'json'）
 *        - sslVerify: SSL検証の有効/無効（デフォルト: true）
 *        - secret: Webhookシークレット（オプション）
 * @return 作成されたWebhookの情報
 * @throws IllegalArgumentException 必須パラメータが不足している場合
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def createWebhook(String url, List<String> events, Map config = [:]) {
    initClients()
    return settingsClient.createWebhook(url, events, config)
}

/**
 * Webhookを更新する
 * @param hookId Webhook ID
 * @param updates 更新内容
 *        - url: 新しいWebhook URL
 *        - events: 新しいイベントリスト
 *        - active: Webhookの有効/無効
 *        - contentType: コンテンツタイプ
 *        - sslVerify: SSL検証の有効/無効
 *        - secret: Webhookシークレット
 * @param config 設定（オプション）
 * @return 更新されたWebhookの情報
 * @throws IllegalArgumentException 必須パラメータが不足している場合
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def updateWebhook(def hookId, Map updates, Map config = [:]) {
    initClients()
    return settingsClient.updateWebhook(hookId, updates, config)
}

/**
 * Webhookを削除する
 * @param hookId Webhook ID
 * @param config 設定（オプション）
 * @return 削除結果
 * @throws IllegalArgumentException 必須パラメータが不足している場合
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def deleteWebhook(def hookId, Map config = [:]) {
    initClients()
    return settingsClient.deleteWebhook(hookId, config)
}

/**
 * Webhookをテストする（ping送信）
 * @param hookId Webhook ID
 * @param config 設定（オプション）
 * @return テスト結果
 * @throws IllegalArgumentException 必須パラメータが不足している場合
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def pingWebhook(def hookId, Map config = [:]) {
    initClients()
    return settingsClient.pingWebhook(hookId, config)
}

/**
 * 複数のWebhookを一括作成する
 * @param webhookConfigs Webhook設定のリスト
 *        各要素は以下の形式:
 *        - url: Webhook URL
 *        - events: イベントリスト
 *        - config: 追加設定（オプション）
 * @param config 設定（オプション）
 * @return 作成結果のリスト
 */
def batchCreateWebhooks(List<Map> webhookConfigs, Map config = [:]) {
    initClients()
    return settingsClient.batchCreateWebhooks(webhookConfigs, config)
}

// ==================== Deploy Key操作 ====================

/**
 * Deploy Keyの一覧を取得する
 * @param config 設定（オプション）
 * @return Deploy Keyの一覧
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def listDeployKeys(Map config = [:]) {
    initClients()
    return settingsClient.listDeployKeys(config)
}

/**
 * 特定のDeploy Keyを取得する
 * @param keyId Deploy Key ID
 * @param config 設定（オプション）
 * @return Deploy Keyの情報
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def getDeployKey(def keyId, Map config = [:]) {
    initClients()
    return settingsClient.getDeployKey(keyId, config)
}

/**
 * Deploy Keyを作成する
 * @param title Deploy Keyのタイトル
 * @param key SSH公開鍵
 * @param readOnly 読み取り専用かどうか（デフォルト: true）
 * @param config 設定（オプション）
 * @return 作成されたDeploy Keyの情報
 * @throws IllegalArgumentException 必須パラメータが不足している場合
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def createDeployKey(String title, String key, boolean readOnly = true, Map config = [:]) {
    initClients()
    return settingsClient.createDeployKey(title, key, readOnly, config)
}

/**
 * Deploy Keyを削除する
 * @param keyId Deploy Key ID
 * @param config 設定（オプション）
 * @return 削除結果
 * @throws IllegalArgumentException 必須パラメータが不足している場合
 * @throws GitOperationException API呼び出しに失敗した場合
 */
def deleteDeployKey(def keyId, Map config = [:]) {
    initClients()
    return settingsClient.deleteDeployKey(keyId, config)
}

/**
 * 複数のDeploy Keyを一括作成する
 * @param keyConfigs Deploy Key設定のリスト
 *        各要素は以下の形式:
 *        - title: Deploy Keyのタイトル
 *        - key: SSH公開鍵
 *        - readOnly: 読み取り専用かどうか（オプション、デフォルト: true）
 * @param config 設定（オプション）
 * @return 作成結果のリスト
 */
def batchCreateDeployKeys(List<Map> keyConfigs, Map config = [:]) {
    initClients()
    return settingsClient.batchCreateDeployKeys(keyConfigs, config)
}

/**
 * タイトルでDeploy Keyを検索する
 * @param title 検索するタイトル
 * @param config 設定（オプション）
 * @return マッチするDeploy Keyのリスト
 */
def findDeployKeysByTitle(String title, Map config = [:]) {
    initClients()
    return settingsClient.findDeployKeysByTitle(title, config)
}
