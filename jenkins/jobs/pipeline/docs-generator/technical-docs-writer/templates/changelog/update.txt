# 変更履歴セクション更新

以下の情報に基づいて、プロジェクトの変更履歴セクションを更新してください。

## リポジトリ情報
- リポジトリ: {repository}
- PR番号: {pr_number}
- PRタイトル: {pr_title}
- 作成者: {pr_author}
- マージ日時: {merged_at}

## PRコメント内容
```
{pr_comment}
```

## 現在の変更履歴セクション
```markdown
{current_content}
```

## 既存のエントリ
```
{existing_entries}
```

## 変更ファイル情報
```
{changed_files}
```

## 日付時刻のフォーマットについて - 重要

**マージ日時は必ず「YYYY/MM/DD HH:MM」形式で表示してください。**

- 新しいエントリのマージ日時は「マージ日時: {merged_at}」から取得してください
- 「{merged_at}」の形式は「2024/11/07 15:32:06 (JST)」のようになっていますが、出力には秒と時間帯を除いた「2024/11/07 15:32」形式にしてください
- 未来の日付は絶対に使用しないでください
- 日付を手動で入力しないでください、必ず「{merged_at}」から取得した値を使用してください

## 変更履歴管理の方針

変更履歴は以下の方針で管理してください：

1. **最新10件の維持**
   - 最新の10件（新規エントリを含む）のみをテーブルに表示
   - マージ日時の新しい順に並べる

2. **古いエントリの要約**
   - **実際に11件以上存在する場合のみ**要約を実施
   - 既存エントリが10件以下の場合は要約エントリを作成しない
   - 要約エントリが既に存在する場合は、既存の要約を維持または更新
   - 要約エントリはテーブルの最下部に配置
   - 要約エントリのマージ日時は最も古いエントリの日付を使用

3. **要約の具体的な作成方法**
   - 実際に11件目以降になるエントリの内容を分析する
   - 「過去の変更履歴」の形式で始める
   - 重要な機能追加、変更、修正を具体的に箇条書きまたはカンマ区切りで列挙
   - 例：「過去の変更履歴: 初期設定機能の実装、API連携機能の強化、UI改善、バグ修正」
   - 架空の例は使わず、実際の古いエントリの内容を要約する

## 更新の観点

1. **新しいエントリの追加**
   - 最新の変更を変更履歴テーブルの最上部に追加
   - マージ日時は「{merged_at}」から取得した値を「YYYY/MM/DD HH:MM」形式で使用
   - PRの作成者とPR番号を記録

2. **古いエントリの管理**
   - 新規エントリ追加後の総件数を確認
   - **11件以上になる場合のみ**、最も古いエントリを要約対象にする
   - **10件以下の場合は既存のエントリをすべて維持し、要約は作成しない**
   - 要約エントリが不適切に存在する場合は削除する

3. **変更内容の適切な記述**
   - 特徴的な変更点を簡潔に説明
   - 技術的に正確な表現を使用
   - 影響範囲や重要性を示唆
   - ユーザー視点での変更価値を表現

## PR番号の扱いについて

- PR番号は連続した番号である必要はない（歯抜けや前後する場合がある）
- マージされずにクローズされたPRは履歴に含まれない
- マージされた順番によってPR番号が前後することは正常
- 各エントリには実際のPR番号をそのまま記録する

## 出力の要件

- 更新された変更履歴セクション全体をMarkdownで出力
- 見出しは「# 変更履歴」で始める
- テーブル形式を維持
- マージ日時の新しい順に並べる（最新のエントリがテーブルの最上部）
- 新しいエントリのマージ日時は「YYYY/MM/DD HH:MM」形式で統一
- PR番号は「#」を付けて表示（例：#123）
- **実際に11件以上存在する場合のみ要約エントリを作成**
- **10件以下の場合は全てのエントリを個別に表示**
- 要約エントリのPR番号は範囲表示（例：#1-10）

更新はPRコメントと変更概要に基づき、過度な推測は避けてください。変更内容は具体的かつ簡潔に、技術的に正確な表現で記述してください。
