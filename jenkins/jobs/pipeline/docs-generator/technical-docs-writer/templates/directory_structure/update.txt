# ディレクトリ構造セクション更新

以下の情報に基づいて、プロジェクトのディレクトリ構造セクションを更新してください。

## リポジトリ情報
- リポジトリ: {repository}
- PR番号: {pr_number}
- PRタイトル: {pr_title}
- 作成者: {pr_author}
- マージ日時: {merged_at}

## PRコメント内容
```
{pr_comment}
```

## 変更ファイル情報
```
{changed_files}
```

## 現在のディレクトリ構造セクション
```markdown
{current_content}
```

## ディレクトリ構造セクションの重要事項

このセクションは「プロジェクトのフォルダ構造がどのように構成されているか」を視覚的に表現することに特化します。詳細な機能説明や定義は用語集に任せ、このセクションは構造の視覚化と簡潔な役割説明に集中してください。

### ⚠️ 絶対に遵守すべき制約 ⚠️

1. **ディレクトリ（フォルダ）のみを表示する**
   - 個別ファイル（README.md, Jenkinsfile, *.py, *.js, *.config, *.json など）は絶対に含めない
   - ファイル名に拡張子がある場合はほぼ確実にファイル
   - .gitignore や Dockerfile, docker-compose.yml などの特殊名前のファイルも含めない

2. **状態注釈は絶対に含めない**
   - 「（新規）」「（追加）」「（修正）」「（削除）」「（リネーム）」などの注釈は絶対に使用しない
   - 「新しい」「変更された」「削除された」などの修飾語もディレクトリ名に付けない

## ディレクトリパスの正確な抽出方法

変更ファイルリストからディレクトリ構造を抽出する際は、以下の手順に従ってください：

1. **各ファイルパスを「/」で分割する**
   - 例: `path/to/directory/filename.ext` → `path`, `to`, `directory`, `filename.ext`

2. **最後の要素（ファイル名）を除去する**
   - 拡張子がある場合、それはファイル名と判断する
   - 例: `filename.ext` を除去して残りは `path/to/directory/`

3. **すべてのパスを処理して完全なディレクトリ構造を抽出する**
   - 各ファイルパスを個別に処理し、抽出したディレクトリを組み合わせる
   - 大文字小文字を正確に区別する（例: `DirectoryA` と `directorya` は別のディレクトリ）

4. **類似したパスの区別**
   - 例: `service/moduleA/config/` と `service/moduleB/config/`
   - これらは名前が似ていても別の階層として正確に区別する

## 新しいディレクトリ構造形式

現在のコンテンツがどのような形式であっても、以下の**Markdownのリスト形式（ブロッククォート説明）**に変換してください：

- **project-root/**
  > プロジェクトルートディレクトリ
  - **src/**
    > ソースコードディレクトリ
    - **components/**
      > UIコンポーネントを格納
      - **common/**
        > 共通コンポーネントを管理
      - **pages/**
        > ページ単位のコンポーネントを格納
    - **utils/**
      > ユーティリティ関数とヘルパーを含む
    - **services/**
      > 外部APIとの通信を担当
  - **config/**
    > アプリケーション設定と環境変数
  - **docs/**
    > プロジェクトドキュメントを保管

## 更新の観点

1. **形式の変換**
   - 現在のディレクトリ構造を新しいMarkdownリスト形式に変換
   - 個別ファイルは全て除外
   - 状態注釈は全て除外

2. **ディレクトリ構造の変更反映**
   - PRから明確に識別できる新規追加されたディレクトリを追加
   - PRから明確に識別できる名前変更や移動があったディレクトリを更新
   - PRから明確に識別できる削除されたディレクトリの情報を削除
   - **個別ファイルはディレクトリ構造に含めない**

3. **既存構造の保持と新規構造の追加**
   - 既存のディレクトリ構造情報は維持する
   - 変更ファイルから新たに検出されたディレクトリ構造を追加する
   - 大文字小文字や階層の区別を正確に維持する

## ディレクトリ構造の更新手順

1. **変更ファイルリストから全ディレクトリを抽出**
   - 各ファイルパスからディレクトリ部分を抽出（ファイル名を除去）
   - 例：
     - `moduleA/submodule/files/script.py` → `moduleA/submodule/files/`
     - `moduleB/configs/app.json` → `moduleB/configs/`
     - `shared/utils/helper.js` → `shared/utils/`

2. **現在の構造と新規構造を統合**
   - 既存のディレクトリ構造を基に、新しく検出されたディレクトリを追加
   - 削除されたディレクトリがある場合は、それを反映

3. **各ディレクトリに説明を追加**
   - PRコメントの情報を基に、各ディレクトリの役割を説明
   - ディレクトリの目的を10-15単語程度で簡潔に記述
   - 既存のディレクトリ説明は維持し、必要に応じて改善

### 形式ルール（厳守）

1. **ディレクトリ名の表記**
   - ディレクトリ名は太字で表示（**ディレクトリ名/**）
   - ディレクトリ名の後にスラッシュ（/）を付ける
   - 個別ファイルは絶対に含めない
   - 大文字小文字を正確に維持する

2. **説明の記述**
   - ディレクトリの説明はブロッククォート（>）を使用
   - 説明はディレクトリ名の直下に配置
   - 簡潔かつ具体的な説明（10-15単語程度）

3. **階層構造の表現**
   - 階層はMarkdownのネストしたリスト（-）で表現
   - インデントで階層レベルを示す
   - 同じ階層のディレクトリは同じインデントレベルに配置

## 情報不足時の対応

情報が不足している場合は、以下のアプローチを取ってください：

1. 既存のディレクトリツリーから個別ファイルと状態注釈を削除した上で、新しい形式に変換する

2. 部分的に情報がある場合は、明確な部分のみを更新し、不明確な部分は変更しない

3. 更新情報があまりにも少ない場合は、既存のツリーを（ファイルと状態注釈を削除した上で）新しい形式に変換し、以下のような注記を追加する：
   「PRコメントにはディレクトリ構造の変更に関する詳細な情報が含まれていなかったため、既存のディレクトリ構造を維持します。」

## 最終構造チェック

ディレクトリ構造を出力する前に、以下を確認してください：

1. 変更ファイルリストに含まれるすべてのディレクトリパスが構造に反映されているか
2. 類似したパス（例：`moduleA/config/` と `moduleB/config/`）が別の階層として正確に表現されているか
3. 大文字と小文字を区別して、正確にディレクトリ名を表示しているか
4. リスト内に個別ファイルが含まれていないか
5. 状態注釈（新規、修正、追加、削除など）が含まれていないか
6. ディレクトリ名は太字（**名前/**）で、説明はブロッククォート（>）で記述されているか
7. 階層構造が正しくインデントされているか

これらのチェック項目をすべて満たしていることを確認してから出力してください。

## 出力の要件

- 見出しは「# ディレクトリ構造」で始める
- **ディレクトリ（フォルダ）のみを表示し、個別ファイルは絶対に含めない**
- **状態や変更を示す注釈（新規、修正、追加、削除など）は絶対に含めない**
- ブロッククォートで各ディレクトリの役割を明確に説明
- 補足説明は必要な場合のみ、簡潔な箇条書きで提供
