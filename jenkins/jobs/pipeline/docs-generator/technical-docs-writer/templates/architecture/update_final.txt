# アーキテクチャ図セクション更新 - 最終生成段階

これまでの計画と自己対話に基づいて、C4モデルに基づく最終的な更新済みアーキテクチャ図セクションを作成してください。

## アーキテクチャ図セクション更新の要件

このセクションはC4モデルの3つのレベルを通じて、システムの構造と各コンポーネント間の関係性を**最新の状態**で示すことが目的です。

### 最重要指針

1. **C4モデルの階層構造に従った図表構成**
   - Level 1: システムコンテキスト図（利用者とシステム全体の関係）
   - Level 2: コンテナ図（アプリケーション、DB等の構成）
   - Level 3: コンポーネント図（各アプリケーション内の構造）
   - 確実な情報のみ更新

2. **図表主体の構成維持**
   - 内容の70%以上をC4モデルに基づくflowchartが占める
   - 各ダイアグラムの説明は1-2文程度
   - 構造と関係性にフォーカス

3. **C4モデルの表現一貫性**
   - レベル間での用語・表現の一貫性
   - 複数ダイアグラム間での整合性
   - 重要な追加/変更/削除が分かるように

## C4モデルに基づくMermaid flowchartの使用法

C4モデルの各レベルに合わせたflowchartを使用して、更新後の図を作成してください。

### Level 1: システムコンテキスト図

ポイント:
- 人物（ユーザー種別）は円形((名前))で統一
- システムは四角形[名前]で統一
- 外部システムは色を変えて区別
- 関係線には目的や理由を簡潔に記載

### Level 2: コンテナ図

ポイント:
- コンテナ（アプリケーション）は四角形[名前]で統一
- データベースはシリンダー形[(名前)]で統一
- ラベルには技術情報（言語、フレームワーク）を追加
- 関係線には通信プロトコルを記載

### Level 3: コンポーネント図

ポイント:
- 各コンポーネントの責任範囲をラベルに追加
- コンポーネント間のインターフェース情報を関係線に記載
- サブグラフを使ってコンテナ（アプリケーション）の境界を表現
- 一貫したスタイルで視覚的理解を促進

### 効果的な更新テクニック

1. **各C4レベルの適切な方向設定**
   - Level 1（コンテキスト図）: `TB` (上から下)
   - Level 2（コンテナ図）: `LR` (左から右)
   - Level 3（コンポーネント図）: 複雑さに応じて選択

2. **複雑さの管理**
   - 一つの図に詰め込みすぎず、必要に応じて分割
   - 論理的なまとまりごとに図を分ける
   - 概要図と詳細図を分けて表現

3. **表示の最適化**
   - ラベルテキストは簡潔に、必要な情報だけ表示
   - ノード間の距離を適切に (長い線は避ける)
   - ノード数は一つの図で10〜15個程度に抑える

## 出力の要件

- Markdown 形式で出力
- 「# システムアーキテクチャ図」で開始
- C4モデルの各レベルに対応した小見出し（##）を使用
  - ## Level 1: システムコンテキスト図
  - ## Level 2: コンテナ図
  - ## Level 3: コンポーネント図
- 各レベルの図には1-2文の簡潔な説明を付記
- Diagram は ```mermaid タグで囲む
- Mermaidコード内にコメント（%%）は使用しない
- Mermaid内の改行の表現は`</br>` を使用し、`\n`は使用しない
- 新要素や変更点はコメントではなく、本文テキストで説明する
- 情報が不足しているC4レベルは省略するか、基本的な内容のみ表示
- ラベルやテキストは簡潔にして可読性を確保
- スタイル定義は各図のmermaidコード内に含め、別のコードブロックとして出力しない
- 以下のカラースキームを使用して視認性を確保する:
  - 人物（ユーザー）: `fill:#08427B,stroke:#052E56,color:#fff`
  - システム: `fill:#1168BD,stroke:#0B4884,color:#fff`
  - 外部システム: `fill:#999999,stroke:#666666,color:#fff`
  - コンテナ: `fill:#85BBF0,stroke:#5D82A8,color:#000`
  - コンポーネント: `fill:#CCECFF,stroke:#5D82A8,color:#000`
  - データベース: `fill:#85BBF0,stroke:#5D82A8,color:#000,stroke-dasharray:5 5`
- スタイルの適用は以下のように行う:
  ```
  classDef person fill:#08427B,stroke:#052E56,color:#fff
  classDef system fill:#1168BD,stroke:#0B4884,color:#fff
  classDef external fill:#999999,stroke:#666666,color:#fff
  classDef container fill:#85BBF0,stroke:#5D82A8,color:#000
  classDef component fill:#CCECFF,stroke:#5D82A8,color:#000
  classDef database fill:#85BBF0,stroke:#5D82A8,color:#000,stroke-dasharray:5 5
  
  class User1,User2 person
  class System1,System2 system
  class External1,External2 external
  class Container1,Container2 container
  class Component1,Component2 component
  class DB1,DB2 database
  ```
- 上記スタイル定義はmermaidコードの末尾に含め、別のコードブロックとして出力しない

更新されたアーキテクチャ図が、**C4モデルに基づき最新の状態を正確に、かつ読みやすく表現**していることを重視してください。情報が不足している場合は、そのC4レベルを省略するか、基本的な概要のみを表示し、不確かな要素は図に含めないでください。
