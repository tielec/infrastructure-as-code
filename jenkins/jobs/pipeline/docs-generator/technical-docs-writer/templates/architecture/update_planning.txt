# アーキテクチャ図セクション更新 - 計画立案段階

以下の情報に基づいて、C4モデルに基づくシステムのアーキテクチャ図セクション更新計画を立ててください。

## 現在のアーキテクチャ図セクション
```markdown
{current_content}
```

## 前のセクションから抽出された構造化情報
```
{structured_info}
```

## 既存のダイアグラム
```
{existing_diagrams}
```

## アーキテクチャ図セクションの役割

このセクションでは、システム全体の構造と関係性をC4モデルの3つのレベルで**最新化**するための図を提示します。  
Mermaidのflowchartを使って、以下のC4モデルの階層構造を最新の状態で表現することを目指します：

1. **Level 1: システムコンテキスト図 (System Context Diagram)**  
   - システムと外部アクター（ユーザー、外部システム）との関係
   - エンジニア以外の人にも理解できる抽象度
   - 「誰が」「どのシステムを」「どのように使うか」を明確に
   - 技術的な詳細は含めない

2. **Level 2: コンテナ図 (Container Diagram)**  
   - システム内部を主要コンテナ（アプリケーション、DB等）に分解
   - 各コンテナ間でやり取りされる情報と通信方法
   - 各コンテナの技術選択（言語、フレームワーク等）

3. **Level 3: コンポーネント図 (Component Diagram)**  
   - 各コンテナ（アプリケーション）内の主要コンポーネント（モジュール）構造
   - コンポーネント間の依存関係と責任範囲
   - インターフェースと実装の区別

## Mermaidのflowchart記法について

- `flowchart TB`(上から下)、`flowchart LR`(左から右)などで方向を指定
- ノード: `id[ラベル]`、`id(ラベル)`、`id((ラベル))`、`id{ラベル}`など形状が選択可能
- サブグラフ: `subgraph タイトル ... end` で関連コンポーネントをグループ化
- 関係: `-->`, `---`, `-.->`, `==>`などの線や矢印で関係を表現
- スタイル: `style`、`classDef`で見た目をカスタマイズ
- 改行: `</br>` で改行 ※`\n`では改行が表現されないので利用しない

### C4モデルの各レベルの更新ポイント

- **Level 1（コンテキスト図）の更新**:
  - ユーザー種別や確実に存在する外部システムのみを含める
  - 「なぜ」その関係があるかの明確化
  - 円形((User))でユーザーを、四角形[System]でシステムを表現
  - 技術的な詳細や具体的なコンポーネントは含めない
  - 5-10個程度の要素に限定し、全体像を明確に

- **Level 2（コンテナ図）の更新**:
  - 確実に存在するコンテナ（アプリケーション、DB）のみを含める
  - 四角形[WebApp]でアプリケーション、シリンダー形[(Database)]でDBを表現
  - 通信プロトコルや技術情報は確実に確認できるもののみ記載

- **Level 3（コンポーネント図）の更新**:
  - 確実に存在するコンポーネント間の依存関係のみを含める
  - 責任範囲が明確に定義されているコンポーネントのみ表示
  - サブグラフを使った論理的なグループ化

## 計画立案のタスク

1. **更新のための情報分析**
   - 各C4レベルにおける現在の図と新情報の差分
   - 構造化情報から確実に確認できる要素のみをリストアップ
   - 推測や一般的な想定に基づく要素は絶対に含めない

2. **各C4レベルの更新必要箇所の特定**
   - **Level 1**: 構造化情報から明確に確認できるユーザー種別や外部システムの変更
   - **Level 2**: 構造化情報から明確に確認できるコンテナ構成や技術選択の変更
   - **Level 3**: 構造化情報から明確に確認できるコンポーネント構造や依存関係の変更

3. **取るべき更新アプローチの決定**
   - 各C4レベルごとに全体更新か部分的更新か
   - 新規ダイアグラムの追加有無
   - 情報不足のレベルは省略するか基本情報のみ表示

4. **実装コードとの整合性確認**
   - ソースコードや文書から確実に存在が確認できるコンポーネントのみを含める
   - 存在が確認できない要素は一切含めない
   - レベル3の詳細情報が不足している場合は該当部分を省略

## 出力形式

更新計画として、以下を含む形でまとめてください：

1. **C4各レベルの情報過不足を分析**
   - **Level 1**: コンテキスト図の正確な部分/更新が必要な部分
   - **Level 2**: コンテナ図の正確な部分/更新が必要な部分
   - **Level 3**: コンポーネント図の正確な部分/更新が必要な部分
   - 情報不足の場合の対応方針

2. **各C4レベルの更新範囲の特定**
   - どのレベルのどの図を更新するか
   - 各図での具体的な更新内容
   - 新規追加が必要な図

3. **取るべき更新アプローチの決定**
   - 各C4レベルでの修正/追加/削除の具体案
   - 情報不足の場合はそのレベルを省略
   - レイアウト維持 vs 再構築の判断

4. **実装コードとの整合性確認方法**
   - どのソース/モジュールを参照して確実性を高めるか
   - 情報不足の部分を特定する方法

## 極めて重要な制約

- 図には構造化情報から**明確に確認できる要素のみ**を含める
- 構造化情報に明示されていない要素は、推測や一般的な構成に基づいて追加しない
- 「〜かもしれない」「〜が一般的」という判断は避け、確実な情報のみに基づく
- 技術的な具体名（例：特定のデータベース製品名、API名、ツール名）は、構造化情報で明示されている場合のみ使用
- 情報が不足している場合は、その部分を「情報不足のため省略」と明記
- レベル1のコンテキスト図は5-10個程度の要素に限定し、主要なユーザーと外部システムのみを含める
- 特に「新しい〜」という表現は、それが構造化情報に明確に記載されている場合のみ使用

この制約に従うことで、事実に基づいた信頼性の高いアーキテクチャ図を作成してください。
