# アーキテクチャ図セクション新規作成

以下の情報に基づいて、システムのアーキテクチャ図セクションを新規作成してください。

## 前のセクションから抽出された構造化情報
```
{structured_info}
```

## アーキテクチャ図セクションの重要事項

このセクションは「システムがどのように構成されているか」を視覚的に表現することに特化します。詳細な定義や説明は用語集に任せ、このセクションは構造と関係性の視覚化に集中してください。

### 最重要指針

1. **情報の正確性を最優先**
   - **前のセクションから抽出された構造化情報を優先して使用する**
   - 不確かな情報に基づく推測は絶対に避ける
   - 情報が不十分な場合は、むしろダイアグラムを作成せず、情報不足を明示する

2. **図表主体の構成**
   - セクション内容の70%以上をダイアグラムが占めるようにする
   - 各ダイアグラムには1-2文の簡潔な説明のみを付ける
   - 各コンポーネントの説明は1行以内に制限

3. **詳細な定義は避ける**
   - コンポーネントの詳細な説明・定義は用語集セクションの役割
   - ここでは関係性とデータの流れを視覚化することに集中

## 作成すべきダイアグラム

構造化情報に基づいて、以下のダイアグラムのうち情報が十分なものだけを作成してください：

1. **システム概要図**（必須）
   - 主要コンポーネントとその関係性を示す図
   - 一目でシステム全体を把握できるよう、単純かつ明瞭に
   - 8個以内の主要コンポーネントに抑える

2. **アーキテクチャパターン図**（情報が十分な場合のみ）
   - 採用しているアーキテクチャパターンを視覚化
   - レイヤー間の依存関係と方向性を明示
   - 各レイヤーの主な役割を簡潔に示す

3. **物理的構成図**（インフラ情報が具体的にある場合のみ）
   - デプロイメント構成を示す図
   - インフラストラクチャコンポーネントの関係
   - 実行環境と配置の概念

## 図表作成のガイドライン

- 各図表の目的を1-2文で簡潔に説明
- コンポーネント名は構造化情報と一貫性を持たせる
- 矢印の方向と意味を明確に
- 関連性のある要素をサブグラフでグループ化
- カラーやスタイルは最小限に抑え、読みやすさを優先
- 各図の後に最小限の説明を追加（各要素1行程度）
- 詳細な機能説明は避け、構造と関係性の表現に集中

Mermaidを使用して以下のようなダイアグラムを作成してください。1つの図には最大で7個の主要コンポーネントに制限してください。

```mermaid
graph TD
    A["フロントエンド"] --> B["APIゲートウェイ"]
    B --> C["認証サービス"]
    B --> D["ビジネスロジック"]
    D --> E["データストア"]
```

Mermaid記法では、以下の点に厳密に従ってください：
- 空白、カッコ、ハイフンなどの特殊文字を含むテキストは必ず二重引用符で囲む
- 例: A["フロントエンド (React)"] の形式で必ず二重引用符を使用する
- 例: B["バックエンド (FastAPI)"] のように各単語の間の空白も引用符の対象となる
- ❌ A[フロントエンド (React)] → ✅ A["フロントエンド (React)"]

## 情報不足時の対応

アーキテクチャに関する情報が不足している場合は、以下のアプローチを取ってください：

1. 明確に情報不足を記載：
   「前のセクションから十分なアーキテクチャ情報を抽出できませんでした。現時点では基本的な構成要素のみを図示します。」

2. 最小限の構成要素のみで図を作成する（確実な情報のみ）

3. 情報があまりにも少ない場合は、図の作成を控え、代わりに：
   「提供された情報からシステムアーキテクチャを正確に図示するのに十分な詳細が得られませんでした。」
   と記載する

## 出力の要件

- Markdownフォーマットで作成
- 見出しは「# システムアーキテクチャ図」で始める
- 適切な小見出し（##）を使用して構造化
- 各ダイアグラムの前に1-2文の簡潔な説明
- 各ダイアグラムの後に要素ごとの簡潔な説明（1行程度）
- 長い説明文や詳細な定義は避ける（それらは用語集セクション向け）
- 全体で図表が占める割合を70%以上に

内容は前のセクションから抽出された構造化情報を優先的に使用し、過度な推測は避けてください。情報が不十分な項目は省略するか、明示的に情報不足であることを記載してください。
