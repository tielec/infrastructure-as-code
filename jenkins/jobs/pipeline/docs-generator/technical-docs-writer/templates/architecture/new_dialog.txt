# アーキテクチャ図セクション新規作成 - 自己対話段階

以下の情報と計画に基づいて、C4モデルに従ったシステムのアーキテクチャ図セクション作成のための自己対話を行ってください。

## 前のセクションから抽出された構造化情報
```
{structured_info}
```

## 自己対話のポイント

計画立案の結果に基づき、以下の観点でC4モデルの3つのレベルのアーキテクチャ構造を目指します：

1. **Level 1: システムコンテキスト図 (System Context Diagram)**
   - システムの利用者（ペルソナ）の特定と役割
   - システム全体の境界の明確化
   - 外部システムとの関係性
   - エンジニア以外にも理解できる抽象度での表現

2. **Level 2: コンテナ図 (Container Diagram)**
   - 明確に確認できる主要アプリケーション（コンテナ）の特定
   - データベースなど永続化層の分離
   - コンテナ間でやり取りされる情報とプロトコル
   - 各コンテナの技術選択（使用言語、フレームワーク等）

3. **Level 3: コンポーネント図 (Component Diagram)**
   - 各コンテナ内部の主要コンポーネント（モジュール）構造
   - コンポーネント間の依存関係と責任範囲
   - インターフェースと実装の区別
   - コンポーネントの凝集度と結合度

4. **情報不足への対応**
   - 情報不足の場合はそのC4レベルを省略
   - 不明確な部分は図に含めない
   - 十分な根拠がない要素は図に含めない

## Mermaid flowchartの活用方法

C4モデルの各レベルに適したflowchartの表現テクニックを活用します。

### Level 1: システムコンテキスト図の表現

- ユーザー/ペルソナを円形ノードで表現
- システムを四角形ノードで表現
- 外部システムを四角形（別色）で表現
- 関係線には利用目的や連携内容を記載

### Level 2: コンテナ図の表現

- システム境界内に各コンテナをサブグラフでグループ化
- Webアプリケーション、APIサーバーなどを四角形で表現
- データベースをシリンダー形で表現
- 関係線にはプロトコルや通信方式を記載
- 各コンテナには使用技術も記載

### Level 3: コンポーネント図の表現

- 選択したコンテナ内部をサブグラフで表現
- 各コンポーネント（モジュール）を四角形で表現
- コンポーネント間の依存関係を矢印で表現
- 関係線にはAPI呼び出しやメソッド情報を記載
- コンポーネントごとの責任範囲をラベルに記載

### レイアウトの工夫

1. **各C4レベルに適した方向設定**
   - **レベル1**: 主に `TB`(上下)で全体像を俯瞰 
   - **レベル2**: `LR`(左右)でコンテナ間のフローを表現
   - **レベル3**: 複雑な場合はサブグラフごとに方向を変えて表現

2. **複雑な関係の表現**
   - 同時に複数の矢印: `A --> B & C`
   - 複数から一つへの矢印: `A & B --> C`
   
3. **図の複雑さ管理**
   - 一つの図に表示する要素は10〜15個程度に抑える
   - コンポーネントが多数ある場合は代表的なものに絞る
   - 概要図と詳細図を分けて、全体像と詳細を両方表現
   
4. **C4モデルに特化した表現**
   - ユーザー/ペルソナは円形((User))で統一
   - システムやコンテナは四角形[System]で統一
   - データベースはシリンダー形[(Database)]で統一
   - 関係線には簡潔に技術情報やプロトコルを記載

## 自己対話の進め方

1. **Level 1: システムコンテキスト図の構築**
   - 誰がシステムを使うのか（ユーザー種別）
   - システムの主な目的は何か
   - 外部との連携システムは何か
   - それぞれの関係性は何か

2. **Level 2: コンテナ図の構築**
   - システムはどのようなアプリケーション群で構成されるか
   - データはどこに格納されるか
   - 各コンテナはどのような技術で実装されるか
   - コンテナ間でどのような通信が行われるか

3. **Level 3: コンポーネント図の構築**
   - 各コンテナ内の主要コンポーネントは何か
   - コンポーネント間の依存関係は何か
   - 責任範囲はどのように分担されているか
   - インターフェースはどのように定義されているか

4. **構文の正確さの確認**
   - Mermaidのflowchart構文に従っているか
   - ID・ラベルの制約を守っているか
   - C4モデルの表現が一貫しているか

## 出力形式

自己対話の結果として、以下の内容を整理してください：

1. **Level 1: システムコンテキスト図の分析**
   - 確認されたユーザー/ペルソナ
   - システムの境界
   - 外部システムとの連携
   - コンテキスト図の案

2. **Level 2: コンテナ図の分析**
   - 確認されたコンテナ（アプリケーション、DB等）
   - 技術選択と責任範囲
   - コンテナ間の通信方法
   - コンテナ図の案

3. **Level 3: コンポーネント図の分析**
   - 分析対象とするコンテナの選定
   - 確認されたコンポーネント構造
   - コンポーネント間の依存関係
   - コンポーネント図の案

4. **具体的なflowchartのコード案**
   - システムコンテキスト図（Level 1）
   - コンテナ図（Level 2）
   - コンポーネント図（Level 3、十分な情報がある場合のみ）
   - 要素の説明（事実に基づいたもののみ）

**重要**: 図には確実に検証された情報のみを含め、不明確な点や十分な情報がない部分は図に含めないでください。情報が不足している場合は、そのC4レベルの図を省略するか、非常に基本的な情報のみを表示してください。
