# アーキテクチャ図セクション新規作成 - 最終生成段階

これまでの計画と自己対話に基づいて、C4モデルに基づく最終的なアーキテクチャ図セクションを作成してください。

## アーキテクチャ図セクションの要件

このセクションは「システムがどのように構成されているか」をC4モデルの3つのレベルを通じて視覚的に表現することに特化します。

### 最重要指針

1. **C4モデルの階層構造に従った図表構成**
   - Level 1: システムコンテキスト図（利用者とシステム全体の関係）
   - Level 2: コンテナ図（アプリケーション、DB等の構成）
   - Level 3: コンポーネント図（各アプリケーション内の構造）
   - 各図には1-2文の簡潔な説明のみ付与

2. **事実に基づいた情報のみ表示**
   - 確実な情報のみを図に含める
   - 十分な情報がない場合はそのC4レベルの図を省略する
   - 事実と確認できないものは一切含めない

3. **C4モデルに適した視覚的表現**
   - ユーザー/ペルソナは円形で統一
   - システム/コンテナは四角形で統一
   - データベースはシリンダー形状で統一
   - 関係線には技術情報や通信方法を簡潔に記載

## Mermaid flowchartの使用法

すべてのアーキテクチャ図を、Mermaidのflowchart構文で記述してください。

### Level 1: システムコンテキスト図の作成

システム全体と外部との関係を表現します。

ポイント:
- 利用者（人物）は円形((名前))で表現
- システムは四角形[名前]で表現
- 外部システムも四角形だが色を変える
- 関係線には「なぜ」「何のために」その関係があるかを記載

### Level 2: コンテナ図の作成

システムを構成するアプリケーション、データベース等を表現します。

ポイント:
- コンテナ（アプリケーション）は四角形[名前]
- データベースはシリンダー形[(名前)]
- ラベルには技術情報（言語、フレームワーク）を追加
- 関係線には通信プロトコルを記載

### Level 3: コンポーネント図の作成

特定のコンテナ（アプリケーション）内部のコンポーネント構造を表現します。

ポイント:
- 主要コンポーネントのみを表示
- 各コンポーネントの責任範囲が分かるラベル
- コンポーネント間のインターフェース情報を関係線に記載

### レイアウトと可読性の確保

- **Level 1（コンテキスト図）**: `TB` (上から下) が望ましい
- **Level 2（コンテナ図）**: `LR` (左から右) でフローを表現
- **Level 3（コンポーネント図）**: 複雑さに応じて適切な方向を選択

- **複雑さの管理**
  - ノード数が多い場合は複数の図に分割
  - 一つの図に表示するノードは最大10〜15個程度に抑える
  - 重要でない詳細は省略して全体像を把握しやすく

- **サブグラフの効果的な使用**
  - 関連するコンポーネントをグループ化
  - サブグラフ内の方向を親と変えることで、スペースを効率的に使用

## 出力の要件

- Markdown 形式で作成
- 見出しは「# システムアーキテクチャ図」で開始
- レベルごとに適切な小見出し（##）を使用
  - ## Level 1: システムコンテキスト図
  - ## Level 2: コンテナ図
  - ## Level 3: コンポーネント図
- 各ダイアグラム前に1-2文の説明
- ダイアグラムは ```mermaid タグで囲む
- Mermaidコード内にコメント（%%）は使用しない
- Mermaid内の改行の表現は`</br>` を使用し、`\n`は使用しない
- 情報が不足している場合は、そのC4レベルの図を省略するか基本的な構造のみ表現
- 複雑な構造は複数の図に分割して表現
- ラベルテキストは簡潔にして可読性を確保
- スタイル定義は各図のmermaidコード内に含め、別のコードブロックとして出力しない
- 以下のカラースキームを使用して視認性を確保する:
  - 人物（ユーザー）: `fill:#08427B,stroke:#052E56,color:#fff`
  - システム: `fill:#1168BD,stroke:#0B4884,color:#fff`
  - 外部システム: `fill:#999999,stroke:#666666,color:#fff`
  - コンテナ: `fill:#85BBF0,stroke:#5D82A8,color:#000`
  - コンポーネント: `fill:#CCECFF,stroke:#5D82A8,color:#000`
  - データベース: `fill:#85BBF0,stroke:#5D82A8,color:#000,stroke-dasharray:5 5`
- スタイルの適用は以下のように行う:
  ```
  classDef person fill:#08427B,stroke:#052E56,color:#fff
  classDef system fill:#1168BD,stroke:#0B4884,color:#fff
  classDef external fill:#999999,stroke:#666666,color:#fff
  classDef container fill:#85BBF0,stroke:#5D82A8,color:#000
  classDef component fill:#CCECFF,stroke:#5D82A8,color:#000
  classDef database fill:#85BBF0,stroke:#5D82A8,color:#000,stroke-dasharray:5 5
  
  class User1,User2 person
  class System1,System2 system
  class External1,External2 external
  class Container1,Container2 container
  class Component1,Component2 component
  class DB1,DB2 database
  ```
- 上記スタイル定義はmermaidコードの末尾に含め、別のコードブロックとして出力しない

アーキテクチャ図はシステム全体像を把握するために重要です。**C4モデルに基づき、事実に基づいた論理的に整合の取れる flowchart** を目指してください。不十分な情報や明確に確認できない要素は図に含めず、確実な情報のみを表現することを優先してください。
