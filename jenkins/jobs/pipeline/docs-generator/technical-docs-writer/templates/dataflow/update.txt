# データフロー図セクション更新

以下の情報に基づいて、システムのデータフロー図セクションを更新してください。

## 現在のデータフロー図セクション
```markdown
{current_content}
```

## 前のセクションから抽出された構造化情報
```
{structured_info}
```

## 既存のダイアグラム
```
{existing_diagrams}
```

## データフロー図セクションの重要事項

このセクションは「システム内でデータがどのように流れ、処理されるか」を視覚的に表現することに特化します。データフローを異なる抽象度レベルで表現し、システム全体の概要から特定機能の詳細までを階層的に示してください。

### 視点の階層化 - 重要

データフロー図は以下の階層構造で整理してください：

1. **システム概要データフロー図（必須）**
   - システム全体を「鳥の目」で俯瞰する高レベルの図
   - 主要なサブシステム・コンポーネント間のデータの流れのみを表示
   - 詳細な処理ステップは表示せず、大きなコンポーネント間の関係性に焦点
   - 既存の概要図を基本として、確実な新情報のみを反映

2. **機能別データフロー図**
   - 特定の機能に焦点を当てた図
   - コンポーネント内部の処理フローや主要なデータ変換を示す
   - 既存の機能図を維持しつつ、PRで変更された機能は更新
   - 新たに追加された機能については、確実な情報がある場合のみ新規作成

3. **詳細プロセスフロー図**
   - 特定の重要プロセスの詳細な「虫の目」の図
   - 入力検証、データ変換、条件分岐、エラーハンドリングなどを含む
   - PR情報に基づいて新規追加または更新が必要な場合のみ変更
   - 不確かな情報に基づく変更は避ける

### 更新アプローチの優先順位

1. **新しく追加された機能のフロー**
   - PRで新たに追加された機能（例：SQSキュー監視機能）があれば、それに対応する新しいデータフロー図を作成
   - 抽出された情報に基づいて、機能別または詳細プロセスフローとして適切に表現

2. **変更された機能のフロー更新**
   - PRで変更された既存機能があれば、対応する既存のデータフロー図を更新
   - 変更部分を明確に特定し、必要最小限の更新を行う
   - 確実な情報がない部分は変更しない

3. **システム概要図の更新（必要な場合のみ）**
   - 主要コンポーネントの追加・削除・変更があった場合のみ概要図を更新
   - 変更が詳細レベルにとどまる場合は概要図を維持

4. **不要または不正確になった図の削除・修正**
   - PRの変更によって不要になったプロセスがあれば、該当する図を削除または「非推奨」と明記
   - 著しく不正確になった図は削除するか、大幅に更新

### 変更判断の明確化 - 重要

各ダイアグラムについて更新、維持、作成のいずれかを選択する際は、以下の点を考慮してください：

1. **更新の根拠の明確化**
   - 更新が必要と判断した場合は、PRから抽出されたどの情報に基づくかを明確に
   - サブシステムやコンポーネントの追加・削除・変更など、具体的な変更内容を特定
   - 「SQSキュー監視機能が追加されたため、新しい機能別データフロー図を作成します」など

2. **維持の根拠の明確化**
   - 既存のダイアグラムを維持する場合、その理由を明確に
   - 「PRの変更はこのフローに影響を与えないため、既存のダイアグラムを維持します」など

3. **新規作成の根拠の明確化**
   - 新しいダイアグラムを作成する場合、PRから抽出されたどの情報に基づくかを明確に
   - 「PRで追加されたSQSキュー監視機能について、新たな詳細プロセスフロー図を作成します」など

### 最重要指針

1. **情報の確実性を最優先**
   - 前のセクションから抽出された情報を優先して使用
   - 新たに抽出された情報と既存の図の内容を比較し、矛盾点を特定
   - 情報が不十分または不確かな場合は、既存の図を維持

2. **図表主体の構成を維持**
   - セクション内容の70%以上をダイアグラムが占めるように
   - 各ダイアグラムには1-2文の簡潔な説明のみを付ける
   - 不要な長文説明を避ける

3. **階層間の一貫性**
   - 概要図と詳細図で同じコンポーネント名・用語を使用
   - 詳細図は概要図の特定部分の拡大・詳細化として位置づける
   - 概要図には無い要素を詳細図に突然導入しない

## ダイアグラム選択と構成のガイド

各抽象度レベルに適したダイアグラム種類と構成を維持または改善してください：

1. **システム概要データフロー図**
   - 左右方向のフロー図（graph LR）を基本に
   - 主要コンポーネント間の関係が明確になるよう配置
   - 各コンポーネントは大きなカテゴリを表す

2. **機能別データフロー図**
   - 上下方向のフロー図（graph TB）を基本に
   - 処理の論理的な流れを表現
   - コンポーネント内部の処理ステップを含める

3. **詳細プロセスフロー図**
   - プロセスの性質に応じて適切なダイアグラム種類を選択
   - 順序と時間：sequenceDiagram
   - 状態遷移：stateDiagram-v2
   - 条件分岐：graph TB with conditionals

## 情報不足時の対応

データフローの変更に関する情報が不足している場合は、以下のアプローチを取ってください：

1. 既存のダイアグラムで正確な部分はそのまま維持する

2. PR情報から確実に把握できる変更のみを反映する

3. 新しく追加された機能については、具体的なデータフローが把握できる場合のみ図を作成し、不明確な場合は以下のような注記を追加する：
   「PR情報からは、[機能名]の詳細なデータフローを正確に把握できないため、詳細図は作成していません。」

## Mermaid記法の注意点

- 空白、カッコ、ハイフンなどの特殊文字を含むテキストは必ず二重引用符で囲む
- 例: A["設定ファイル (YAML)"] の形式で使用
- ❌ A[設定ファイル (YAML)] → ✅ A["設定ファイル (YAML)"]
- 矢印にラベルを付ける場合は -->|"ラベル"| の形式で使用

## 出力の要件

- 更新されたデータフロー図セクション全体をMarkdownで出力
- 見出しは「# データフロー図」で始める
- 適切な小見出し（##）を使用して階層構造を表現
- 各ダイアグラムの前に1-2文の簡潔な説明を付ける
- 全体で図表が占める割合を70%以上に

更新は前のセクションから抽出された構造化情報を優先的に使用してください。過度な推測は避け、情報が不十分な項目は既存のダイアグラムを維持するか、省略してください。
