# データフロー図セクション更新 - 自己対話段階

以下の情報と計画に基づいて、システムのデータフロー図セクション更新のための自己対話を行ってください。

## 現在のデータフロー図セクション
```markdown
{current_content}
```

## 前のセクションから抽出された構造化情報
```
{structured_info}
```

## 既存のダイアグラム
```
{existing_diagrams}
```

## 自己対話の指針

### 最重要原則：情報量と固有性のバランス
1. **直感的理解を優先**：5秒で全体像が把握できるか？
2. **リポジトリの独自性を保持**：このリポジトリでなければならない理由は何か？
3. **適切な抽象度**：詳細すぎず、一般的すぎない中間点はどこか？

## 自己対話のステップ

### 1. 既存図の批判的評価
- 「この図は複雑すぎないか？一目で理解できるか？」
- 「リポジトリの特徴が明確に表現されているか？」
- 「削除しても本質的な理解に影響しない要素はあるか？」
- 「類似した処理をグループ化できないか？」

### 2. 情報の取捨選択
- 「この処理フローは本当に独自性があるか？」
- 「標準的なCRUD操作を詳細に表現する必要があるか？」
- 「どの情報を注釈に移動できるか？」
- 「複数の小さな相互作用を1つにまとめられないか？」

### 3. 表現方法の最適化
**シーケンスダイアグラムの場合：**
- 参加者を5-7個に絞る方法
- 似た役割の参加者の統合可能性
- メッセージの抽象度調整
- 繰り返し処理の簡潔な表現

**状態ダイアグラムの場合：**
- 主要な状態のみに焦点を当てる
- 中間状態の省略可能性
- 状態遷移の本質的な部分の特定

### 4. リポジトリ固有性のチェック
- 「このダイアグラムを見て、どんなシステムか推測できるか？」
- 「ドメイン固有の用語や概念が適切に表現されているか？」
- 「他のシステムと差別化される特徴が明確か？」

## 検討すべきトレードオフ

1. **詳細性 vs 可読性**
   - どこまで詳細を犠牲にできるか
   - 重要な技術的詳細の保持方法

2. **完全性 vs 簡潔性**
   - すべてのフローを表現する必要性
   - コアフローへの集中の利点

3. **技術的正確性 vs 概念的理解**
   - 実装の詳細 vs ビジネスロジック
   - 対象読者に応じた抽象度

## 出力形式

### 1. 既存図の評価結果
- **維持すべき要素**：リポジトリの本質を表す部分
- **簡略化すべき要素**：グループ化や抽象化の対象
- **削除すべき要素**：冗長または一般的すぎる部分

### 2. 最適化案
- **情報の再構成**：どのようにグループ化・簡略化するか
- **ダイアグラムの分割**：1つの図に収まらない場合の分割方法
- **表現の工夫**：注釈、色分け、セクション分けなどの活用

### 3. 具体的なダイアグラム案
- **簡略化されたダイアグラムコード**
- **省略した情報の扱い方**（注釈での補足など）
- **リポジトリ固有性の強調方法**
