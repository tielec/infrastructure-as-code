# データフロー図セクション新規作成 - 最終生成段階

これまでの計画と自己対話に基づいて、最終的なデータフロー図セクションを作成してください。

## データフロー図セクションの要件

このセクションは「システム内でデータがどのように流れ、処理されるか」を視覚的に表現することに特化します。

### 最重要指針

1. **図表主体の構成**
   - セクション内容の70%以上をダイアグラムが占めるように
   - 各ダイアグラムには1-2文の簡潔な説明のみを付ける
   - 詳細な機能説明は避け、データの流れの表現に集中

2. **情報の確実性を明示**
   - 確実な情報と推測を明確に区別
   - 推測に基づく部分には「（推測）」マーカーを付ける
   - 情報不足の場合は省略するか、明示的に情報不足を記載

3. **視覚的な明瞭さ**
   - 適切なダイアグラム種類の選択
   - コンポーネント名と役割の明確な表示
   - メッセージや状態遷移による処理フローの明示

## 使用可能なダイアグラム

データフロー図セクションでは、以下の2種類のダイアグラムのみを使用してください：

1. **シーケンスダイアグラム (sequenceDiagram)**
   - 時系列でのデータ処理手順と交換を表現
   - 参加者間のメッセージやデータの流れを示す
   - 同期・非同期処理のパターンを区別する

2. **状態ダイアグラム (stateDiagram-v2)**
   - データの状態遷移とプロセスを表現
   - 各状態での処理内容を示す
   - イベントによる状態変化を明示する

## Mermaidダイアグラムのガイドライン

1. **シーケンスダイアグラムの記法**
   - 参加者定義: `participant A as "表示名"`
   - 実線メッセージ: `A->>B: "メッセージ"`
   - 破線応答: `B-->>A: "応答"`
   - 活性化: `A->>+B: "リクエスト"` と `B-->>-A: "レスポンス"`
   - 注釈: `Note over A,B: "注釈内容"`
   - 条件分岐: `alt`/`else`/`end`
   - 繰り返し: `loop`/`end`
   - 並列処理: `par`/`and`/`end`
   - オプション処理: `opt`/`end`

2. **効果的なシーケンスダイアグラムの設計**
   - **参加者の管理**
     - 一つのダイアグラムに含める参加者は5〜9個程度を目安とする
     - 参加者が多い場合は、複数のダイアグラムに分割する
     - 関連する参加者をグループ化する（例：すべてのAWSサービスを近くに配置）
   
   - **相互作用の現実的な表現**
     - すべてのアクションをユーザーから開始させない
     - システム内のコンポーネント間で自律的に行われる相互作用を表現する
     - 定期的なジョブやトリガーされたイベントによる処理を適切に表現
   
   - **アクティベーションマーカーの効果的な使用**
     - 長時間実行される処理には必ずアクティベーションマーカー（+/-）を使用する
     - 並列処理や非同期処理の表現にも活用する
     - 入れ子になった処理は入れ子のアクティベーションで表現する
   
   - **メッセージ内容の簡潔化**
     - 繰り返し使用される共通情報（プロトコルなど）はNoteブロックで一括説明する
     - メッセージの内容は「何が」行われるかに焦点を当てる

   - **操作の論理的グループ化**
     - 機能的に関連する一連の操作は、空行や注釈で視覚的に区切る
     - 構造的なフロー要素（alt/else、loop、par、opt）を適切に活用する
   
   - **一貫したエラー処理パターン**
     - 重要な操作には一貫したエラー処理パスを含める
     - エラー情報の伝播経路を明確に表現する

3. **状態ダイアグラムの記法**
   - 開始・終了: `[*] --> 初期状態` と `最終状態 --> [*]`
   - 状態遷移: `状態A --> 状態B: "イベント"`
   - 注釈: `note right of 状態A: "注釈内容"`
   - 複合状態: `state "複合状態" { 内部状態A --> 内部状態B }`

## Mermaidダイアグラム構文チェックリスト

最終的なMermaidダイアグラムを生成する前に、以下のチェックリストを確認してください：

1. **シーケンスダイアグラム固有の確認**
   - ✅ 参加者定義が正しいか (`participant A as "サービスA"`)
   - ✅ メッセージラベルが適切に記述されているか
   - ✅ 活性化/非活性化の対応が取れているか
   - ✅ 条件分岐や繰り返しが正しく閉じられているか
   - ✅ 参加者数が5〜9個程度に収まっているか
   - ✅ システム内の自律的な相互作用が表現されているか
   - ✅ 繰り返し情報が適切に注釈化されているか
   - ✅ 関連操作が論理的にグループ化されているか
   - ✅ エラー処理パターンに一貫性があるか

2. **状態ダイアグラム固有の確認**
   - ✅ 開始状態と終了状態が定義されているか (`[*]`)
   - ✅ 状態遷移のイベントラベルが明確か
   - ✅ 複合状態の定義が正しいか
   - ✅ 状態名は一意で分かりやすいか

3. **全体的な構造**
   - ✅ ダイアグラム開始宣言が正しいか (`sequenceDiagram` / `stateDiagram-v2`)
   - ✅ 余分な改行、スペース、特殊文字がないか
   - ✅ データの流れや状態遷移が明確に表現されているか

## 出力の要件

- Markdownフォーマットで作成
- 見出しは「# データフロー図」で始める
- 適切な小見出し（##）を使用して階層構造を表現
- 各ダイアグラムの前に1-2文の簡潔な説明を付ける
- 全体で図表が占める割合を70%以上に
- ダイアグラムは Mermaid 記法で記述し、```mermaid タグで囲む
- 推測に基づく部分は「（推測）」マーカーで明示
- mermaidダイアグラム内での改行には </br> を使用すること

データフロー図はシステム内のデータの流れと処理を時系列または状態遷移で視覚的に理解するための重要なツールです。明確で論理的な構造を持ち、他の開発者が直感的に理解できる図を目指してください。
