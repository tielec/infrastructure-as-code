# データフロー図セクション新規作成

以下の情報に基づいて、システムのデータフロー図セクションを新規作成してください。

## 前のセクションから抽出された構造化情報
```
{structured_info}
```

## データフロー図セクションの重要事項

このセクションは「システム内でデータがどのように流れ、処理されるか」を視覚的に表現することに特化します。データフローを異なる抽象度レベルで表現し、システム全体の概要から特定機能の詳細までを階層的に示してください。

### 視点の階層化 - 重要

データフロー図は以下の階層構造で作成してください：

1. **システム概要データフロー図（必須）**
   - システム全体を「鳥の目」で俯瞰する高レベルの図
   - 主要なサブシステム・コンポーネント間のデータの流れのみを表示
   - 詳細な処理ステップは表示せず、大きなコンポーネント間の関係性に焦点
   - 例：「Jenkins」「AWS環境」「GitHub」などの主要システム間のデータの流れ

2. **機能別データフロー図（情報が十分な場合のみ）**
   - 抽出された情報から確実に把握できる特定の機能に焦点を当てた図
   - コンポーネント内部の処理フローや主要なデータ変換を示す
   - 各機能ごとに独立した図として作成
   - 例：「Jenkins設定適用フロー」「CI/CDパイプラインフロー」「バックアッププロセスフロー」

3. **詳細プロセスフロー図（確実な情報がある場合のみ）**
   - 特定の重要プロセスの詳細な「虫の目」の図
   - 入力検証、データ変換、条件分岐、エラーハンドリングなどを含む
   - PRから確実に抽出できる情報のみに基づいて作成
   - 情報が不確かな部分は図に含めない

### 最重要指針

1. **情報の確実性を最優先**
   - 前のセクションから抽出された情報を優先して使用
   - 不確かな情報に基づく推測は最小限に抑える
   - 情報が不十分な場合は、該当する詳細図を作成せず、情報不足を明示

2. **図表主体の構成**
   - セクション内容の70%以上をダイアグラムが占めるように
   - 各ダイアグラムには1-2文の簡潔な説明のみを付ける
   - 不要な長文説明を避ける

3. **階層間の一貫性**
   - 概要図と詳細図で同じコンポーネント名・用語を使用
   - 詳細図は概要図の特定部分の拡大・詳細化として位置づける
   - 概要図には無い要素を詳細図に突然導入しない

## ダイアグラム種類の選択ガイド

各抽象度レベルに適したダイアグラム種類を選択してください：

1. **システム概要データフロー図**
   - 推奨: graph LR (左右方向のフロー図)
   - 主要コンポーネント間の関係が明確になるよう配置
   - 各コンポーネントは大きなカテゴリを表す

2. **機能別データフロー図**
   - 推奨: graph TB (上下方向のフロー図)
   - 処理の論理的な流れを表現
   - コンポーネント内部の処理ステップを含める

3. **詳細プロセスフロー図**
   - 状態遷移: stateDiagram-v2
   - シーケンス処理: sequenceDiagram
   - 条件分岐が多い場合: graph TB with conditionals

## 抽象度レベル別ダイアグラム例

### システム概要データフロー図の例
```mermaid
graph LR
    A["設定ファイル"] --> B["Jenkinsシステム"]
    C["ソースコード"] --> B
    B --> D["AWS環境"]
    B --> E["GitHub"]
```

### 機能別データフロー図の例
```mermaid
graph TB
    A["設定ファイル"] --> B["設定検証"]
    B --> C["Jenkins設定適用"]
    C --> D["設定保存"]
    D --> E["設定バックアップ"]
```

### 詳細プロセスフロー図の例
```mermaid
sequenceDiagram
    participant User
    participant Jenkins
    participant GitHub
    
    User->>Jenkins: 設定更新
    Jenkins->>Jenkins: 設定検証
    Jenkins->>GitHub: バックアップ保存
    GitHub-->>Jenkins: 保存確認
    Jenkins-->>User: 完了通知
```

## 情報不足時の対応

データフローに関する情報が不足している場合は、以下のアプローチを取ってください：

1. システム概要データフロー図は、確実な情報に基づいて必ず作成する

2. 機能別データフロー図は、確実な情報がある機能のみ作成し、情報が不十分な機能は省略する

3. 詳細プロセスフロー図は、PRから詳細が明確に読み取れる場合のみ作成し、推測に基づく作成は避ける

4. 情報が不足している場合は、明示的に以下のような注記を追加する：
   「提供された情報からは、[機能名]の詳細なデータフローを正確に把握できないため、詳細図は省略しています。」

## Mermaid記法の注意点

- 空白、カッコ、ハイフンなどの特殊文字を含むテキストは必ず二重引用符で囲む
- 例: A["設定ファイル (YAML)"] の形式で使用
- ❌ A[設定ファイル (YAML)] → ✅ A["設定ファイル (YAML)"]
- 矢印にラベルを付ける場合は -->|"ラベル"| の形式で使用

## 出力の要件

- Markdownフォーマットで作成
- 見出しは「# データフロー図」で始める
- 適切な小見出し（##）を使用して階層構造を表現
- 各ダイアグラムの前に1-2文の簡潔な説明を付ける
- 全体で図表が占める割合を70%以上に
- ダイアグラムは Mermaid 記法で記述し、```mermaid タグで囲む

内容は前のセクションから抽出された構造化情報を優先的に使用し、過度な推測は避けてください。情報が不十分な項目は省略するか、明示的に情報不足であることを記載してください。
