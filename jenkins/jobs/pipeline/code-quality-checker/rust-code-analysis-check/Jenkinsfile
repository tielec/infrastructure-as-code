@Library("jenkins-shared-lib@${LIBRARY_BRANCH}") _

pipeline {
    agent {
        label 'ec2-fleet'
    }

    environment {
        // ディレクトリ構造
        REPORT_DIR = 'rust-code-analysis-report'
        HTML_DIR = "${REPORT_DIR}/html"
        JSON_DIR = "${REPORT_DIR}/json"
        METRICS_DIR = "${REPORT_DIR}/metrics"
        SOURCE_CODE_DIR = 'source-code'
        CONFIG_DIR = 'rust-analysis-config'
        
        // Python仮想環境
        VENV_PATH = "${WORKSPACE}/venv"
                
        // スクリプトとテンプレートのパス
        SCRIPT_PATH = 'jenkins/jobs/pipeline/code-quality-checker/rust-code-analysis-check/scripts'
        TEMPLATE_PATH = 'jenkins/jobs/pipeline/code-quality-checker/rust-code-analysis-check/templates'
        
        // Dockerコンテナ設定
        DOCKER_BASE_IMAGE = 'rust:1.76-slim'  // 1.76以上が必要
        RUST_CODE_ANALYSIS_VERSION = '0.0.25'
        
        // タイムスタンプ
        BUILD_TIMESTAMP = sh(
            script: 'TZ="Asia/Tokyo" date "+%Y%m%d_%H%M%S"',
            returnStdout: true
        ).trim()
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '30'))
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                script {
                    // クリーンアップと初期ディレクトリ作成
                    cleanWs()
                    sh """
                        mkdir -p ${REPORT_DIR} ${HTML_DIR} ${JSON_DIR} ${METRICS_DIR} ${CONFIG_DIR} ${SOURCE_CODE_DIR}
                        chmod -R 777 ${REPORT_DIR}
                    """

                    // ソースコードのリポジトリをチェックアウト
                    dir(env.SOURCE_CODE_DIR) {
                        gitUtils.checkoutRepository(
                            params.GIT_SOURCE_REPO_URL,
                            params.GIT_SOURCE_REPO_BRANCH,
                            params.GIT_SOURCE_REPO_CREDENTIALS_ID
                        )
                    }

                    // Jenkins のリポジトリをチェックアウト（設定ファイル用）
                    dir(env.CONFIG_DIR) {
                        gitUtils.checkoutRepository(
                            env.GIT_INFRASTRUCTURE_REPO_URL,
                            env.GIT_INFRASTRUCTURE_REPO_BRANCH,
                            env.GITHUB_APP_CREDENTIALS_ID
                        )
                    }

                    // リポジトリ名を抽出
                    def (repoOwner, repoName) = gitUtils.extractRepoInfo(params.GIT_SOURCE_REPO_URL)
                    env.REPO_NAME = repoName
                    env.REPO_OWNER = repoOwner

                    // 除外パターンの準備
                    env.EXCLUDE_ARGS = prepareExcludeArgs(params.EXCLUDE_PATTERNS)
                }
            }
        }

        stage('Analyze Code Metrics') {
            steps {
                script {
                    // Rust versionパラメータに基づいてDockerイメージを選択
                    def dockerImage = params.RUST_VERSION == 'latest' ? 
                        'rust:slim' : "rust:${params.RUST_VERSION}-slim"
                    
                    withDockerContainer(
                        image: dockerImage,
                        args: "-u root -v ${WORKSPACE}:/workspace -w /workspace"
                    ) {
                        script {
                            // 同じコンテナ内でインストールと解析を実行
                            echo "Installing Rust Code Analysis tools..."
                            installRustCodeAnalysis()
                            
                            // 言語の自動検出
                            def languages = detectSupportedLanguages()
                            env.DETECTED_LANGUAGES = languages.join(', ')
                            
                            // メトリクス解析の実行
                            dir(env.SOURCE_CODE_DIR) {
                                // デバッグ: ファイルの存在確認
                                sh """
                                    echo "=== Source files in repository ==="
                                    find . -type f \\( -name "*.rs" -o -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.cpp" -o -name "*.c" -o -name "*.java" -o -name "*.go" \\) | head -20
                                    echo "================================="
                                """
                                
                                // 全体解析
                                runMetricsAnalysis()
                                
                                // 言語別解析
                                languages.each { lang ->
                                    runLanguageSpecificMetrics(lang)
                                }
                            }
                            
                            // 解析結果の処理
                            processAnalysisResults()
                            
                            // HTMLレポート生成
                            generateHtmlReport()
                        }
                    }
                }
            }
        }

        stage('Generate Summary') {
            steps {
                script {
                    // サマリー情報の生成
                    generateSummaryReport()
                    
                    // 閾値チェック
                    def violations = checkMetricThresholds()
                    if (violations.total > 0) {
                        def message = "Found ${violations.cyclomatic} functions exceeding cyclomatic complexity (${params.COMPLEXITY_THRESHOLD}) and ${violations.cognitive} exceeding cognitive complexity (${params.COGNITIVE_THRESHOLD})"
                        unstable(message)
                        currentBuild.description = "⚠️ ${message}"
                    } else {
                        currentBuild.description = "✅ All functions are within complexity thresholds"
                    }
                }
            }
        }

        stage('Publish Reports') {
            steps {
                // HTML レポートの公開
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: "${HTML_DIR}",
                    reportFiles: 'index.html',
                    reportName: "Rust Code Analysis Report - ${BUILD_TIMESTAMP}",
                    reportTitles: "Code Metrics Analysis for ${env.REPO_NAME}"
                ])
                
                // JSONファイルのアーカイブ
                archiveArtifacts artifacts: "${JSON_DIR}/*.json", allowEmptyArchive: true
                
                // メトリクスファイルのアーカイブ
                archiveArtifacts artifacts: "${METRICS_DIR}/*", allowEmptyArchive: true
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: "${REPORT_DIR}/**/*", fingerprint: true
            
            script {
                def summaryFile = "${WORKSPACE}/${REPORT_DIR}/summary.json"
                if (fileExists(summaryFile)) {
                    def summary = readJSON file: summaryFile
                    echo """
                    ========================================
                    Rust Code Analysis Summary
                    ========================================
                    Repository: ${env.REPO_NAME}
                    Branch: ${params.GIT_SOURCE_REPO_BRANCH}
                    Total Files: ${summary.total_files}
                    Total Functions: ${summary.total_functions}
                    Complex Functions (Cyclomatic): ${summary.complex_functions_cyclomatic}
                    Complex Functions (Cognitive): ${summary.complex_functions_cognitive}
                    Average Cyclomatic Complexity: ${summary.average_cyclomatic}
                    Average Cognitive Complexity: ${summary.average_cognitive}
                    Languages: ${env.DETECTED_LANGUAGES}
                    ========================================
                    """
                }
            }
        }
        success {
            echo 'Code metrics analysis completed successfully!'
        }
        unstable {
            echo 'Code metrics analysis completed with warnings'
        }
        failure {
            echo 'Failed to analyze code metrics'
        }
        cleanup {
            cleanWs()
        }
    }
}

// ヘルパー関数

def prepareExcludeArgs(patterns) {
    // rust-code-analysisでは除外パターンを個別に指定する必要がある
    return patterns.split(',').collect { pattern ->
        "--exclude ${pattern.trim()}"
    }.join(' ')
}

def installRustCodeAnalysis() {
    sh """
        # 必要なパッケージのインストール
        apt-get update -qq && apt-get install -qq -y \\
            build-essential \\
            pkg-config \\
            libssl-dev \\
            git \\
            python3 \\
            python3-pip \\
            python3-venv \\
            curl
        
        # Rustのバージョン確認
        rustc --version
        cargo --version
        
        # Python環境のセットアップ（Workspace内に作成）
        echo "Setting up Python virtual environment..."
        python3 -m venv ${VENV_PATH}
        . ${VENV_PATH}/bin/activate
        pip install --upgrade pip
        pip install jinja2 pandas matplotlib seaborn
        
        # rust-code-analysis-cliのインストール
        echo "Installing rust-code-analysis-cli..."
        cargo install rust-code-analysis-cli --version ${env.RUST_CODE_ANALYSIS_VERSION} --locked
        
        # インストール確認
        if rust-code-analysis-cli --version; then
            echo "rust-code-analysis-cli successfully installed"
        else
            echo "ERROR: rust-code-analysis-cli installation failed"
            exit 1
        fi
    """
}

def detectSupportedLanguages() {
    // rust-code-analysisがサポートする言語
    def languages = []
    def languageExtensions = [
        'rust': ['rs'],
        'python': ['py'],
        'javascript': ['js', 'jsx'],
        'typescript': ['ts', 'tsx'],
        'cpp': ['cpp', 'cc', 'cxx', 'c++'],
        'c': ['c', 'h'],
        'java': ['java'],
        'go': ['go'],
        'php': ['php'],
        'ruby': ['rb'],
        'csharp': ['cs'],
        'kotlin': ['kt', 'kts'],
        'swift': ['swift'],
        'scala': ['scala']
    ]
    
    languageExtensions.each { lang, exts ->
        def hasFiles = false
        exts.each { ext ->
            def count = sh(
                script: "find ${SOURCE_CODE_DIR} -name '*.${ext}' -type f 2>/dev/null | grep -v -E '(test|tests|node_modules|target|vendor)' | wc -l || echo 0",
                returnStdout: true
            ).trim()
            if (count.toInteger() > 0) {
                hasFiles = true
            }
        }
        if (hasFiles) {
            languages.add(lang)
        }
    }
    
    if (languages.isEmpty()) {
        echo "No supported languages detected."
        languages.add('auto')
    }
    
    return languages
}

def runMetricsAnalysis() {
    // rust-code-analysisによる全体解析
    sh """
        # JSONフォーマットで出力
        rust-code-analysis-cli \\
            --metrics \\
            --output-format json \\
            --paths . \\
            ${env.EXCLUDE_ARGS} \\
            > ../${JSON_DIR}/metrics_all.json
        
        # 個別ファイルの解析（上位100ファイルのみ）
        find . -type f \\( -name "*.rs" -o -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.cpp" -o -name "*.c" -o -name "*.java" -o -name "*.go" \\) | head -100 | while read file; do
            filename=\$(basename "\$file" | sed 's/[^a-zA-Z0-9._-]/_/g')
            rust-code-analysis-cli \\
                --metrics \\
                --output-format json \\
                --paths "\$file" \\
                > ../${METRICS_DIR}/"\${filename}.json" 2>/dev/null || true
        done
    """
}

def runLanguageSpecificMetrics(language) {
    if (language == 'auto') {
        return
    }
    
    echo "Analyzing ${language} files..."
    
    // 言語別のファイル拡張子マッピング
    def extensionMap = [
        'python': 'py',
        'javascript': 'js',
        'typescript': 'ts',
        'rust': 'rs',
        'java': 'java',
        'cpp': 'cpp',
        'c': 'c',
        'go': 'go',
        'php': 'php',
        'ruby': 'rb',
        'csharp': 'cs',
        'kotlin': 'kt',
        'swift': 'swift',
        'scala': 'scala'
    ]
    
    def extension = extensionMap[language]
    if (!extension) {
        echo "Unknown language: ${language}"
        return
    }
    
    sh """
        # 言語別の解析
        find . -name "*.${extension}" -type f | grep -v -E '(test|tests|node_modules|target|vendor)' | head -100 > /tmp/${language}_files.txt
        
        if [ -s /tmp/${language}_files.txt ]; then
            rust-code-analysis-cli \\
                --metrics \\
                --output-format json \\
                --paths /tmp/${language}_files.txt \\
                > ../${JSON_DIR}/metrics_${language}.json || true
        else
            echo "No ${language} files found"
        fi
        
        rm -f /tmp/${language}_files.txt
    """
}

def processAnalysisResults() {
    // Pythonスクリプトをコピーして実行
    sh """
        cp ${CONFIG_DIR}/${SCRIPT_PATH}/process_metrics.py .
        
        # メトリクスの処理と集計
        . ${VENV_PATH}/bin/activate
        python3 process_metrics.py \\
            --json-dir "${JSON_DIR}" \\
            --metrics-dir "${METRICS_DIR}" \\
            --output-dir "${REPORT_DIR}" \\
            --cyclomatic-threshold "${params.COMPLEXITY_THRESHOLD}" \\
            --cognitive-threshold "${params.COGNITIVE_THRESHOLD}" \\
            --min-lines "${params.MIN_CODE_LENGTH}"
        
        rm process_metrics.py
    """
}

def generateHtmlReport() {
    sh """
        # テンプレートファイルとCSSをコピー
        echo "Copying template files..."
        cp ${CONFIG_DIR}/${TEMPLATE_PATH}/styles.css ${HTML_DIR}/
        cp ${CONFIG_DIR}/${SCRIPT_PATH}/generate_rust_report.py .
        
        # ファイルの存在確認
        echo "Checking required files:"
        ls -la ${HTML_DIR}/styles.css
        ls -la ${CONFIG_DIR}/${TEMPLATE_PATH}/rust_report.html
        
        # HTMLレポートの生成
        . ${VENV_PATH}/bin/activate
        python3 generate_rust_report.py \\
            --report-dir "${REPORT_DIR}" \\
            --html-dir "${HTML_DIR}" \\
            --template-dir "${CONFIG_DIR}/${TEMPLATE_PATH}" \\
            --repo-name "${env.REPO_NAME}" \\
            --branch "${params.GIT_SOURCE_REPO_BRANCH}" \\
            --cyclomatic-threshold "${params.COMPLEXITY_THRESHOLD}" \\
            --cognitive-threshold "${params.COGNITIVE_THRESHOLD}" \\
            --include-halstead "${params.INCLUDE_HALSTEAD}" \\
            --include-mi "${params.INCLUDE_MI}"
        
        # 生成されたファイルの確認
        echo "Generated files:"
        ls -la ${HTML_DIR}/
        
        # クリーンアップ
        rm generate_rust_report.py
    """
}

def generateSummaryReport() {
    sh """
        echo "# Rust Code Analysis Report" > ${REPORT_DIR}/SUMMARY.md
        echo "" >> ${REPORT_DIR}/SUMMARY.md
        echo "**Repository:** ${env.REPO_NAME}" >> ${REPORT_DIR}/SUMMARY.md
        echo "**Branch:** ${params.GIT_SOURCE_REPO_BRANCH}" >> ${REPORT_DIR}/SUMMARY.md
        echo "**Generated:** \$(date)" >> ${REPORT_DIR}/SUMMARY.md
        echo "" >> ${REPORT_DIR}/SUMMARY.md
        echo "## Configuration" >> ${REPORT_DIR}/SUMMARY.md
        echo "- Cyclomatic Complexity Threshold: ${params.COMPLEXITY_THRESHOLD}" >> ${REPORT_DIR}/SUMMARY.md
        echo "- Cognitive Complexity Threshold: ${params.COGNITIVE_THRESHOLD}" >> ${REPORT_DIR}/SUMMARY.md
        echo "- Min Code Length: ${params.MIN_CODE_LENGTH}" >> ${REPORT_DIR}/SUMMARY.md
        echo "- Detected Languages: ${env.DETECTED_LANGUAGES}" >> ${REPORT_DIR}/SUMMARY.md
        echo "- Include Halstead Metrics: ${params.INCLUDE_HALSTEAD}" >> ${REPORT_DIR}/SUMMARY.md
        echo "- Include Maintainability Index: ${params.INCLUDE_MI}" >> ${REPORT_DIR}/SUMMARY.md
        echo "" >> ${REPORT_DIR}/SUMMARY.md
    """
}

def checkMetricThresholds() {
    def violations = [cyclomatic: 0, cognitive: 0, total: 0]
    
    def summaryFile = "${WORKSPACE}/${REPORT_DIR}/summary.json"
    if (fileExists(summaryFile)) {
        def summary = readJSON file: summaryFile
        violations.cyclomatic = summary.complex_functions_cyclomatic ?: 0
        violations.cognitive = summary.complex_functions_cognitive ?: 0
        violations.total = violations.cyclomatic + violations.cognitive
    }
    
    return violations
}
