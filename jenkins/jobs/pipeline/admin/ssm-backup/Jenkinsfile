@Library('jenkins-shared-lib') _

/**
 * SSM Parameter Store Backup Pipeline
 * AWS Systems Manager Parameter Storeのパラメータを定期的にバックアップ
 */
pipeline {
    agent {
        label 'ec2-fleet'
    }
    
    options {
        timestamps()
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(daysToKeepStr: '30', numToKeepStr: '100'))
        disableConcurrentBuilds()
    }
    
    environment {
        // AWS設定
        AWS_REGION = 'ap-northeast-1'
        
        // タイムスタンプ
        BACKUP_DATE = sh(script: "date '+%Y-%m-%d'", returnStdout: true).trim()
        BACKUP_TIMESTAMP = sh(script: "date '+%Y%m%d_%H%M%S'", returnStdout: true).trim()
        
        // ディレクトリ構造
        WORK_DIR = "${WORKSPACE}/backup-work"
        DATA_DIR = "${WORK_DIR}/data"
        
        // 環境フィルタ（環境に含まれる文字列）
        ENV_FILTER = "/${params.ENVIRONMENT}/"
    }
    
    stages {
        stage('Initialize') {
            steps {
                script {
                    // ビルド表示名を設定
                    currentBuild.displayName = "#${env.BUILD_NUMBER} - ${params.ENVIRONMENT} Backup"
                    currentBuild.description = "Backup at ${env.BACKUP_TIMESTAMP}"
                    
                    echo """
                    =============================================
                    SSM Parameter Store Backup
                    =============================================
                    Environment: ${params.ENVIRONMENT}
                    Filter: Parameters containing '${env.ENV_FILTER}'
                    Dry Run: ${params.DRY_RUN}
                    Timestamp: ${env.BACKUP_TIMESTAMP}
                    Date: ${env.BACKUP_DATE}
                    =============================================
                    """.stripIndent()
                    
                    // 作業ディレクトリの準備
                    sh """
                        rm -rf ${WORK_DIR}
                        mkdir -p ${DATA_DIR}
                    """
                    
                    // S3バケット名の取得
                    env.BACKUP_BUCKET = sh(
                        script: """
                            aws ssm get-parameter \
                                --name "/jenkins/${params.ENVIRONMENT}/backup/s3-bucket-name" \
                                --query 'Parameter.Value' \
                                --output text \
                                --region ${AWS_REGION} 2>/dev/null || echo ""
                        """,
                        returnStdout: true
                    ).trim()
                    
                    if (!env.BACKUP_BUCKET) {
                        error("バックアップ用S3バケットが見つかりません。Pulumiスタックがデプロイされていることを確認してください。")
                    }
                    
                    echo "Backup S3 Bucket: ${env.BACKUP_BUCKET}"
                }
            }
        }
        
        stage('Collect Parameters') {
            steps {
                script {
                    echo "=== Collecting SSM Parameters ==="
                    
                    // バックアップスクリプトの作成
                    writeFile file: "${WORK_DIR}/collect_params.sh", text: '''#!/bin/bash
set -e

echo "Starting parameter collection..."

# パラメータ一覧の取得（ページネーション対応）
fetch_all_parameters() {
    local next_token=""
    local page=1
    local all_params="[]"
    
    while true; do
        echo "Fetching page ${page}..."
        
        if [ -n "$next_token" ]; then
            local result=$(aws ssm describe-parameters \
                --starting-token "$next_token" \
                --query "{Parameters: Parameters, NextToken: NextToken}" \
                --output json \
                --region ${AWS_REGION})
        else
            local result=$(aws ssm describe-parameters \
                --query "{Parameters: Parameters, NextToken: NextToken}" \
                --output json \
                --region ${AWS_REGION})
        fi
        
        # パラメータを追加
        local params=$(echo "$result" | jq -r '.Parameters // []')
        all_params=$(echo "$all_params" | jq ". + $params")
        
        # 次のトークンを確認
        next_token=$(echo "$result" | jq -r '.NextToken // empty')
        
        if [ -z "$next_token" ]; then
            break
        fi
        
        page=$((page + 1))
        
        # APIレート制限対策
        sleep 0.5
    done
    
    echo "$all_params"
}

# すべてのパラメータを取得
ALL_PARAMS=$(fetch_all_parameters)

# 環境フィルタを適用
echo "Filtering parameters containing '${ENV_FILTER}'..."
FILTERED_PARAMS=$(echo "$ALL_PARAMS" | jq --arg filter "${ENV_FILTER}" \
    '[.[] | select(.Name | contains($filter))]')

PARAM_COUNT=$(echo "$FILTERED_PARAMS" | jq 'length')
echo "Found ${PARAM_COUNT} parameters for environment ${ENVIRONMENT}"

# パラメータ名の一覧を保存
echo "$FILTERED_PARAMS" | jq -r '.[].Name' > ${DATA_DIR}/parameter_names.txt

# パラメータを取得してバックアップデータを作成
echo "Fetching parameter values..."
BACKUP_DATA="[]"
BATCH_SIZE=10
COUNTER=0

while IFS= read -r param_name; do
    if [ $((COUNTER % BATCH_SIZE)) -eq 0 ] && [ $COUNTER -gt 0 ]; then
        echo "Processed ${COUNTER} parameters..."
        sleep 1  # APIレート制限対策
    fi
    
    # パラメータの値を取得（エラー時はスキップ）
    PARAM_DATA=$(aws ssm get-parameter \
        --name "$param_name" \
        --with-decryption \
        --query 'Parameter' \
        --output json \
        --region ${AWS_REGION} 2>/dev/null || echo '{}')
    
    if [ "$PARAM_DATA" != '{}' ]; then
        BACKUP_DATA=$(echo "$BACKUP_DATA" | jq ". + [$PARAM_DATA]")
    else
        echo "Warning: Failed to get parameter: $param_name"
    fi
    
    COUNTER=$((COUNTER + 1))
done < ${DATA_DIR}/parameter_names.txt

echo "Successfully fetched ${COUNTER} parameters"

# バックアップファイルの作成
BACKUP_JSON=$(jq -n \
    --arg date "${BACKUP_DATE}" \
    --arg timestamp "${BACKUP_TIMESTAMP}" \
    --arg environment "${ENVIRONMENT}" \
    --arg count "$COUNTER" \
    --argjson parameters "$BACKUP_DATA" \
    '{
        backup_date: $date,
        backup_timestamp: $timestamp,
        environment: $environment,
        parameter_count: $count | tonumber,
        parameters: $parameters
    }')

echo "$BACKUP_JSON" | jq '.' > ${DATA_DIR}/backup.json

echo "Backup data created: ${DATA_DIR}/backup.json"
echo "Total parameters backed up: $(echo "$BACKUP_JSON" | jq '.parameter_count')"
'''
                    
                    // スクリプトの実行
                    sh """
                        chmod +x ${WORK_DIR}/collect_params.sh
                        
                        # 環境変数を設定
                        export ENVIRONMENT="${params.ENVIRONMENT}"
                        export ENV_FILTER="${env.ENV_FILTER}"
                        export AWS_REGION="${AWS_REGION}"
                        export BACKUP_DATE="${env.BACKUP_DATE}"
                        export BACKUP_TIMESTAMP="${env.BACKUP_TIMESTAMP}"
                        export DATA_DIR="${DATA_DIR}"
                        
                        # スクリプト実行
                        ${WORK_DIR}/collect_params.sh
                    """
                    
                    // バックアップファイルの確認
                    def backupData = readJSON file: "${DATA_DIR}/backup.json"
                    env.PARAM_COUNT = backupData.parameter_count.toString()
                    
                    if (backupData.parameter_count == 0) {
                        echo "WARNING: No parameters found for backup"
                        currentBuild.result = 'UNSTABLE'
                    } else {
                        echo "Backup file contains ${backupData.parameter_count} parameters"
                    }
                }
            }
        }
        
        stage('Upload to S3') {
            when {
                expression { 
                    return !params.DRY_RUN && env.PARAM_COUNT.toInteger() > 0
                }
            }
            steps {
                script {
                    echo "=== Uploading Backup to S3 ==="
                    
                    def backupFileName = "ssm-backup-${params.ENVIRONMENT}-${env.BACKUP_TIMESTAMP}.json"
                    def s3Key = "${params.ENVIRONMENT}/${env.BACKUP_DATE}/${backupFileName}"
                    
                    // バックアップファイルの名前を変更
                    sh "cp ${DATA_DIR}/backup.json ${DATA_DIR}/${backupFileName}"
                    
                    // S3へアップロード
                    sh """
                        aws s3 cp ${DATA_DIR}/${backupFileName} \
                            s3://${env.BACKUP_BUCKET}/${s3Key} \
                            --region ${AWS_REGION}
                    """
                    
                    echo "Backup uploaded to: s3://${env.BACKUP_BUCKET}/${s3Key}"
                    
                    // 最新バックアップ情報を更新
                    sh """
                        echo '${env.BACKUP_DATE}/${backupFileName}' | \
                        aws s3 cp - s3://${env.BACKUP_BUCKET}/${params.ENVIRONMENT}/latest.txt \
                            --region ${AWS_REGION}
                    """
                    
                    // アップロード確認
                    def s3ObjectInfo = sh(
                        script: """
                            aws s3api head-object \
                                --bucket ${env.BACKUP_BUCKET} \
                                --key ${s3Key} \
                                --query '[ContentLength, LastModified]' \
                                --output text \
                                --region ${AWS_REGION}
                        """,
                        returnStdout: true
                    ).trim()
                    
                    echo "S3 Object Info: ${s3ObjectInfo}"
                    
                    // アーティファクトとして保存
                    archiveArtifacts artifacts: "backup-work/data/${backupFileName}", fingerprint: true
                }
            }
        }
        
        stage('Dry Run Report') {
            when {
                expression { params.DRY_RUN }
            }
            steps {
                script {
                    echo """
                    =============================================
                    DRY RUN - バックアップ実行レポート
                    =============================================
                    
                    このドライランでは実際のS3アップロードは行われませんでした。
                    
                    バックアップ対象:
                    - 環境: ${params.ENVIRONMENT}
                    - パラメータ数: ${env.PARAM_COUNT}
                    - バックアップ日時: ${env.BACKUP_TIMESTAMP}
                    
                    実行時の動作:
                    - S3バケット: ${env.BACKUP_BUCKET}
                    - S3パス: ${params.ENVIRONMENT}/${env.BACKUP_DATE}/
                    - ファイル名: ssm-backup-${params.ENVIRONMENT}-${env.BACKUP_TIMESTAMP}.json
                    
                    =============================================
                    """.stripIndent()
                    
                    // ドライラン時もアーティファクトとして保存
                    archiveArtifacts artifacts: "backup-work/data/backup.json", fingerprint: true
                }
            }
        }
    }
    
    post {
        always {
            script {
                // 実行サマリーの表示
                echo """
                =============================================
                SSM Parameter Store Backup Summary
                =============================================
                Build: #${env.BUILD_NUMBER}
                Status: ${currentBuild.result ?: 'SUCCESS'}
                Environment: ${params.ENVIRONMENT}
                Parameters: ${env.PARAM_COUNT ?: '0'}
                Timestamp: ${env.BACKUP_TIMESTAMP}
                Dry Run: ${params.DRY_RUN}
                =============================================
                """.stripIndent()
            }
        }
        
        success {
            echo "✅ SSMパラメータのバックアップが正常に完了しました"
        }
        
        failure {
            echo "❌ バックアップが失敗しました。ログを確認してください"
        }
        
        unstable {
            echo "⚠️ バックアップは完了しましたが、警告があります"
        }
        
        cleanup {
            // 作業ディレクトリのクリーンアップ
            sh "rm -rf ${WORK_DIR} || true"
        }
    }
}