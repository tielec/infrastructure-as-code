@Library('jenkins-shared-lib') _

pipeline {
    agent { 
        label 'ec2-fleet' 
    }
    
    environment {
        // GitHubのDeploy Key名は固定
        GITHUB_DEPLOY_KEY_TITLE = 'tielec-dev-jenkins'
        
        // 一時的なSSH鍵ファイル名
        TEMP_KEY_FILE = "temp_deploy_key_${BUILD_NUMBER}"
        TEMP_KEY_FILE_PUB = "${TEMP_KEY_FILE}.pub"
    }
    
    stages {
        stage('Setup') {
            steps {
                script {
                    echo "=== GitHub Deploy Key & Jenkins Credential Setup ==="
                    echo "Action: ${params.ACTION}"
                    echo "Repository URL: ${params.REPO_URL}"
                    
                    // リポジトリ情報を抽出
                    def repoInfo = gitUtils.extractRepoInfo(params.REPO_URL)
                    env.REPO_OWNER = repoInfo[0]
                    env.REPO_NAME = repoInfo[1]
                    
                    // Jenkins Credential IDを生成
                    env.JENKINS_CREDENTIAL_ID = "github-deploy-key-${env.REPO_NAME}"
                    
                    echo "Repository: ${env.REPO_OWNER}/${env.REPO_NAME}"
                    echo "Deploy Key Title: ${env.GITHUB_DEPLOY_KEY_TITLE}"
                    echo "Jenkins Credential ID: ${env.JENKINS_CREDENTIAL_ID}"
                    echo "Read Only: ${params.READ_ONLY}"
                    
                    // Jenkins CLIのセットアップ
                    jenkinsCliUtils.setupCli(env.JENKINS_URL)
                    
                    // GitHub接続テスト
                    def connectionTest = gitUtils.testGitHubAppConnection()
                    if (connectionTest.success) {
                        echo "✅ GitHub接続: 成功"
                        echo "   Rate Limit: ${connectionTest.rate_limit.remaining}/${connectionTest.rate_limit.limit}"
                    } else {
                        error "❌ GitHub接続: 失敗"
                    }
                }
            }
        }
        
        stage('List Deploy Keys') {
            when {
                expression { params.ACTION == 'LIST' }
            }
            steps {
                script {
                    echo "\n=== 現在のDeploy Key一覧 ==="
                    
                    // GitHubのDeploy Keys
                    echo "\n--- GitHub Deploy Keys ---"
                    try {
                        def deployKeys = gitUtils.listDeployKeys([repoUrl: params.REPO_URL])
                        if (deployKeys && deployKeys.size() > 0) {
                            deployKeys.each { key ->
                                echo "ID: ${key.id}"
                                echo "  Title: ${key.title}"
                                echo "  Key: ${key.key?.take(50)}..."
                                echo "  Read Only: ${key.read_only}"
                                echo "  Created: ${key.created_at}"
                                echo "  Verified: ${key.verified}"
                                if (key.title == env.GITHUB_DEPLOY_KEY_TITLE) {
                                    echo "  ⭐ This is the managed deploy key"
                                }
                                echo "---"
                            }
                            echo "合計: ${deployKeys.size()}個のDeploy Key"
                        } else {
                            echo "Deploy Keyが登録されていません"
                        }
                    } catch (Exception e) {
                        echo "❌ GitHub Deploy Key一覧取得エラー: ${e.message}"
                    }
                    
                    // Jenkins Credentials
                    echo "\n--- Jenkins Credentials ---"
                    try {
                        def credentialsList = jenkinsCliUtils.listCredentials(params.CREDENTIAL_FOLDER)
                        if (credentialsList.contains(env.JENKINS_CREDENTIAL_ID)) {
                            echo "✅ Credential '${env.JENKINS_CREDENTIAL_ID}' が存在します"
                            
                            // 詳細情報を取得
                            def credXml = jenkinsCliUtils.getCredentialAsXml(
                                params.CREDENTIAL_FOLDER,
                                params.CREDENTIAL_DOMAIN,
                                env.JENKINS_CREDENTIAL_ID
                            )
                            echo "Credential詳細:\n${credXml}"
                        } else {
                            echo "Credential '${env.JENKINS_CREDENTIAL_ID}' は存在しません"
                        }
                    } catch (Exception e) {
                        echo "❌ Jenkins Credential確認エラー: ${e.message}"
                    }
                }
            }
        }
        
        stage('Create SSH Key Pair') {
            when {
                expression { params.ACTION in ['CREATE', 'UPDATE'] }
            }
            steps {
                script {
                    echo "\n=== SSH鍵ペア生成 ==="
                    
                    try {
                        // ED25519鍵を生成（より安全で短い）
                        sh """
                            ssh-keygen -t ed25519 -f '${env.WORKSPACE}/${env.TEMP_KEY_FILE}' -N '' -C 'jenkins-deploy-key@${env.REPO_NAME}'
                            chmod 600 '${env.WORKSPACE}/${env.TEMP_KEY_FILE}'*
                        """
                        
                        // 生成された鍵を読み込む
                        env.PRIVATE_KEY_CONTENT = readFile("${env.WORKSPACE}/${env.TEMP_KEY_FILE}").trim()
                        env.PUBLIC_KEY_CONTENT = readFile("${env.WORKSPACE}/${env.TEMP_KEY_FILE_PUB}").trim()
                        
                        echo "✅ SSH鍵ペア生成完了"
                        echo "公開鍵: ${env.PUBLIC_KEY_CONTENT.take(50)}..."
                        
                    } catch (Exception e) {
                        error "SSH鍵生成エラー: ${e.message}"
                    }
                }
            }
        }
        
        stage('Check Existing Resources') {
            when {
                expression { params.ACTION in ['CREATE', 'UPDATE'] }
            }
            steps {
                script {
                    echo "\n=== 既存リソース確認 ==="
                    
                    // GitHub Deploy Key確認
                    try {
                        def existingKeys = gitUtils.findDeployKeysByTitle(
                            env.GITHUB_DEPLOY_KEY_TITLE,
                            [repoUrl: params.REPO_URL]
                        )
                        
                        if (existingKeys && existingKeys.size() > 0) {
                            env.EXISTING_DEPLOY_KEY_ID = existingKeys[0].id.toString()
                            echo "⚠️  既存のDeploy Key '${env.GITHUB_DEPLOY_KEY_TITLE}' が見つかりました (ID: ${env.EXISTING_DEPLOY_KEY_ID})"
                            
                            if (params.ACTION == 'CREATE') {
                                error "Deploy Keyが既に存在します。UPDATEアクションを使用してください。"
                            }
                        } else {
                            echo "✅ Deploy Key '${env.GITHUB_DEPLOY_KEY_TITLE}' は存在しません"
                            
                            if (params.ACTION == 'UPDATE') {
                                error "更新するDeploy Keyが存在しません。CREATEアクションを使用してください。"
                            }
                        }
                    } catch (Exception e) {
                        if (e.message.contains("既に存在") || e.message.contains("存在しません")) {
                            throw e
                        }
                        echo "Deploy Key確認エラー: ${e.message}"
                    }
                    
                    // Jenkins Credential確認
                    try {
                        def credentialsList = jenkinsCliUtils.listCredentials(params.CREDENTIAL_FOLDER)
                        env.CREDENTIAL_EXISTS = credentialsList.contains(env.JENKINS_CREDENTIAL_ID) ? 'true' : 'false'
                        
                        if (env.CREDENTIAL_EXISTS == 'true') {
                            echo "⚠️  既存のCredential '${env.JENKINS_CREDENTIAL_ID}' が見つかりました"
                        } else {
                            echo "✅ Credential '${env.JENKINS_CREDENTIAL_ID}' は存在しません"
                        }
                    } catch (Exception e) {
                        echo "Credential確認エラー: ${e.message}"
                        env.CREDENTIAL_EXISTS = 'false'
                    }
                }
            }
        }
        
        stage('Create/Update GitHub Deploy Key') {
            when {
                expression { params.ACTION in ['CREATE', 'UPDATE'] }
            }
            steps {
                script {
                    echo "\n=== GitHub Deploy Key ${params.ACTION} ==="
                    
                    try {
                        if (params.ACTION == 'UPDATE' && env.EXISTING_DEPLOY_KEY_ID) {
                            // 既存のDeploy Keyを削除
                            echo "既存のDeploy Keyを削除中..."
                            gitUtils.deleteDeployKey(
                                env.EXISTING_DEPLOY_KEY_ID,
                                [repoUrl: params.REPO_URL]
                            )
                            echo "✅ 既存のDeploy Key削除完了"
                        }
                        
                        // 新しいDeploy Keyを作成
                        echo "新しいDeploy Keyを作成中..."
                        def deployKeyResult = gitUtils.createDeployKey(
                            env.GITHUB_DEPLOY_KEY_TITLE,
                            env.PUBLIC_KEY_CONTENT,
                            params.READ_ONLY,
                            [repoUrl: params.REPO_URL]
                        )
                        
                        env.NEW_DEPLOY_KEY_ID = deployKeyResult.id.toString()
                        echo "✅ Deploy Key ${params.ACTION}成功:"
                        echo "   ID: ${env.NEW_DEPLOY_KEY_ID}"
                        echo "   Title: ${deployKeyResult.title}"
                        echo "   Read Only: ${deployKeyResult.read_only}"
                        echo "   Verified: ${deployKeyResult.verified}"
                        
                    } catch (Exception e) {
                        error "GitHub Deploy Key ${params.ACTION}エラー: ${e.message}"
                    }
                }
            }
        }
        
        stage('Create/Update Jenkins Credential') {
            when {
                expression { params.ACTION in ['CREATE', 'UPDATE'] }
            }
            steps {
                script {
                    echo "\n=== Jenkins Credential ${params.ACTION} ==="
                    
                    try {
                        if (env.CREDENTIAL_EXISTS == 'true') {
                            // 既存のCredentialを更新
                            echo "既存のCredentialを更新中..."
                            
                            def credentialXml = """<com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey>
  <scope>GLOBAL</scope>
  <id>${env.JENKINS_CREDENTIAL_ID}</id>
  <description>GitHub Deploy Key for ${env.REPO_OWNER}/${env.REPO_NAME} - Updated ${new Date()}</description>
  <username>git</username>
  <privateKeySource class="com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey\$DirectEntryPrivateKeySource">
    <privateKey>${env.PRIVATE_KEY_CONTENT}</privateKey>
  </privateKeySource>
</com.cloudbees.jenkins.plugins.sshcredentials.impl.BasicSSHUserPrivateKey>"""
                            
                            writeFile file: 'credential.xml', text: credentialXml
                            
                            jenkinsCliUtils.updateCredentialByXml(
                                params.CREDENTIAL_FOLDER,
                                params.CREDENTIAL_DOMAIN,
                                env.JENKINS_CREDENTIAL_ID,
                                'credential.xml'
                            )
                            echo "✅ Credential更新完了"
                            
                        } else {
                            // 新規作成
                            echo "新しいCredentialを作成中..."
                            jenkinsCliUtils.createCredential(
                                params.CREDENTIAL_FOLDER,
                                params.CREDENTIAL_DOMAIN,
                                [
                                    type: 'sshKey',
                                    id: env.JENKINS_CREDENTIAL_ID,
                                    description: "GitHub Deploy Key for ${env.REPO_OWNER}/${env.REPO_NAME}",
                                    username: 'git',
                                    privateKey: env.PRIVATE_KEY_CONTENT
                                ]
                            )
                            echo "✅ Credential作成完了"
                        }
                        
                    } catch (Exception e) {
                        error "Jenkins Credential ${params.ACTION}エラー: ${e.message}"
                    }
                }
            }
        }
        
        stage('Delete Resources') {
            when {
                expression { params.ACTION == 'DELETE' }
            }
            steps {
                script {
                    echo "\n=== リソース削除 ==="
                    
                    def deletionResults = [:]
                    
                    // GitHub Deploy Key削除
                    echo "\n--- GitHub Deploy Key削除 ---"
                    try {
                        def deployKeys = gitUtils.findDeployKeysByTitle(
                            env.GITHUB_DEPLOY_KEY_TITLE,
                            [repoUrl: params.REPO_URL]
                        )
                        
                        if (deployKeys && deployKeys.size() > 0) {
                            deployKeys.each { key ->
                                try {
                                    gitUtils.deleteDeployKey(
                                        key.id.toString(),
                                        [repoUrl: params.REPO_URL]
                                    )
                                    echo "✅ Deploy Key削除完了 (ID: ${key.id})"
                                    deletionResults['github_deploy_key'] = 'success'
                                } catch (Exception e) {
                                    echo "❌ Deploy Key削除エラー (ID: ${key.id}): ${e.message}"
                                    deletionResults['github_deploy_key'] = 'failed'
                                }
                            }
                        } else {
                            echo "削除するDeploy Keyが見つかりません"
                            deletionResults['github_deploy_key'] = 'not_found'
                        }
                    } catch (Exception e) {
                        echo "❌ Deploy Key検索エラー: ${e.message}"
                        deletionResults['github_deploy_key'] = 'error'
                    }
                    
                    // Jenkins Credential削除
                    echo "\n--- Jenkins Credential削除 ---"
                    try {
                        jenkinsCliUtils.deleteCredential(
                            params.CREDENTIAL_FOLDER,
                            params.CREDENTIAL_DOMAIN,
                            env.JENKINS_CREDENTIAL_ID
                        )
                        echo "✅ Credential削除完了"
                        deletionResults['jenkins_credential'] = 'success'
                    } catch (Exception e) {
                        if (e.message.contains('404')) {
                            echo "削除するCredentialが見つかりません"
                            deletionResults['jenkins_credential'] = 'not_found'
                        } else {
                            echo "❌ Credential削除エラー: ${e.message}"
                            deletionResults['jenkins_credential'] = 'failed'
                        }
                    }
                    
                    // 削除結果サマリー
                    echo "\n=== 削除結果サマリー ==="
                    deletionResults.each { resource, status ->
                        def statusIcon = status == 'success' ? '✅' : status == 'not_found' ? '⚠️' : '❌'
                        echo "${statusIcon} ${resource}: ${status}"
                    }
                }
            }
        }
        
        stage('Verify Setup') {
            when {
                expression { params.ACTION in ['CREATE', 'UPDATE'] }
            }
            steps {
                script {
                    echo "\n=== セットアップ検証 ==="
                    
                    def verificationPassed = true
                    
                    // GitHub Deploy Key検証
                    echo "\n--- GitHub Deploy Key検証 ---"
                    try {
                        def deployKey = gitUtils.getDeployKey(
                            env.NEW_DEPLOY_KEY_ID,
                            [repoUrl: params.REPO_URL]
                        )
                        echo "✅ Deploy Key確認:"
                        echo "   Title: ${deployKey.title}"
                        echo "   Read Only: ${deployKey.read_only}"
                        echo "   Verified: ${deployKey.verified}"
                        
                        if (deployKey.title != env.GITHUB_DEPLOY_KEY_TITLE) {
                            echo "⚠️  Deploy Keyのタイトルが一致しません"
                            verificationPassed = false
                        }
                        if (deployKey.read_only != params.READ_ONLY) {
                            echo "⚠️  Deploy Keyの権限設定が一致しません"
                            verificationPassed = false
                        }
                    } catch (Exception e) {
                        echo "❌ Deploy Key検証エラー: ${e.message}"
                        verificationPassed = false
                    }
                    
                    // Jenkins Credential検証
                    echo "\n--- Jenkins Credential検証 ---"
                    try {
                        def credXml = jenkinsCliUtils.getCredentialAsXml(
                            params.CREDENTIAL_FOLDER,
                            params.CREDENTIAL_DOMAIN,
                            env.JENKINS_CREDENTIAL_ID
                        )
                        if (credXml.contains(env.JENKINS_CREDENTIAL_ID)) {
                            echo "✅ Credential確認: ${env.JENKINS_CREDENTIAL_ID}"
                        } else {
                            echo "❌ Credentialが見つかりません"
                            verificationPassed = false
                        }
                    } catch (Exception e) {
                        echo "❌ Credential検証エラー: ${e.message}"
                        verificationPassed = false
                    }
                    
                    if (verificationPassed) {
                        echo "\n✅ すべての検証に成功しました"
                        echo "\n=== セットアップ完了 ==="
                        echo "GitHubリポジトリ: ${env.REPO_OWNER}/${env.REPO_NAME}"
                        echo "Deploy Key: ${env.GITHUB_DEPLOY_KEY_TITLE} (${params.READ_ONLY ? '読み取り専用' : '読み書き可能'})"
                        echo "Jenkins Credential: ${env.JENKINS_CREDENTIAL_ID}"
                        echo "\nJenkinsジョブでこのCredentialを使用してリポジトリにアクセスできます。"
                    } else {
                        error "検証に失敗しました。ログを確認してください。"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                // 一時ファイルのクリーンアップ
                echo "\n=== クリーンアップ ==="
                sh """
                    rm -f '${env.WORKSPACE}/${env.TEMP_KEY_FILE}' || true
                    rm -f '${env.WORKSPACE}/${env.TEMP_KEY_FILE_PUB}' || true
                    rm -f '${env.WORKSPACE}/credential.xml' || true
                """
                echo "一時ファイルを削除しました"
                
                // 実行サマリー
                echo "\n=== 実行サマリー ==="
                echo "実行日時: ${new Date()}"
                echo "アクション: ${params.ACTION}"
                echo "リポジトリ: ${env.REPO_OWNER}/${env.REPO_NAME}"
                echo "Deploy Key: ${env.GITHUB_DEPLOY_KEY_TITLE}"
                echo "Credential ID: ${env.JENKINS_CREDENTIAL_ID}"
            }
        }
        
        success {
            echo "\n🎉 パイプラインが正常に完了しました！"
        }
        
        failure {
            echo "\n❌ パイプラインが失敗しました。ログを確認してください。"
        }
    }
}