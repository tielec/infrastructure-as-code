@Library('jenkins-shared-lib') _

/**
 * Pulumi Infrastructure Pipeline
 * 汎用的なPulumiスタック管理パイプライン
 */
pipeline {
    agent {
        label 'ec2-fleet'
    }
    
    environment {
        // ディレクトリ構造
        SOURCE_CODE_DIR = 'source-code'
        JENKINS_REPO_DIR = 'jenkins-repo'
        REPORT_DIR = 'pulumi-deployment-report'
        HTML_DIR = "${REPORT_DIR}/html"
        ARTIFACTS_DIR = "${REPORT_DIR}/artifacts"
        
        // Python仮想環境
        VENV_PATH = "${WORKSPACE}/venv"
        
        // スクリプトとテンプレートのパス
        SCRIPT_PATH = 'jenkins/jobs/pipeline/infrastructure/pulumi-stack-action/src'
        TEMPLATE_PATH = 'jenkins/jobs/pipeline/infrastructure/pulumi-stack-action/templates'
        
        // タイムスタンプ
        TIME_STAMP = sh(script: 'TZ="Asia/Tokyo" date "+%Y/%m/%d %H:%M:%S"', returnStdout: true).trim()
        BUILD_TIME_STAMP = sh(script: 'TZ="Asia/Tokyo" date "+%Y%m%d-%H%M%S"', returnStdout: true).trim()
        
        // 環境別の設定（ENVIRONMENTパラメータに基づく）
        PULUMI_STACK_NAME = "${params.ENVIRONMENT}"
        PULUMI_CONFIG_PASSPHRASE_ID = "${params.PULUMI_CONFIG_PASSPHRASE_CREDENTIAL_ID ?: 'pulumi-config-passphrase'}"
        
    }
    
    stages {
        stage('Initialize and Validate') {
            steps {
                script {
                    currentBuild.displayName = "#${env.BUILD_NUMBER} - ${params.ENVIRONMENT} ${params.ACTION}"
                    
                    withCredentials([string(credentialsId: 'pulumi-s3bucket-name', variable: 'S3_BUCKET_NAME')]) {
                        env.PULUMI_BACKEND_URL = "s3://${S3_BUCKET_NAME}"
                        echo "Pulumi backend URL set to: ${env.PULUMI_BACKEND_URL}"
                    }
                    
                    validateParameters()
                    prepareWorkspace()
                    checkoutRepositories()
                    verifyAwsCredentials()                   
                    // Pulumi設定ファイルの処理（早期検証）
                    dir("${SOURCE_CODE_DIR}/${params.PULUMI_PROJECT_PATH}") {
                        handlePulumiConfigFile()
                    }                    
                }
            }
        }
                
        stage('Execute Pulumi Operations') {
            environment {
                // AWSリージョン設定
                AWS_REGION            = "${params.AWS_REGION}"
                AWS_DEFAULT_REGION    = "${params.AWS_REGION}"
                
                // Pulumi設定
                PULUMI_BACKEND_URL       = "${env.PULUMI_BACKEND_URL}"
                PULUMI_CONFIG_PASSPHRASE = credentials("${env.PULUMI_CONFIG_PASSPHRASE_ID}")
                PULUMI_SKIP_UPDATE_CHECK = 'true'
                PULUMI_ACTION_ERROR = 'false'
            }
            stages {
                stage('Setup Environment') {
                    steps {
                        script {
                            printHeader()
                            setupEnvironment(params.PROJECT_TYPE)
                        }
                    }
                }
                
                stage('Verify Authentication') {
                    steps {
                        script {
                            verifyAWSAuthentication()
                            loginToPulumi()
                        }
                    }
                }
                
                stage('Setup Project') {
                    steps {
                        script {
                            dir("${SOURCE_CODE_DIR}/${params.PULUMI_PROJECT_PATH}") {
                                setupProject(params.PROJECT_TYPE)
                                selectOrCreateStack(env.PULUMI_STACK_NAME)
                            }
                        }
                    }
                }
                
                
                stage('Collect Pre-Action Stack Info') {
                    when {
                        expression { 
                            (params.ACTION == 'destroy' || params.ACTION == 'deploy' || params.ACTION == 'refresh') && params.GENERATE_REPORT 
                        }
                    }
                    steps {
                        script {
                            dir("${SOURCE_CODE_DIR}/${params.PULUMI_PROJECT_PATH}") {
                                collectStackInfo('pre-action')
                            }
                        }
                    }
                }
                
                stage('Execute Pulumi Action') {
                    steps {
                        script {
                            // スクリプトを事前にプロジェクトディレクトリにコピー
                            sh """
                                echo "スクリプトをコピー中..."
                                cp ${JENKINS_REPO_DIR}/jenkins/jobs/pipeline/infrastructure/pulumi-stack-action/scripts/*.sh ${SOURCE_CODE_DIR}/${params.PULUMI_PROJECT_PATH}/
                                chmod +x ${SOURCE_CODE_DIR}/${params.PULUMI_PROJECT_PATH}/*.sh
                            """
                            
                            dir("${SOURCE_CODE_DIR}/${params.PULUMI_PROJECT_PATH}") {
                                // AWS認証情報を条件付きで設定
                                if (params.AWS_ACCESS_KEY_ID && params.AWS_SECRET_ACCESS_KEY) {
                                    withEnv([
                                        "AWS_ACCESS_KEY_ID=${params.AWS_ACCESS_KEY_ID}",
                                        "AWS_SECRET_ACCESS_KEY=${params.AWS_SECRET_ACCESS_KEY}",
                                        "AWS_SESSION_TOKEN=${params.AWS_SESSION_TOKEN ?: ''}"
                                    ]) {
                                        try {
                                            executePulumiAction(params.ACTION)
                                        } catch (Exception e) {
                                            echo "警告: Pulumiアクション実行中にエラーが発生しました: ${e.message}"
                                            env.PULUMI_ACTION_ERROR = 'true'
                                        }
                                    }
                                } else {
                                    // IAMロール使用時
                                    try {
                                        executePulumiAction(params.ACTION)
                                    } catch (Exception e) {
                                        echo "警告: Pulumiアクション実行中にエラーが発生しました: ${e.message}"
                                        env.PULUMI_ACTION_ERROR = 'true'
                                    }
                                }
                            }
                        }
                    }
                }
                
                stage('Collect Post-Action Stack Info') {
                    when {
                        expression { 
                            (params.ACTION == 'destroy' || params.ACTION == 'deploy' || params.ACTION == 'refresh') && params.GENERATE_REPORT 
                        }
                    }
                    steps {
                        script {
                            dir("${SOURCE_CODE_DIR}/${params.PULUMI_PROJECT_PATH}") {
                                collectStackInfo('post-action')
                            }
                        }
                    }
                }
                
                stage('Process Results') {
                    when {
                        expression { 
                            params.ACTION == 'deploy' || params.ACTION == 'destroy' || params.ACTION == 'refresh'
                        }
                    }
                    steps {
                        script {
                            if (params.GENERATE_REPORT) {
                                // レポート生成
                                try {
                                    echo "HTMLレポートを生成..."
                                    generatePythonHtmlReport()
                                } catch (Exception e) {
                                    echo "警告: HTMLレポートの生成中にエラーが発生しました: ${e.message}"
                                    currentBuild.result = 'UNSTABLE'
                                }
                            } else {
                                // スタック出力の処理（レポート生成しない場合）
                                if (params.ACTION == 'deploy' && fileExists("${ARTIFACTS_DIR}/stack-outputs-post-action.json")) {
                                    processStackOutputs()
                                }
                            }
                            
                            // Pulumiアクションでエラーがあった場合、最終的にUNSTABLEに設定
                            if (env.PULUMI_ACTION_ERROR == 'true') {
                                echo "Pulumiアクション実行中にエラーが発生したため、ビルドをUNSTABLEに設定します"
                                currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                publishArtifacts()
                printSummary()
            }
        }
        
        success {
            echo "✅ Pulumiパイプラインが正常に完了しました"
        }
        
        failure {
            echo "❌ Pulumiパイプラインが失敗しました。ログを確認してください"
        }
        
        cleanup {
            cleanWs()
        }
    }
}

// ================================================================================
// Helper Functions
// ================================================================================

/**
 * パラメータの検証
 */
def validateParameters() {
    echo "パラメータの検証中..."
    
    // AWS認証方法の確認
    if (!params.AWS_ACCESS_KEY_ID || !params.AWS_SECRET_ACCESS_KEY) {
        echo "ℹ️ AWS認証情報が指定されていません。EC2インスタンスロールを使用します"
        echo "   実行環境: ${env.NODE_NAME}"
    } else {
        echo "ℹ️ 明示的に指定されたAWS認証情報を使用します"
    }
    
    if (!params.PULUMI_PROJECT_PATH) {
        error "Pulumiプロジェクトパスが指定されていません"
    }
    
    // 環境とアクションの組み合わせチェック
    if (params.ENVIRONMENT == 'prod' && params.ACTION == 'destroy') {
        echo "⚠️ 警告: 本番環境のリソースを削除しようとしています"
    }
    
    echo "✅ パラメータ検証完了"
}

/**
 * AWS認証情報の検証（Jenkinsノード上で実行）
 */
def verifyAwsCredentials() {
    echo """
        =============================================
        AWS認証情報の検証
        =============================================
        環境: ${params.ENVIRONMENT}
        リージョン: ${params.AWS_REGION}
        =============================================
    """.stripIndent()
    
    // AWS認証情報が提供されている場合のみ検証
    if (params.AWS_ACCESS_KEY_ID && params.AWS_SECRET_ACCESS_KEY) {
        // AWS認証チェック用のユーティリティを初期化
        def awsUtils = awsUtils()
        
        try {
            def authResult
            if (params.ENVIRONMENT == 'prod') {
                // 本番環境の認証チェック
                authResult = awsUtils.general.verifyProdAwsCredentials(
                    params.AWS_ACCESS_KEY_ID,
                    params.AWS_SECRET_ACCESS_KEY,
                    params.AWS_SESSION_TOKEN,
                    params.AWS_REGION
                )
            } else {
                // 開発環境の認証チェック
                authResult = awsUtils.general.verifyDevAwsCredentials(
                    params.AWS_ACCESS_KEY_ID,
                    params.AWS_SECRET_ACCESS_KEY,
                    params.AWS_SESSION_TOKEN,
                    params.AWS_REGION
                )
            }
            
            // 認証結果を環境変数に保存（後続ステージで使用）
            env.AWS_ACCOUNT_ID = authResult.accountId
            env.AWS_PRINCIPAL_ARN = authResult.arn
            
            echo """
                ✅ AWS認証検証完了
                アカウントID: ${authResult.accountId}
                プリンシパル: ${authResult.arn}
            """.stripIndent()
            
        } catch (Exception e) {
            error "AWS認証検証に失敗しました: ${e.message}"
        }
    } else {
        echo """
            ℹ️ IAMロールベースの認証を使用
            認証検証はDockerコンテナ内で実行されます
        """.stripIndent()
    }
}

/**
 * 破壊的操作の確認（dev/prod両環境対応）
 * @return 承認者のID（承認された場合）、null（エラーの場合）
 */
def confirmDestructiveAction() {
    def envLabel = params.ENVIRONMENT == 'prod' ? '本番環境' : '開発環境'
    def actionLabel = params.ACTION == 'deploy' ? 'デプロイ' : '削除'
    def warningIcon = params.ENVIRONMENT == 'prod' ? '⚠️' : 'ℹ️'
    
    // Build User Vars Pluginでビルド開始者を取得
    wrap([$class: 'BuildUser']) {
        def buildUserId = env.BUILD_USER_ID ?: 'unknown'
        def buildUserName = env.BUILD_USER ?: 'Unknown User'
        
        // 事前にコンソールに詳細を表示
        echo """
        ====================================
        ${warningIcon} ${envLabel} - ${actionLabel.toUpperCase()}
        ====================================
        対象: ${params.PULUMI_PROJECT_PATH}
        環境: ${params.ENVIRONMENT.toUpperCase()} (${env.AWS_ACCOUNT_ID})
        アクション: ${params.ACTION}
        実行者: ${buildUserName} (${buildUserId})
        ====================================
        """
        
        // シンプルなメッセージ
        def confirmMessage = "${warningIcon} ${envLabel} ${actionLabel} - ${params.PULUMI_PROJECT_PATH}"
        
        // シンプルなボタンラベル
        def okButtonLabel = params.ENVIRONMENT == 'prod' ? "承認（本番）" : "承認"
        def cancelButtonLabel = "中止"
        
        try {
            def userInput = input(
                id: 'DestructiveActionConfirmation',
                message: confirmMessage,
                parameters: [
                    booleanParam(
                        name: 'CONFIRM',
                        defaultValue: false,
                        description: "内容確認済み"
                    )
                ],
                submitterParameter: 'APPROVER',
                ok: okButtonLabel,
                cancel: cancelButtonLabel
            )
            
            // userInputはMapとして返される（CONFIRM: boolean, APPROVER: string）
            if (!userInput.CONFIRM) {
                error "${envLabel}への${actionLabel}がキャンセルされました（チェックボックス未選択）"
            }
            
            // 自己承認のチェック（大文字小文字を無視、前後の空白を除去）
            def normalizedBuildUser = buildUserId.toLowerCase().trim()
            def normalizedApprover = userInput.APPROVER.toLowerCase().trim()
            
            echo "承認チェック - 実行者: '${buildUserId}' / 承認者: '${userInput.APPROVER}'"
            
            if (normalizedApprover == normalizedBuildUser) {
                error "❌ 自己承認は許可されていません。実行者（${buildUserId}）と承認者（${userInput.APPROVER}）が同じです。別の承認者による承認が必要です。"
            }
            
            echo "✅ ${userInput.APPROVER}が承認 → ${envLabel}への${actionLabel}を実行します"
            echo "   実行者: ${buildUserId} / 承認者: ${userInput.APPROVER}"
            
            // 承認者情報を返す
            return userInput.APPROVER
            
        } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
            // キャンセルボタンが押された場合の処理
            error "${envLabel}への${actionLabel}が中止されました"
        }
    }
}

/**
 * ワークスペースの準備
 */
def prepareWorkspace() {
    sh """
        mkdir -p ${SOURCE_CODE_DIR} ${JENKINS_REPO_DIR} ${REPORT_DIR} ${HTML_DIR} ${ARTIFACTS_DIR}
        chmod -R 777 ${REPORT_DIR}
    """
}

/**
 * リポジトリのチェックアウト
 */
def checkoutRepositories() {
    // Pulumiプロジェクトのリポジトリ
    dir(env.SOURCE_CODE_DIR) {
        gitUtils.checkoutRepository(
            params.PULUMI_REPO_URL,
            params.PULUMI_TARGET_BRANCH,
            env.GITHUB_APP_CREDENTIALS_ID
        )
    }

    // Jenkinsパイプラインのリポジトリ（レポートツール用）
    dir(env.JENKINS_REPO_DIR) {
        gitUtils.checkoutRepository(
            env.GIT_INFRASTRUCTURE_REPO_URL,
            env.GIT_INFRASTRUCTURE_REPO_BRANCH,
            env.GITHUB_APP_CREDENTIALS_ID
        )
    }
}

/**
 * ヘッダー情報の出力
 */
def printHeader() {
    echo """
        =============================================
        Pulumi Infrastructure Pipeline
        =============================================
        実行時刻: ${env.TIME_STAMP}
        環境: ${params.ENVIRONMENT}
        アクション: ${params.ACTION}
        スタック: ${env.PULUMI_STACK_NAME}
        プロジェクト: ${params.PULUMI_PROJECT_PATH}
        プロジェクトタイプ: ${params.PROJECT_TYPE}
        AWSアカウント: ${env.AWS_ACCOUNT_ID}
        AWSリージョン: ${params.AWS_REGION}
        Pulumiバックエンド: ${env.PULUMI_BACKEND_URL}
        確認スキップ: ${params.SKIP_CONFIRMATION ? 'はい' : 'いいえ'}
        Refresh実行: ${params.ACTION in ['deploy', 'preview', 'destroy'] ? 'あり' : params.ACTION == 'refresh' ? '単独実行' : 'なし'}
        =============================================
    """.stripIndent()
}

/**
 * 環境のセットアップ
 */
def setupEnvironment(projectType) {
    def setupCommands = getEnvironmentSetupCommands(projectType)
    sh """
        # プロジェクトタイプ別のセットアップ
        ${setupCommands}
        
        # Pulumiバージョンの確認
        echo "Pulumiバージョン:"
        pulumi version
    """
}

/**
 * AWS認証の確認
 */
def verifyAWSAuthentication() {
    sh '''
        echo "AWS認証情報の確認..."
        
        # 空の認証情報は環境変数から削除
        if [ -z "${AWS_ACCESS_KEY_ID}" ]; then
            unset AWS_ACCESS_KEY_ID
            echo "AWS_ACCESS_KEY_ID: 未設定（IAMロール使用）"
        else
            echo "AWS_ACCESS_KEY_ID: 設定済み"
        fi
        
        if [ -z "${AWS_SECRET_ACCESS_KEY}" ]; then
            unset AWS_SECRET_ACCESS_KEY
            echo "AWS_SECRET_ACCESS_KEY: 未設定（IAMロール使用）"
        else
            echo "AWS_SECRET_ACCESS_KEY: 設定済み"
        fi
        
        if [ -z "${AWS_SESSION_TOKEN}" ]; then
            unset AWS_SESSION_TOKEN
            echo "AWS_SESSION_TOKEN: 未設定"
        else
            echo "AWS_SESSION_TOKEN: 設定済み"
        fi
        
        echo "AWS_REGION: ${AWS_REGION}"
        echo "AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}"
        
        aws sts get-caller-identity || {
            echo "AWS認証に失敗しました。認証情報を確認してください。"
            exit 1
        }
    '''
}

/**
 * Pulumiへのログイン
 */
def loginToPulumi() {
    sh '''
        echo "S3バックエンドへのログイン..."
        echo "PULUMI_BACKEND_URL: ${PULUMI_BACKEND_URL}"
        echo "AWS_REGION: ${AWS_REGION}"
        echo "AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}"
        
        if [ -z "${PULUMI_BACKEND_URL}" ]; then
            echo "エラー: PULUMI_BACKEND_URLが設定されていません"
            exit 1
        fi
        
        pulumi login "${PULUMI_BACKEND_URL}" || {
            echo "Pulumiログインに失敗しました。"
            echo "試行したバックエンドURL: ${PULUMI_BACKEND_URL}"
            echo "現在のリージョン設定: AWS_REGION=${AWS_REGION}, AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}"
            echo "AWS認証情報とリージョン設定を確認してください"
            exit 1
        }
        
        echo "現在のユーザー情報:"
        pulumi whoami -v
    '''
}

/**
 * プロジェクトのセットアップ
 */
def setupProject(projectType) {
    def setupScript = getProjectSetupScript(projectType)
    sh setupScript
}

/**
 * スタックの選択または作成
 */
def selectOrCreateStack(stackName) {
    sh """
        echo "スタックの確認..."
        echo "現在のディレクトリ: \$(pwd)"
        
        # Pulumi.yamlの存在確認
        if [ ! -f Pulumi.yaml ]; then
            echo "エラー: Pulumi.yamlが見つかりません"
            echo "ディレクトリ内容:"
            ls -la
            echo ""
            echo "注意: PULUMI_PROJECT_PATHは'pulumi/test-s3'のような完全パスを指定してください"
            exit 1
        fi
        
        # プロジェクト名を取得
        PROJECT_NAME=\$(grep '^name:' Pulumi.yaml | sed 's/name: *//' | tr -d '[:space:]')
        echo "プロジェクト名: \${PROJECT_NAME}"
        
        if pulumi stack ls 2>&1 | grep -q "^${stackName}"; then
            echo "既存のスタック '${stackName}' を選択します"
            pulumi stack select ${stackName}
        else
            echo "新しいスタック '${stackName}' を作成します"
            pulumi stack init ${stackName}
        fi
        
        echo "現在のスタック:"
        pulumi stack
    """
}


/**
 * スタック情報の収集
 */
def collectStackInfo(actionType) {
    echo "スタック情報を収集中 (${actionType})..."
    
    // ファイル名にactionTypeを含める
    sh """
        # スタック情報のエクスポート
        pulumi stack export > ${WORKSPACE}/${ARTIFACTS_DIR}/stack-export-${actionType}.json || echo "{}" > ${WORKSPACE}/${ARTIFACTS_DIR}/stack-export-${actionType}.json
        
        # スタック履歴の取得
        pulumi stack history --json > ${WORKSPACE}/${ARTIFACTS_DIR}/stack-history-${actionType}.json || echo "[]" > ${WORKSPACE}/${ARTIFACTS_DIR}/stack-history-${actionType}.json
        
        # 現在の設定の保存
        pulumi config --json > ${WORKSPACE}/${ARTIFACTS_DIR}/stack-config-${actionType}.json || echo "{}" > ${WORKSPACE}/${ARTIFACTS_DIR}/stack-config-${actionType}.json
        
        # スタック出力の保存
        pulumi stack output --json > ${WORKSPACE}/${ARTIFACTS_DIR}/stack-outputs-${actionType}.json || echo "{}" > ${WORKSPACE}/${ARTIFACTS_DIR}/stack-outputs-${actionType}.json
        
        # メタデータの作成
        echo '{"action": "${actionType}", "timestamp": "'\$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}' > ${WORKSPACE}/${ARTIFACTS_DIR}/action-metadata-${actionType}.json
    """
    
    // 依存関係グラフの生成
    generateDependencyGraph(actionType)
    
    echo "スタック情報の収集が完了しました (${actionType})"
}

/**
 * 依存関係グラフの生成
 */
def generateDependencyGraph(actionType) {
    echo "依存関係グラフを生成 (${actionType})..."
    
    sh """
        # グラフの生成を試行
        pulumi stack graph ${WORKSPACE}/${ARTIFACTS_DIR}/stack-graph-${actionType}.dot 2>/dev/null || {
            echo "標準的なグラフ生成に失敗。リダイレクトを試行..."
            pulumi stack graph > ${WORKSPACE}/${ARTIFACTS_DIR}/stack-graph-${actionType}.dot 2>&1 || {
                echo "グラフ生成に失敗。空のグラフを作成..."
                echo "digraph G {}" > ${WORKSPACE}/${ARTIFACTS_DIR}/stack-graph-${actionType}.dot
            }
        }
        
        # グラフファイルの検証
        if [ -s ${WORKSPACE}/${ARTIFACTS_DIR}/stack-graph-${actionType}.dot ]; then
            echo "DOTファイルサイズ: \$(wc -c < ${WORKSPACE}/${ARTIFACTS_DIR}/stack-graph-${actionType}.dot) bytes"
        else
            echo "警告: 空のグラフファイルが生成されました"
        fi
    """
}

/**
 * Pulumiアクションの実行（常にnon-interactive mode）
 */
def executePulumiAction(action) {
    // Jenkinsでは常に--yesフラグを使用（non-interactive mode）
    
    switch(action) {
        case 'preview':
            // preview: refresh + preview
            echo "====================================="
            echo "Preview実行（refresh + preview）"
            echo "====================================="
            
            // Refresh実行
            sh """
                echo "ステップ 1/2: Refresh実行"
                ./execute-pulumi.sh refresh "${WORKSPACE}" "${ARTIFACTS_DIR}"
            """
            
            // Preview実行
            sh """
                echo "ステップ 2/2: Preview実行"
                ./execute-pulumi.sh preview "${WORKSPACE}" "${ARTIFACTS_DIR}"
            """
            break
            
        case 'deploy':
            // deploy: refresh + preview + deploy
            echo "====================================="
            echo "Deploy実行（refresh + preview + deploy）"
            echo "====================================="
            
            // Refresh実行
            sh """
                echo "ステップ 1/3: Refresh実行"
                ./execute-pulumi.sh refresh "${WORKSPACE}" "${ARTIFACTS_DIR}"
            """
            
            // Preview実行
            sh """
                echo "ステップ 2/3: Preview実行"
                ./execute-pulumi.sh preview "${WORKSPACE}" "${ARTIFACTS_DIR}"
            """
            
            // Deploy実行
            sh """
                echo "ステップ 3/3: Deploy実行"
                ./execute-pulumi.sh deploy "${WORKSPACE}" "${ARTIFACTS_DIR}"
            """
            break
            
        case 'refresh':
            // refresh: refresh only
            echo "====================================="
            echo "Refresh単独実行"
            echo "====================================="
            
            sh """
                ./execute-pulumi.sh refresh "${WORKSPACE}" "${ARTIFACTS_DIR}"
            """
            break
            
        case 'destroy':
            // destroy: refresh + destroy
            echo "====================================="
            echo "Destroy実行（refresh + destroy）"
            echo "====================================="
            
            // Refresh実行（destroy前は必須）
            sh """
                echo "ステップ 1/2: Refresh実行（destroy前の必須処理）"
                ./execute-pulumi.sh refresh "${WORKSPACE}" "${ARTIFACTS_DIR}"
            """
            
            // Destroy実行
            sh """
                echo "ステップ 2/2: Destroy実行"
                ./execute-pulumi.sh destroy "${WORKSPACE}" "${ARTIFACTS_DIR}"
            """
            break
            
        default:
            error "不明なアクション: ${action}"
    }
}

/**
 * スタック出力の処理
 */
def processStackOutputs() {
    script {
        def stackOutputsFile = "${ARTIFACTS_DIR}/stack-outputs-post-action.json"
        if (fileExists(stackOutputsFile)) {
            def outputs = readJSON file: stackOutputsFile
            
            echo "=== スタック出力情報 ==="
            outputs.each { key, value ->
                echo "${key}: ${value}"
            }
        }
    }
}

/**
 * 環境セットアップコマンドの取得
 */
def getEnvironmentSetupCommands(projectType) {
    def commands = [
        'nodejs': 'echo "Node.js環境の確認..."',
        'python': 'echo "Python環境の確認..."'
    ]
    return commands[projectType] ?: "echo 'No specific setup required'"
}

/**
 * プロジェクトセットアップスクリプトの取得
 */
def getProjectSetupScript(projectType) {
    def scripts = [
        'nodejs': '''
            if [ -f package.json ]; then
                echo "Node.js依存関係のインストール..."
                npm install
                
                if [ -f tsconfig.json ]; then
                    echo "TypeScriptコンパイルチェック..."
                    npx tsc --noEmit || true
                fi
            fi
        ''',
        'python': '''
            if [ -f requirements.txt ]; then
                echo "Python依存関係のインストール..."
                pip3 install -r requirements.txt
            fi
            
            if [ -f Pipfile ]; then
                echo "Pipenv依存関係のインストール..."
                pip3 install pipenv
                pipenv install
            fi
        '''
    ]
    return scripts[projectType] ?: "echo 'No specific project setup required'"
}

/**
 * PythonベースのHTMLレポートを生成
 */
def generatePythonHtmlReport() {
    sh """
        # Graphvizの確認とインストール（AMIに含まれていない場合のため）
        if ! command -v dot &> /dev/null; then
            echo "Graphvizをインストール..."
            sudo yum install -y graphviz || sudo apt-get install -y graphviz
        fi
        
        # Python仮想環境のセットアップ
        echo "Python仮想環境のセットアップ..."
        python3 -m venv ${VENV_PATH}
        . ${VENV_PATH}/bin/activate
        
        # 必要なパッケージのインストール
        pip install --upgrade pip
        pip install jinja2 matplotlib seaborn numpy
        
        # Pythonスクリプトファイルのコピー
        echo "Pythonスクリプトファイルのコピー..."
        cp ${JENKINS_REPO_DIR}/${SCRIPT_PATH}/main.py .
        cp ${JENKINS_REPO_DIR}/${SCRIPT_PATH}/config.py .
        cp ${JENKINS_REPO_DIR}/${SCRIPT_PATH}/dot_processor.py .
        cp ${JENKINS_REPO_DIR}/${SCRIPT_PATH}/report_generator.py .
        cp ${JENKINS_REPO_DIR}/${SCRIPT_PATH}/data_processor.py .
        cp ${JENKINS_REPO_DIR}/${SCRIPT_PATH}/charts.py .
        cp ${JENKINS_REPO_DIR}/${SCRIPT_PATH}/graph_processor.py .
        
        # テンプレートファイルのコピー
        echo "テンプレートファイルのコピー..."
        cp ${JENKINS_REPO_DIR}/${TEMPLATE_PATH}/pulumi_report.html .
        cp ${JENKINS_REPO_DIR}/${TEMPLATE_PATH}/pulumi_styles.css ${HTML_DIR}/
        
        # HTMLレポートの生成
        echo "HTMLレポートの生成..."
        python3 main.py \\
            --artifacts-dir "${ARTIFACTS_DIR}" \\
            --output-dir "${HTML_DIR}" \\
            --template-dir "." \\
            --stack-name "${env.PULUMI_STACK_NAME}" \\
            --project-path "${params.PULUMI_PROJECT_PATH}" \\
            --branch "${params.PULUMI_TARGET_BRANCH}" \\
            --build-number "${env.BUILD_NUMBER}" \\
            --timestamp "${env.TIME_STAMP}" \\
            --action-type "${params.ACTION}"
        
        # クリーンアップ
        rm -f main.py config.py dot_processor.py report_generator.py data_processor.py charts.py graph_processor.py pulumi_report.html
        deactivate || true
    """
    
    echo "HTMLレポートが生成されました: ${HTML_DIR}/index.html"
}

/**
 * アーティファクトの公開
 */
def publishArtifacts() {
    // JSON、DOT、LOGファイルのアーカイブ（Pulumi実行ログも含む）
    archiveArtifacts artifacts: "${ARTIFACTS_DIR}/**/*.json,${ARTIFACTS_DIR}/**/*.dot,${ARTIFACTS_DIR}/**/*.log", allowEmptyArchive: true
    
    // HTMLレポートの公開
    if ((params.ACTION == 'deploy' || params.ACTION == 'destroy' || params.ACTION == 'refresh') && 
        params.GENERATE_REPORT && 
        fileExists("${HTML_DIR}/index.html")) {
        
        def reportTitle = params.ACTION == 'destroy' ? 
            "Pulumi Destruction Report - ${env.PULUMI_STACK_NAME}" : 
            params.ACTION == 'refresh' ?
            "Pulumi Refresh Report - ${env.PULUMI_STACK_NAME}" :
            "Pulumi Deployment Report - ${env.PULUMI_STACK_NAME}"
        
        // 高解像度グラフファイルも含める
        publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "${HTML_DIR}",
            reportFiles: 'index.html',
            reportName: reportTitle,
            reportTitles: reportTitle,
            includes: '**/*.html,**/*.css,**/*.png,**/*.svg,**/*.jpg'
        ])
    }
}

/**
 * 実行結果のサマリー表示
 */
def printSummary() {
    echo """
        =============================================
        Pulumi実行結果サマリー
        =============================================
        実行時刻: ${env.TIME_STAMP}
        環境: ${params.ENVIRONMENT}
        アクション: ${params.ACTION}
        スタック: ${env.PULUMI_STACK_NAME}
        プロジェクト: ${params.PULUMI_PROJECT_PATH}
        AWSアカウント: ${env.AWS_ACCOUNT_ID}
        ビルド番号: ${env.BUILD_NUMBER}
        設定ファイル: ${env.PULUMI_CONFIG_OVERRIDDEN == 'true' ? 'カスタム（アップロード）' : 'デフォルト（リポジトリ）'}
        確認スキップ: ${params.SKIP_CONFIRMATION ? 'はい' : 'いいえ'}
        Refresh実行: ${params.ACTION in ['deploy', 'preview', 'destroy'] ? 'あり' : params.ACTION == 'refresh' ? '単独実行' : 'なし'}
        実行結果: ${currentBuild.result ?: 'SUCCESS'}
        =============================================
    """.stripIndent()
}

// ================================================================================
// Pulumi Config Handling Functions
// ================================================================================

/**
 * Pulumi設定ファイルの処理（メイン関数）
 * パラメータに応じて、対話的更新またはデフォルト設定の検証を行う
 */
def handlePulumiConfigFile() {
    def configFileName = "Pulumi.${params.ENVIRONMENT}.yaml"
    
    echo """
        =============================================
        Pulumi設定ファイルの処理
        =============================================
        対象ファイル: ${configFileName}
        カスタム設定使用: ${params.USE_CUSTOM_CONFIG_FILE}
        =============================================
    """.stripIndent()

    if (params.USE_CUSTOM_CONFIG_FILE) {
        _handleInteractiveConfigUpdate(configFileName)
    } else {
        _handleDefaultConfig(configFileName)
    }

    // 最終的な設定ファイル状態の表示
    echo """
        =============================================
        設定ファイル処理完了
        状態: ${env.PULUMI_CONFIG_OVERRIDDEN == 'true' ? 'カスタム設定使用' : 'デフォルト設定使用'}
        =============================================
    """.stripIndent()
}

/**
 * 対話的な設定更新を処理する（プライベートヘルパー）
 * @param configFileName 対象の設定ファイル名
 */
private def _handleInteractiveConfigUpdate(String configFileName) {
    // 設定ファイルの状態を確認
    def configState = _checkConfigFileState(configFileName)
    
    // 入力パラメータを構築
    def inputParams = _buildInputParameters(configState.configMap, configState.exists)
    
    if (inputParams.isEmpty()) {
        echo "処理対象の項目がありません。"
        env.PULUMI_CONFIG_OVERRIDDEN = 'false'
        return
    }
    
    // ユーザー入力を収集して処理
    _processUserInput(configFileName, configState, inputParams)
}

/**
 * 設定ファイルの状態を確認する
 * @param configFileName 設定ファイル名
 * @return 設定ファイルの状態を含むMap
 */
private Map _checkConfigFileState(String configFileName) {
    def state = [exists: false, configMap: null, hasBackup: false]
    
    if (fileExists(configFileName)) {
        echo "既存の設定ファイル '${configFileName}' を読み込んでいます..."
        try {
            state.configMap = readYaml file: configFileName
            state.exists = true
            
            // バックアップファイルの存在確認
            if (fileExists("${configFileName}.backup")) {
                state.hasBackup = true
            }
        } catch (Exception e) {
            echo "⚠️ 設定ファイルの読み込みに失敗しました: ${e.message}"
        }
    }
    
    if (!state.exists) {
        echo "⚠️ 設定ファイル '${configFileName}' が見つかりません。環境変数ファイルのアップロードのみ行います。"
    }
    
    return state
}

/**
 * ユーザー入力を収集して処理する
 * @param configFileName 設定ファイル名
 * @param configState 設定ファイルの状態
 * @param inputParams 入力パラメータリスト
 */
private void _processUserInput(String configFileName, Map configState, List inputParams) {
    try {
        // ユーザー入力を収集
        def userInput = _collectUserInput(inputParams)
        
        echo "処理が実行されました (実行者: ${userInput.UPDATED_BY ?: 'unknown'})"
        
        // 既存ファイルのバックアップ（まだバックアップがない場合）
        if (configState.exists && !configState.hasBackup) {
            _createBackup(configFileName)
        }
        
        // Pulumi設定を更新
        if (configState.exists && configState.configMap) {
            _savePulumiConfig(configFileName, configState.configMap, userInput)
        }
        
        // 環境変数ファイルを処理
        _processEnvFileUpload(userInput, !configState.exists)
        
    } catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) {
        _handleCancellation(configFileName, configState.hasBackup)
    } catch (Exception e) {
        // エラー時はバックアップから復元
        if (configState.exists && fileExists("${configFileName}.backup")) {
            _restoreFromBackup(configFileName)
        }
        error "⚠️ 処理中にエラーが発生しました: ${e.message}"
    }
}

/**
 * ユーザー入力を収集する
 * @param inputParams 入力パラメータリスト
 * @return ユーザー入力のMap
 */
private Map _collectUserInput(List inputParams) {
    return input(
        id: 'PulumiConfigAndEnvUpdate',
        message: "設定の更新と環境変数ファイルのアップロード (${params.ENVIRONMENT})",
        parameters: inputParams,
        ok: '確定',
        submitterParameter: 'UPDATED_BY'
    )
}

/**
 * バックアップを作成する
 * @param configFileName 設定ファイル名
 */
private void _createBackup(String configFileName) {
    echo "既存の${configFileName}をバックアップします"
    sh "cp '${configFileName}' '${configFileName}.backup'"
    echo "バックアップ完了: ${configFileName}.backup"
}

/**
 * バックアップから復元する
 * @param configFileName 設定ファイル名
 */
private void _restoreFromBackup(String configFileName) {
    sh "mv '${configFileName}.backup' '${configFileName}'"
    echo "エラーのため、バックアップから復元しました"
}

/**
 * Pulumi設定を保存する
 * @param configFileName 設定ファイル名
 * @param configMap 設定Map
 * @param userInput ユーザー入力
 */
private void _savePulumiConfig(String configFileName, Map configMap, Map userInput) {
    _updateConfigMap(configMap, userInput)
    writeYaml file: configFileName, data: configMap, overwrite: true
    echo "✅ '${configFileName}' を更新しました。"
    env.PULUMI_CONFIG_OVERRIDDEN = 'true'
}

/**
 * キャンセル処理
 * @param configFileName 設定ファイル名
 * @param hasBackup バックアップが存在するか
 */
private void _handleCancellation(String configFileName = null, boolean hasBackup = false) {
    echo "処理がキャンセルされました。"
    
    // バックアップがある場合は復元を提案
    if (configFileName && hasBackup) {
        echo "必要に応じて '${configFileName}.backup' から復元できます。"
    }
    
    env.PULUMI_CONFIG_OVERRIDDEN = 'false'
    error "設定の更新がキャンセルされたため、パイプラインを中止します。"
}

/**
 * inputステップのためのパラメータリストを構築する（プライベートヘルパー）
 * @param configMap 読み込まれた設定のMap（nullの場合あり）
 * @param configFileExists 設定ファイルが存在するかどうか
 * @return inputステップに渡すパラメータのList
 */
private List _buildInputParameters(Map configMap, boolean configFileExists) {
    def inputParams = []
    
    // Pulumi設定ファイルの項目を追加
    if (configFileExists && configMap?.containsKey('config') && configMap.config instanceof Map) {
        echo "以下の設定項目について入力を求めます:"
        configMap.config.each { key, value ->
            if (value instanceof List) {
                // リストの場合は改行区切りの文字列に変換してtextParamを使用
                def defaultValueStr = value.join('\n')
                echo "- ${key} (リスト): ${value}"
                inputParams.add(textParam(
                    name: key,
                    defaultValue: defaultValueStr,
                    description: "Value for '${key}' (改行区切りでリスト項目を入力)"
                ))
            } else if (value instanceof Map) {
                // Mapの場合はJSON文字列に変換してtextParamを使用
                def defaultValueStr = new groovy.json.JsonOutput().toJson(value)
                echo "- ${key} (オブジェクト): ${defaultValueStr}"
                inputParams.add(textParam(
                    name: key,
                    defaultValue: defaultValueStr,
                    description: "Value for '${key}' (JSON形式)"
                ))
            } else {
                // その他（文字列、数値、ブール値など）はstringParamを使用
                def defaultValueStr = value.toString()
                echo "- ${key}: ${defaultValueStr}"
                inputParams.add(stringParam(
                    name: key,
                    defaultValue: defaultValueStr,
                    description: "Value for '${key}'"
                ))
            }
        }
    }
    
    // 環境変数ファイルのアップロードパラメータを追加
    def envFileName = "${params.ENVIRONMENT}.yml"
    def envFilePath = "env/${envFileName}"
    
    // 設定ファイルがない場合は必須、ある場合はオプション
    def envFileDescription = configFileExists ? 
        """
        |環境変数ファイル（オプション）
        |* 配置先: ${envFilePath}
        |* 用途: Pulumiプロジェクトの環境固有の変数定義
        |* 形式: YAML/YML
        |* ※省略可能です
        """.stripMargin() :
        """
        |環境変数ファイル（必須）
        |* 配置先: ${envFilePath}
        |* 用途: Pulumiプロジェクトの環境固有の変数定義
        |* 形式: YAML/YML
        |* ※設定ファイルが存在しないため、このファイルは必須です
        """.stripMargin()
    
    inputParams.add(base64File(
        name: 'envFile',
        description: envFileDescription
    ))
    
    return inputParams
}

/**
 * ユーザー入力で設定Mapを更新する（プライベートヘルパー）
 * @param configMap 更新対象の設定Map
 * @param userInput inputステップから返されたユーザー入力のMap
 */
private void _updateConfigMap(Map configMap, Map userInput) {
    userInput.each { key, value ->
        if (key != 'UPDATED_BY' && key != 'envFile' && configMap.config.containsKey(key)) {
            def originalValue = configMap.config[key]
            
            if (originalValue instanceof List) {
                // 元がリストの場合、改行区切りの文字列をリストに変換
                configMap.config[key] = value.toString().split('\n').collect { it.trim() }.findAll { it }
            } else if (originalValue instanceof Map) {
                // 元がMapの場合、JSON文字列をパース
                try {
                    configMap.config[key] = new groovy.json.JsonSlurperClassic().parseText(value)
                } catch (Exception e) {
                    echo "⚠️ JSON解析エラー (${key}): ${e.message}. 文字列として保存します。"
                    configMap.config[key] = value
                }
            } else if (originalValue instanceof Boolean) {
                // 元がブール値の場合、文字列をブール値に変換
                configMap.config[key] = value.toString().toLowerCase() in ['true', 'yes', '1']
            } else if (originalValue instanceof Integer) {
                // 元が整数の場合、文字列を整数に変換
                try {
                    configMap.config[key] = Integer.parseInt(value.toString())
                } catch (NumberFormatException e) {
                    echo "⚠️ 整数変換エラー (${key}): ${e.message}. 文字列として保存します。"
                    configMap.config[key] = value
                }
            } else if (originalValue instanceof Double || originalValue instanceof Float) {
                // 元が浮動小数点数の場合、文字列を数値に変換
                try {
                    configMap.config[key] = Double.parseDouble(value.toString())
                } catch (NumberFormatException e) {
                    echo "⚠️ 数値変換エラー (${key}): ${e.message}. 文字列として保存します。"
                    configMap.config[key] = value
                }
            } else {
                // その他の場合は文字列として保存
                configMap.config[key] = value
            }
        }
    }
}

/**
 * 環境変数ファイルのアップロードを処理する（プライベートヘルパー）
 * @param userInput ユーザー入力のMap
 * @param isRequired 環境変数ファイルが必須かどうか
 */
private def _processEnvFileUpload(Map userInput, boolean isRequired) {
    def envFileName = "${params.ENVIRONMENT}.yml"
    def envDirPath = "env"
    def envFilePath = "${envDirPath}/${envFileName}"
    
    if (!userInput.envFile) {
        if (isRequired) {
            error "設定ファイルが存在しないため、環境変数ファイルのアップロードは必須です。"
        } else {
            echo "環境変数ファイルはアップロードされませんでした（オプション）"
            env.ENV_FILE_UPLOADED = 'false'
            return
        }
    }
    
    echo "環境変数ファイルを処理中..."
    
    // envディレクトリの作成
    sh "mkdir -p ${envDirPath}"
    
    withEnv(["UPLOADED_FILE_B64=${userInput.envFile}"]) {
        sh """
            echo "Base64デコード中..."
            echo \$UPLOADED_FILE_B64 | base64 -d > '${envFilePath}'
            
            # ファイルサイズ確認
            FILE_SIZE=\$(stat -c%s '${envFilePath}' 2>/dev/null || echo 0)
            echo "ファイルサイズ: \${FILE_SIZE} bytes"
            
            if [ "\${FILE_SIZE}" -eq "0" ]; then
                echo "アップロードされたファイルが空です"
                rm -f '${envFilePath}'
                exit 1
            fi
            
            echo "✅ 環境変数ファイルを '${envFilePath}' に配置しました"
        """
    }
    
    // YAMLの検証
    try {
        def yamlContent = readYaml file: envFilePath
        echo "✅ 環境変数ファイルの形式検証: OK"
        env.ENV_FILE_UPLOADED = 'true'
    } catch (Exception e) {
        sh "rm -f '${envFilePath}'"
        if (isRequired) {
            error "⚠️ YAML形式が不正です: ${e.message}"
        } else {
            echo "⚠️ YAML形式が不正です: ${e.message}. ファイルを削除しました。"
            env.ENV_FILE_UPLOADED = 'false'
        }
    }
}

/**
 * デフォルト設定を処理する（プライベートヘルパー）
 * @param configFileName 対象の設定ファイル名
 */
private def _handleDefaultConfig(String configFileName) {
    echo "カスタム設定ファイルは使用しません"
    env.PULUMI_CONFIG_OVERRIDDEN = 'false'
    
    if (fileExists(configFileName)) {
        echo "✅ リポジトリ内の${configFileName}を使用します"
        try {
            readYaml file: configFileName
            echo "既存設定ファイルの検証: OK"
        } catch (Exception e) {
            echo "⚠️ 既存設定ファイルの読み込みに問題があります: ${e.message}"
        }
    } else {
        echo "⚠️ ${configFileName}が存在しません。Pulumiのデフォルト設定を使用します"
    }
}
