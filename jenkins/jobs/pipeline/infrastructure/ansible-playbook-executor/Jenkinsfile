#!/usr/bin/env groovy

@Library('jenkins-shared-lib') _

// Ansibleプレイブック設定の読み込み
def loadPlaybookConfig() {
    def configFile = readYaml file: 'jenkins/jobs/pipeline/_seed/job-creator/job-config.yaml'
    return configFile['ansible-playbooks']['infrastructure-as-code']['playbooks']
}

// プレイブック名からパスを解決
def resolvePlaybookPath(String playbookName, def playbooksConfig) {
    // 完全パスが指定された場合はそのまま返す
    if (playbookName.endsWith('.yml') || playbookName.endsWith('.yaml')) {
        return playbookName
    }
    
    // 設定から検索
    def playbook = playbooksConfig[playbookName]
    if (playbook) {
        return playbook.playbook_path
    }
    
    // 見つからない場合はエラー
    error("プレイブック '${playbookName}' が設定に見つかりません")
}

// tmuxセッション名を生成
def generateTmuxSessionName() {
    def jobNameShort = env.JOB_NAME.split('/')[-1].replaceAll('[^a-zA-Z0-9_-]', '_').take(20)
    return "ansible_${jobNameShort}_${env.BUILD_NUMBER}"
}

// Ansibleコマンドを構築
def buildAnsibleCommand(playbook, params) {
    def cmd = "ansible-playbook"
    
    // プレイブックパス
    cmd += " ${env.ANSIBLE_PLAYBOOKS_DIR}/${playbook}"
    
    // インベントリ
    cmd += " -i ${env.ANSIBLE_INVENTORY}"
    
    // 環境変数
    cmd += " -e env=${params.ENVIRONMENT}"
    
    // teardown_pipelineの場合、confirm=trueを自動追加
    if (playbook.contains('teardown_pipeline.yml')) {
        cmd += " -e confirm=true"
    }
    
    // 追加変数
    if (params.ANSIBLE_EXTRA_VARS?.trim()) {
        params.ANSIBLE_EXTRA_VARS.split(' ').each { var ->
            cmd += " -e ${var}"
        }
    }
    
    // 詳細出力
    if (params.ANSIBLE_VERBOSE) {
        cmd += " -vvv"
    }
    
    // チェックモード
    if (params.ANSIBLE_CHECK) {
        cmd += " --check"
    }
    
    // ホスト制限
    if (params.ANSIBLE_LIMIT?.trim()) {
        cmd += " --limit ${params.ANSIBLE_LIMIT}"
    }
    
    // タグ
    if (params.ANSIBLE_TAGS?.trim()) {
        cmd += " --tags ${params.ANSIBLE_TAGS}"
    }
    
    // スキップタグ
    if (params.ANSIBLE_SKIP_TAGS?.trim()) {
        cmd += " --skip-tags ${params.ANSIBLE_SKIP_TAGS}"
    }
    
    return cmd
}

pipeline {
    agent {
        label 'bootstrap-workterminal'
    }
    
    options {
        timestamps()
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '30'))
        timeout(time: 2, unit: 'HOURS')
    }
    
    environment {
        ANSIBLE_BASE_DIR = "${WORKSPACE}/ansible"
        ANSIBLE_INVENTORY = "${ANSIBLE_BASE_DIR}/inventory"
        ANSIBLE_PLAYBOOKS_DIR = "${ANSIBLE_BASE_DIR}/playbooks"
        ANSIBLE_FORCE_COLOR = 'true'
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        PYTHONUNBUFFERED = '1'
    }
    
    stages {
        stage('準備') {
            steps {
                script {
                    // パラメータの表示
                    echo """
                    ========================================
                     Ansible Playbook実行パラメータ
                    ========================================
                    プレイブック: ${params.PLAYBOOKS}
                    環境: ${params.ENVIRONMENT}
                    ブランチ: ${params.BRANCH}
                    追加変数: ${params.ANSIBLE_EXTRA_VARS}
                    詳細出力: ${params.ANSIBLE_VERBOSE}
                    チェックモード: ${params.ANSIBLE_CHECK}
                    ホスト制限: ${params.ANSIBLE_LIMIT}
                    タグ: ${params.ANSIBLE_TAGS}
                    スキップタグ: ${params.ANSIBLE_SKIP_TAGS}
                    ドライラン: ${params.DRY_RUN}
                    tmuxモード: ${params.USE_TMUX}
                    ========================================
                    """
                    
                    // プレイブックパラメータの確認
                    if (!params.PLAYBOOKS?.trim()) {
                        error("プレイブックが指定されていません")
                    }
                }
            }
        }
        
        stage('リポジトリ更新') {
            steps {
                script {
                    echo "Workterminalのリポジトリを更新中..."
                    
                    // リポジトリの更新（CIモードで実行）
                    sh """
                        cd ~/infrastructure-as-code
                        chmod +x scripts/workterminal/update-repo-branch.sh
                        ./scripts/workterminal/update-repo-branch.sh ${params.BRANCH} --ci
                    """
                }
            }
        }
        
        stage('プレイブック解析') {
            steps {
                script {
                    // プレイブック設定の読み込み
                    def playbooksConfig = loadPlaybookConfig()
                    
                    // プレイブックリストの解析
                    def playbookList = params.PLAYBOOKS.split(',').collect { it.trim() }
                    env.RESOLVED_PLAYBOOKS = playbookList.collect { playbookName ->
                        resolvePlaybookPath(playbookName, playbooksConfig)
                    }.join(',')
                    
                    echo "実行するプレイブック:"
                    env.RESOLVED_PLAYBOOKS.split(',').each { playbook ->
                        echo "  - ${playbook}"
                    }
                }
            }
        }
        
        stage('Ansible実行') {
            steps {
                script {
                    def playbookList = env.RESOLVED_PLAYBOOKS.split(',')
                    def useTmux = params.USE_TMUX ?: false
                    def tmuxTimeoutMinutes = params.TMUX_TIMEOUT_MINUTES ?: '60'
                    def continueOnTimeout = params.CONTINUE_ON_TIMEOUT ?: false
                    def timedOutPlaybooks = []
                    
                    // tmuxセッション名を生成（全プレイブックで共有）
                    def tmuxSessionName = generateTmuxSessionName()
                    env.tmuxSessionName = tmuxSessionName // post処理で使用
                    env.useTmux = useTmux.toString()
                    
                    if (useTmux) {
                        echo """
                        ========================================
                         tmuxモードで実行
                        ========================================
                        セッション名: ${tmuxSessionName}
                        タイムアウト: ${tmuxTimeoutMinutes}分
                        タイムアウト時の続行: ${continueOnTimeout ? '有効' : '無効'}
                        """
                    }
                    
                    playbookList.eachWithIndex { playbook, index ->
                        def stageName = "プレイブック ${index + 1}/${playbookList.size()}: ${playbook}"
                        
                        echo """
                        ========================================
                         ${stageName}
                        ========================================
                        """
                        
                        // Ansibleコマンドの構築
                        def ansibleCmd = buildAnsibleCommand(playbook, params)
                        
                        // teardown確認
                        if (playbook.contains('teardown_pipeline.yml')) {
                            echo "⚠️ 注意: Teardown pipelineを実行します - confirm=trueが自動的に設定されます"
                        }
                        
                        echo "実行コマンド: ${ansibleCmd}"
                        
                        if (params.DRY_RUN) {
                            echo "ドライランモード: 実際の実行はスキップされました"
                        } else {
                            if (useTmux) {
                                // tmuxで実行
                                def windowName = "playbook_${index}"
                                echo "tmuxセッション内で実行を開始します..."
                                echo "セッション: ${tmuxSessionName}, ウィンドウ: ${windowName}"
                                
                                // 外部スクリプトを使用してtmux実行
                                def exitCode = sh(
                                    script: """
                                        cd ~/infrastructure-as-code
                                        chmod +x scripts/jenkins/run-ansible-in-tmux.sh
                                        ./scripts/jenkins/run-ansible-in-tmux.sh \
                                            "${tmuxSessionName}" \
                                            "${windowName}" \
                                            "${tmuxTimeoutMinutes}" \
                                            "${ansibleCmd}"
                                    """,
                                    returnStatus: true
                                )
                                
                                if (exitCode == 2) {
                                    // タイムアウト
                                    timedOutPlaybooks.add(playbook)
                                    echo "⚠️ 警告: このプレイブックはタイムアウトしました"
                                    
                                    if (!continueOnTimeout && index < playbookList.size() - 1) {
                                        error("タイムアウトのため実行を中止します")
                                    }
                                } else if (exitCode != 0) {
                                    // その他のエラー
                                    error("Ansibleの実行が失敗しました（終了コード: ${exitCode}）")
                                }
                                
                                echo """
                                ========================================
                                 実行情報
                                ========================================
                                tmuxセッション: ${tmuxSessionName}
                                ウィンドウ: ${windowName}
                                
                                ログ確認方法:
                                1. リアルタイムログ表示:
                                   tmux attach -t ${tmuxSessionName}
                                   (終了: Ctrl+b, d でデタッチ)
                                
                                2. ログファイル:
                                   /tmp/${tmuxSessionName}_${windowName}.log
                                ========================================
                                """
                            } else {
                                // 通常実行
                                sh """
                                    cd ~/infrastructure-as-code/ansible
                                    ${ansibleCmd}
                                """
                            }
                        }
                        
                        if (index < playbookList.size() - 1) {
                            echo "次のプレイブックに進みます..."
                        }
                    }
                    
                    // タイムアウトサマリーの表示
                    if (timedOutPlaybooks.size() > 0) {
                        echo """
                        ========================================
                         ⚠️ タイムアウト警告
                        ========================================
                        以下のプレイブックがタイムアウトしました:
                        ${timedOutPlaybooks.collect { "  - ${it}" }.join('\n')}
                        
                        これらのプレイブックは完全に実行されていない可能性があります。
                        ログファイルを確認して、必要に応じて再実行してください。
                        ========================================
                        """
                        
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                if (currentBuild.result == 'UNSTABLE') {
                    echo """
                    ========================================
                     Ansible実行完了（警告あり）
                    ========================================
                    実行は完了しましたが、一部のプレイブックが
                    タイムアウトしました。詳細は上記の警告を確認してください。
                    """
                } else {
                    echo """
                    ========================================
                     Ansible実行成功
                    ========================================
                    すべてのプレイブックが正常に実行されました。
                    """
                }
            }
        }
        
        failure {
            echo """
            ========================================
             Ansible実行失敗
            ========================================
            プレイブックの実行中にエラーが発生しました。
            ログを確認してください。
            """
        }
        
        always {
            script {
                // tmuxセッションのクリーンアップ
                if (env.useTmux == 'true' && env.tmuxSessionName) {
                    sh """
                        # tmuxセッションが存在する場合は削除
                        if tmux has-session -t ${env.tmuxSessionName} 2>/dev/null; then
                            echo "tmuxセッション '${env.tmuxSessionName}' をクリーンアップしています..."
                            tmux kill-session -t ${env.tmuxSessionName}
                            echo "tmuxセッションをクリーンアップしました"
                        fi
                        
                        # 一時ファイルのクリーンアップ
                        rm -f /tmp/${env.tmuxSessionName}_*.log
                        rm -f /tmp/${env.tmuxSessionName}_*.log.timeout
                    """ 
                }
            }
            cleanWs()
        }
    }
}