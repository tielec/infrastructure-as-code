#!/usr/bin/env groovy

@Library('jenkins-shared-lib') _

// Ansibleプレイブック設定の読み込み
def loadPlaybookConfig() {
    def configFile = readYaml file: 'jenkins/jobs/pipeline/_seed/job-creator/job-config.yaml'
    return configFile['ansible-playbooks']['infrastructure-as-code']['playbooks']
}

// プレイブック名からパスを解決
def resolvePlaybookPath(String playbookName, def playbooksConfig) {
    // 完全パスが指定された場合はそのまま返す
    if (playbookName.endsWith('.yml') || playbookName.endsWith('.yaml')) {
        return playbookName
    }
    
    // 設定から検索
    def playbook = playbooksConfig[playbookName]
    if (playbook) {
        return playbook.playbook_path
    }
    
    // 見つからない場合はエラー
    error("プレイブック '${playbookName}' が設定に見つかりません")
}

pipeline {
    agent {
        label 'bootstrap-workterminal'
    }
    
    options {
        timestamps()
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '30'))
        timeout(time: 2, unit: 'HOURS')
    }
    
    environment {
        ANSIBLE_BASE_DIR = "${WORKSPACE}/ansible"
        ANSIBLE_INVENTORY = "${ANSIBLE_BASE_DIR}/inventory"
        ANSIBLE_PLAYBOOKS_DIR = "${ANSIBLE_BASE_DIR}/playbooks"
        ANSIBLE_FORCE_COLOR = 'true'
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        PYTHONUNBUFFERED = '1'
    }
    
    stages {
        stage('準備') {
            steps {
                script {
                    // パラメータの表示
                    echo """
                    ========================================
                     Ansible Playbook実行パラメータ
                    ========================================
                    プレイブック: ${params.PLAYBOOKS}
                    環境: ${params.ENVIRONMENT}
                    ブランチ: ${params.BRANCH}
                    追加変数: ${params.ANSIBLE_EXTRA_VARS}
                    詳細出力: ${params.ANSIBLE_VERBOSE}
                    チェックモード: ${params.ANSIBLE_CHECK}
                    ホスト制限: ${params.ANSIBLE_LIMIT}
                    タグ: ${params.ANSIBLE_TAGS}
                    スキップタグ: ${params.ANSIBLE_SKIP_TAGS}
                    ドライラン: ${params.DRY_RUN}
                    ========================================
                    """
                    
                    // プレイブックパラメータの確認
                    if (!params.PLAYBOOKS?.trim()) {
                        error("プレイブックが指定されていません")
                    }
                }
            }
        }
        
        stage('リポジトリ更新') {
            steps {
                script {
                    echo "Workterminalのリポジトリを更新中..."
                    
                    // リポジトリの更新（CIモードで実行）
                    sh """
                        cd ~/infrastructure-as-code
                        chmod +x scripts/workterminal/update-repo-branch.sh
                        ./scripts/workterminal/update-repo-branch.sh ${params.BRANCH} --ci
                    """
                }
            }
        }
        
        stage('プレイブック解析') {
            steps {
                script {
                    // プレイブック設定の読み込み
                    def playbooksConfig = loadPlaybookConfig()
                    
                    // プレイブックリストの解析
                    def playbookList = params.PLAYBOOKS.split(',').collect { it.trim() }
                    env.RESOLVED_PLAYBOOKS = playbookList.collect { playbookName ->
                        resolvePlaybookPath(playbookName, playbooksConfig)
                    }.join(',')
                    
                    echo "実行するプレイブック:"
                    env.RESOLVED_PLAYBOOKS.split(',').each { playbook ->
                        echo "  - ${playbook}"
                    }
                }
            }
        }
        
        stage('Ansible実行') {
            steps {
                script {
                    def playbookList = env.RESOLVED_PLAYBOOKS.split(',')
                    
                    // tmux設定の確認
                    def useTmux = params.USE_TMUX ?: false
                    env.useTmux = useTmux.toString()  // post処理で使用するため環境変数に保存
                    def tmuxTimeoutMinutes = params.TMUX_TIMEOUT_MINUTES ?: '60'
                    def tmuxSessionName = "ansible_${env.BUILD_NUMBER}"
                    def continueOnTimeout = params.CONTINUE_ON_TIMEOUT ?: false
                    
                    if (useTmux) {
                        echo """
                        ========================================
                         tmuxモードで実行
                        ========================================
                        セッション名: ${tmuxSessionName}
                        タイムアウト: ${tmuxTimeoutMinutes}分
                        タイムアウト時の続行: ${continueOnTimeout ? '有効' : '無効'}
                        """
                    }
                    
                    // タイムアウトしたプレイブックを記録
                    def timedOutPlaybooks = []
                    
                    playbookList.eachWithIndex { playbook, index ->
                        def stageName = "プレイブック ${index + 1}/${playbookList.size()}: ${playbook}"
                        
                        echo """
                        ========================================
                         ${stageName}
                        ========================================
                        """
                        
                        // Ansibleコマンドの構築
                        def ansibleCmd = "ansible-playbook"
                        
                        // プレイブックパス
                        ansibleCmd += " ${ANSIBLE_PLAYBOOKS_DIR}/${playbook}"
                        
                        // インベントリ
                        ansibleCmd += " -i ${ANSIBLE_INVENTORY}"
                        
                        // 環境変数
                        ansibleCmd += " -e env=${params.ENVIRONMENT}"
                        
                        // teardown_pipelineの場合、confirm=trueを自動追加
                        if (playbook.contains('teardown_pipeline.yml')) {
                            ansibleCmd += " -e confirm=true"
                            echo "⚠️ 注意: Teardown pipelineを実行します - confirm=trueが自動的に設定されます"
                        }
                        
                        // 追加変数
                        if (params.ANSIBLE_EXTRA_VARS?.trim()) {
                            params.ANSIBLE_EXTRA_VARS.split(' ').each { var ->
                                ansibleCmd += " -e ${var}"
                            }
                        }
                        
                        // 詳細出力
                        if (params.ANSIBLE_VERBOSE) {
                            ansibleCmd += " -vvv"
                        }
                        
                        // チェックモード
                        if (params.ANSIBLE_CHECK) {
                            ansibleCmd += " --check"
                        }
                        
                        // ホスト制限
                        if (params.ANSIBLE_LIMIT?.trim()) {
                            ansibleCmd += " --limit ${params.ANSIBLE_LIMIT}"
                        }
                        
                        // タグ
                        if (params.ANSIBLE_TAGS?.trim()) {
                            ansibleCmd += " --tags ${params.ANSIBLE_TAGS}"
                        }
                        
                        // スキップタグ
                        if (params.ANSIBLE_SKIP_TAGS?.trim()) {
                            ansibleCmd += " --skip-tags ${params.ANSIBLE_SKIP_TAGS}"
                        }
                        
                        echo "実行コマンド: ${ansibleCmd}"
                        
                        if (params.DRY_RUN) {
                            echo "ドライランモード: 実際の実行はスキップされました"
                        } else {
                            if (useTmux) {
                                // tmuxで実行
                                def windowName = "playbook_${index}"
                                echo "tmuxセッション内で実行を開始します..."
                                echo "セッション: ${tmuxSessionName}, ウィンドウ: ${windowName}"
                                
                                sh """
                                    cd ~/infrastructure-as-code/ansible
                                    
                                    # tmuxセッションが存在しない場合は作成
                                    if ! tmux has-session -t ${tmuxSessionName} 2>/dev/null; then
                                        tmux new-session -d -s ${tmuxSessionName} -n ${windowName}
                                    else
                                        # 新しいウィンドウを作成
                                        tmux new-window -t ${tmuxSessionName} -n ${windowName}
                                    fi
                                    
                                    # コマンドを実行
                                    tmux send-keys -t ${tmuxSessionName}:${windowName} "cd ~/infrastructure-as-code/ansible" C-m
                                    tmux send-keys -t ${tmuxSessionName}:${windowName} "${ansibleCmd}" C-m
                                    
                                    # コマンドの実行開始を待機
                                    echo "Ansibleプロセスの起動を待機中..."
                                    sleep 3
                                    
                                    # タイムアウト時間（秒）
                                    TIMEOUT_SECONDS=\$((${tmuxTimeoutMinutes} * 60))
                                    ELAPSED=0
                                    INTERVAL=10
                                    
                                    echo "プロセスの完了を待機中（最大${tmuxTimeoutMinutes}分）..."
                                    echo "リアルタイムログ確認: tmux attach -t ${tmuxSessionName}"
                                    
                                    # プロセスの監視
                                    while [ \$ELAPSED -lt \$TIMEOUT_SECONDS ]; do
                                        # ウィンドウが存在し、コマンドが実行中かチェック
                                        if ! tmux list-windows -t ${tmuxSessionName} -F '#{window_name}' | grep -q "^${windowName}\$"; then
                                            echo "tmuxウィンドウが見つかりません"
                                            exit 1
                                        fi
                                        
                                        # paneの状態を確認（コマンドが終了したかチェック）
                                        PANE_PID=\$(tmux list-panes -t ${tmuxSessionName}:${windowName} -F '#{pane_pid}' 2>/dev/null || echo "")
                                        
                                        if [ -z "\$PANE_PID" ]; then
                                            echo "paneが見つかりません"
                                            exit 1
                                        fi
                                        
                                        # ansibleプロセスが実行中かチェック（より確実な方法）
                                        # tmuxペインで実行中のコマンドをチェック
                                        PANE_COMMAND=\$(tmux list-panes -t ${tmuxSessionName}:${windowName} -F '#{pane_current_command}' 2>/dev/null || echo "")
                                        
                                        # ansible-playbookが実行中か、または子プロセスとして存在するかチェック
                                        if [[ "\$PANE_COMMAND" != *"ansible"* ]] && ! pgrep -f "ansible-playbook.*${playbook}" > /dev/null 2>&1; then
                                            echo "Ansibleプロセスが完了したか、まだ開始されていません"
                                            
                                            # 最後の出力を確認して、実際に完了したかチェック
                                            LAST_OUTPUT=\$(tmux capture-pane -t ${tmuxSessionName}:${windowName} -p -S -50)
                                            
                                            # PLAYBOOKの実行が実際に開始されたかチェック
                                            if echo "\$LAST_OUTPUT" | grep -q "PLAY \\["; then
                                                echo "Ansibleの実行が完了しました"
                                                
                                                # ログをキャプチャして表示
                                                echo "=== 実行結果（最後の100行） ==="
                                                tmux capture-pane -t ${tmuxSessionName}:${windowName} -p -S -100 | tail -100
                                                
                                                # エラーチェック
                                                if echo "\$LAST_OUTPUT" | grep -qE "(failed|FAILED|ERROR|Fatal|unreachable=|failed=)"; then
                                                    echo "Ansibleの実行が失敗した可能性があります"
                                                    # 全ログを保存
                                                    tmux capture-pane -t ${tmuxSessionName}:${windowName} -p -S - > /tmp/ansible_${env.BUILD_NUMBER}_${index}.log
                                                    echo "完全なログは /tmp/ansible_${env.BUILD_NUMBER}_${index}.log に保存されました"
                                                    exit 1
                                                fi
                                                
                                                # PLAY RECAPをチェックして正常終了を確認
                                                if echo "\$LAST_OUTPUT" | grep -q "PLAY RECAP"; then
                                                    echo "Ansibleが正常に完了しました"
                                                fi
                                                break
                                            elif [ \$ELAPSED -lt 30 ]; then
                                                # 最初の30秒は起動待ち
                                                echo "Ansibleの起動を待機中... (\$ELAPSED秒経過)"
                                            else
                                                # 30秒経っても開始されない場合は問題がある可能性
                                                echo "警告: Ansibleがまだ開始されていません"
                                                echo "--- 現在の出力 ---"
                                                echo "\$LAST_OUTPUT" | tail -20
                                            fi
                                        fi
                                        
                                        # 進捗表示（30秒ごと）
                                        if [ \$((ELAPSED % 30)) -eq 0 ]; then
                                            echo "実行中... (\$ELAPSED秒経過)"
                                            # 最新の5行を表示
                                            echo "--- 最新の出力 ---"
                                            tmux capture-pane -t ${tmuxSessionName}:${windowName} -p -S -5 | sed 's/^/  > /'
                                        fi
                                        
                                        sleep \$INTERVAL
                                        ELAPSED=\$((ELAPSED + INTERVAL))
                                    done
                                    
                                    # タイムアウトチェック
                                    if [ \$ELAPSED -ge \$TIMEOUT_SECONDS ]; then
                                        echo "タイムアウト: ${tmuxTimeoutMinutes}分を超えました"
                                        
                                        # プロセスを終了
                                        tmux send-keys -t ${tmuxSessionName}:${windowName} C-c
                                        sleep 2
                                        tmux kill-window -t ${tmuxSessionName}:${windowName} 2>/dev/null || true
                                        echo "Ansibleプロセスを強制終了しました"
                                        
                                        # タイムアウト時のエラー処理設定
                                        if [ "${continueOnTimeout}" = "true" ]; then
                                            echo "警告: タイムアウトしましたが、CONTINUE_ON_TIMEOUTが有効なため続行します"
                                            # ログをキャプチャして保存
                                            echo "=== タイムアウト時のログ（最後の100行） ==="
                                            tmux capture-pane -t ${tmuxSessionName}:${windowName} -p -S -100 > /tmp/ansible_${env.BUILD_NUMBER}_${index}.log
                                            tail -100 /tmp/ansible_${env.BUILD_NUMBER}_${index}.log
                                            # タイムアウトフラグファイルを作成
                                            touch /tmp/ansible_${env.BUILD_NUMBER}_${index}.timeout
                                            # エラーとして扱わない
                                            exit 0
                                        else
                                            exit 1
                                        fi
                                    fi
                                """
                                
                                echo """
                                ========================================
                                 実行情報
                                ========================================
                                tmuxセッション: ${tmuxSessionName}
                                ウィンドウ: ${windowName}
                                
                                ログ確認方法:
                                1. リアルタイムログ表示:
                                   tmux attach -t ${tmuxSessionName}
                                   (終了: Ctrl+b, d でデタッチ)
                                
                                2. ログをファイルに保存:
                                   tmux capture-pane -t ${tmuxSessionName}:${windowName} -p -S - > ansible_log.txt
                                
                                3. 最新のログを確認:
                                   tmux capture-pane -t ${tmuxSessionName}:${windowName} -p -S -50
                                ========================================
                                """
                                
                                // タイムアウトチェック
                                def timeoutFlagFile = "/tmp/ansible_${env.BUILD_NUMBER}_${index}.timeout"
                                if (sh(script: "test -f ${timeoutFlagFile} && echo 'true' || echo 'false'", returnStdout: true).trim() == 'true') {
                                    timedOutPlaybooks.add(playbook)
                                    echo "⚠️ 警告: このプレイブックはタイムアウトしました"
                                }
                                
                                // タイムアウトで続行する場合の警告
                                if (continueOnTimeout && index < playbookList.size() - 1) {
                                    echo """
                                    ⚠️ 注意: CONTINUE_ON_TIMEOUTが有効です
                                    このプレイブックがタイムアウトしても次のプレイブックに進みます
                                    """
                                }
                            } else {
                                // 通常実行
                                sh """
                                    cd ~/infrastructure-as-code/ansible
                                    ${ansibleCmd}
                                """
                            }
                        }
                        
                        if (index < playbookList.size() - 1) {
                            echo "次のプレイブックに進みます..."
                        }
                    }
                    
                    // タイムアウトサマリーの表示
                    if (timedOutPlaybooks.size() > 0) {
                        echo """
                        ========================================
                         ⚠️ タイムアウト警告
                        ========================================
                        以下のプレイブックがタイムアウトしました:
                        ${timedOutPlaybooks.collect { "  - ${it}" }.join('\n')}
                        
                        これらのプレイブックは完全に実行されていない可能性があります。
                        ログファイルを確認して、必要に応じて再実行してください。
                        ========================================
                        """
                        
                        // タイムアウトがあった場合は警告として扱う
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
    }
    
    post {
        success {
            script {
                if (currentBuild.result == 'UNSTABLE') {
                    echo """
                    ========================================
                     Ansible実行完了（警告あり）
                    ========================================
                    実行は完了しましたが、一部のプレイブックが
                    タイムアウトしました。詳細は上記の警告を確認してください。
                    """
                } else {
                    echo """
                    ========================================
                     Ansible実行成功
                    ========================================
                    すべてのプレイブックが正常に実行されました。
                    """
                }
            }
        }
        
        failure {
            echo """
            ========================================
             Ansible実行失敗
            ========================================
            プレイブックの実行中にエラーが発生しました。
            ログを確認してください。
            """
        }
        
        always {
            script {
                // tmuxセッションのクリーンアップ
                if (env.useTmux == 'true') {
                    def tmuxSessionName = "ansible_${env.BUILD_NUMBER}"
                    sh """
                        # tmuxセッションが存在する場合は削除
                        if tmux has-session -t ${tmuxSessionName} 2>/dev/null; then
                            echo "tmuxセッション '${tmuxSessionName}' をクリーンアップしています..."
                            tmux kill-session -t ${tmuxSessionName}
                            echo "tmuxセッションをクリーンアップしました"
                        fi
                        
                        # 一時ファイルのクリーンアップ
                        rm -f /tmp/ansible_${env.BUILD_NUMBER}_*.log
                        rm -f /tmp/ansible_${env.BUILD_NUMBER}_*.timeout
                    """ 
                }
            }
            cleanWs()
        }
    }
}