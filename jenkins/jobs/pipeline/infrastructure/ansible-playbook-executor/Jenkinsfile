#!/usr/bin/env groovy

@Library('jenkins-shared-lib') _

// Ansibleプレイブック設定の読み込み
def loadPlaybookConfig() {
    def configFile = readYaml file: "${env.INFRA_REPO_DIR}/jenkins/jobs/pipeline/_seed/job-creator/job-config.yaml"
    return configFile['ansible-playbooks']['infrastructure-as-code']['playbooks']
}

// プレイブック名からパスを解決
def resolvePlaybookPath(String playbookName, def playbooksConfig) {
    // 完全パスが指定された場合はそのまま返す
    if (playbookName.endsWith('.yml') || playbookName.endsWith('.yaml')) {
        return playbookName
    }
    
    // 設定から検索
    def playbook = playbooksConfig[playbookName]
    if (playbook) {
        return playbook.playbook_path
    }
    
    // 見つからない場合はエラー
    error("プレイブック '${playbookName}' が設定に見つかりません")
}


// Ansibleコマンドを構築
def buildAnsibleCommand(playbook, params) {
    def cmd = "ansible-playbook"
    
    // プレイブックパス
    cmd += " ${env.ANSIBLE_PLAYBOOKS_DIR}/${playbook}"
    
    // インベントリ
    cmd += " -i ${env.ANSIBLE_INVENTORY}"
    
    // 環境変数
    cmd += " -e env=${params.ENVIRONMENT}"
    
    // 追加変数
    if (params.ANSIBLE_EXTRA_VARS?.trim()) {
        params.ANSIBLE_EXTRA_VARS.split(' ').each { var ->
            cmd += " -e ${var}"
        }
    }
    
    // 詳細出力
    if (params.ANSIBLE_VERBOSE) {
        cmd += " -vvv"
    }
    
    // チェックモード
    if (params.ANSIBLE_CHECK) {
        cmd += " --check"
    }
    
    // ホスト制限
    if (params.ANSIBLE_LIMIT?.trim()) {
        cmd += " --limit ${params.ANSIBLE_LIMIT}"
    }
    
    // タグ
    if (params.ANSIBLE_TAGS?.trim()) {
        cmd += " --tags ${params.ANSIBLE_TAGS}"
    }
    
    // スキップタグ
    if (params.ANSIBLE_SKIP_TAGS?.trim()) {
        cmd += " --skip-tags ${params.ANSIBLE_SKIP_TAGS}"
    }
    
    return cmd
}

pipeline {
    agent {
        label 'ec2-fleet'
    }
    
    options {
        timestamps()
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '30'))
        timeout(time: 2, unit: 'HOURS')
    }
    
    environment {
        // リポジトリディレクトリ
        INFRA_REPO_DIR = "${WORKSPACE}/infrastructure-as-code"
        
        // Ansible設定
        ANSIBLE_BASE_DIR = "${INFRA_REPO_DIR}/ansible"
        ANSIBLE_INVENTORY = "${ANSIBLE_BASE_DIR}/inventory"
        ANSIBLE_PLAYBOOKS_DIR = "${ANSIBLE_BASE_DIR}/playbooks"
        ANSIBLE_FORCE_COLOR = 'true'
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        PYTHONUNBUFFERED = '1'
    }
    
    stages {
        stage('準備') {
            steps {
                script {
                    // パラメータの表示
                    echo """
                    ========================================
                     Ansible Playbook実行パラメータ
                    ========================================
                    プレイブック: ${params.PLAYBOOKS}
                    環境: ${params.ENVIRONMENT}
                    ブランチ: ${params.BRANCH}
                    追加変数: ${params.ANSIBLE_EXTRA_VARS}
                    詳細出力: ${params.ANSIBLE_VERBOSE}
                    チェックモード: ${params.ANSIBLE_CHECK}
                    ホスト制限: ${params.ANSIBLE_LIMIT}
                    タグ: ${params.ANSIBLE_TAGS}
                    スキップタグ: ${params.ANSIBLE_SKIP_TAGS}
                    ドライラン: ${params.DRY_RUN}
                    ========================================
                    """
                    
                    // プレイブックパラメータの確認
                    if (!params.PLAYBOOKS?.trim()) {
                        error("プレイブックが指定されていません")
                    }
                }
            }
        }
        
        stage('リポジトリチェックアウト') {
            steps {
                script {
                    echo "リポジトリをチェックアウト中..."
                    
                    // infrastructure-as-codeリポジトリのチェックアウト
                    dir(env.INFRA_REPO_DIR) {
                        gitUtils.checkoutRepository(
                            env.GIT_INFRASTRUCTURE_REPO_URL,
                            params.BRANCH,
                            env.GITHUB_APP_CREDENTIALS_ID
                        )
                    }
                    
                    echo "チェックアウト完了: ブランチ ${params.BRANCH}"
                }
            }
        }
        
        stage('プレイブック解析') {
            steps {
                script {
                    // プレイブック設定の読み込み（リポジトリチェックアウト後）
                    def playbooksConfig = loadPlaybookConfig()
                    
                    // プレイブックリストの解析
                    def playbookList = params.PLAYBOOKS.split(',').collect { it.trim() }
                    env.RESOLVED_PLAYBOOKS = playbookList.collect { playbookName ->
                        resolvePlaybookPath(playbookName, playbooksConfig)
                    }.join(',')
                    
                    echo "実行するプレイブック:"
                    env.RESOLVED_PLAYBOOKS.split(',').each { playbook ->
                        echo "  - ${playbook}"
                    }
                }
            }
        }
        
        stage('Ansible実行') {
            steps {
                script {
                    def playbookList = env.RESOLVED_PLAYBOOKS.split(',')
                    
                    playbookList.eachWithIndex { playbook, index ->
                        def stageName = "プレイブック ${index + 1}/${playbookList.size()}: ${playbook}"
                        
                        echo """
                        ========================================
                         ${stageName}
                        ========================================
                        """
                        
                        // Ansibleコマンドの構築
                        def ansibleCmd = buildAnsibleCommand(playbook, params)
                        
                        // teardown確認
                        if (playbook.contains('teardown_pipeline.yml')) {
                            echo "⚠️ 注意: Teardown pipelineを実行します - confirm=trueが自動的に設定されます"
                        }
                        
                        echo "実行コマンド: ${ansibleCmd}"
                        
                        if (params.DRY_RUN) {
                            echo "ドライランモード: 実際の実行はスキップされました"
                        } else {
                                
                                
                            // Ansible実行
                            sh """
                                cd ${ANSIBLE_BASE_DIR}
                                ${ansibleCmd}
                            """
                        }
                        
                        if (index < playbookList.size() - 1) {
                            echo "次のプレイブックに進みます..."
                        }
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo """
            ========================================
             Ansible実行成功
            ========================================
            すべてのプレイブックが正常に実行されました。
            """
        }
        
        failure {
            echo """
            ========================================
             Ansible実行失敗
            ========================================
            プレイブックの実行中にエラーが発生しました。
            ログを確認してください。
            """
        }
        
        always {
            cleanWs()
        }
    }
}
