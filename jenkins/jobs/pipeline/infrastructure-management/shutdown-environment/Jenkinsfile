pipeline {
    agent {
        label 'built-in'
    }

    environment {
        // AWS認証情報
        AWS_REGION = "${params.AWS_REGION}"
        
        // SSMパラメータ名
        CONTROLLER_INSTANCE_ID_PARAM = '/jenkins/infra/controller/instance-id'
        NAT_INSTANCE_ID_PARAM = '/jenkins/infra/nat/instance-id'
        SPOTFLEET_REQUEST_ID_PARAM = '/jenkins/infra/agent/spotfleet-request-id'
        
        // タグフィルター
        JENKINS_ENV_TAG = 'jenkins-infra'
    }

    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    // 停止確認のチェック
                    if (!params.CONFIRM_SHUTDOWN && !params.DRY_RUN) {
                        error("環境停止の確認が必要です。CONFIRM_SHUTDOWNパラメータをチェックしてください。")
                    }
                    
                    echo "=== 環境停止ジョブ開始 ==="
                    echo "リージョン: ${params.AWS_REGION}"
                    echo "停止モード: ${params.SHUTDOWN_MODE}"
                    echo "待機タイムアウト: ${params.WAIT_TIMEOUT_MINUTES}分"
                    echo "ドライラン: ${params.DRY_RUN}"
                }
            }
        }

        stage('Get Resource IDs') {
            steps {
                script {
                    echo "=== リソースIDの取得 ==="
                    
                    // SSMパラメータストアからリソースIDを取得
                    try {
                        env.CONTROLLER_INSTANCE_ID = sh(
                            script: """
                                aws ssm get-parameter \
                                    --name "${CONTROLLER_INSTANCE_ID_PARAM}" \
                                    --region ${AWS_REGION} \
                                    --query 'Parameter.Value' \
                                    --output text 2>/dev/null || echo ""
                            """,
                            returnStdout: true
                        ).trim()
                    } catch (Exception e) {
                        echo "Controller Instance IDの取得をスキップ: ${e.message}"
                        env.CONTROLLER_INSTANCE_ID = ""
                    }
                    
                    try {
                        env.NAT_INSTANCE_ID = sh(
                            script: """
                                aws ssm get-parameter \
                                    --name "${NAT_INSTANCE_ID_PARAM}" \
                                    --region ${AWS_REGION} \
                                    --query 'Parameter.Value' \
                                    --output text 2>/dev/null || echo ""
                            """,
                            returnStdout: true
                        ).trim()
                    } catch (Exception e) {
                        echo "NAT Instance IDの取得をスキップ: ${e.message}"
                        env.NAT_INSTANCE_ID = ""
                    }
                    
                    try {
                        env.SPOTFLEET_REQUEST_ID = sh(
                            script: """
                                aws ssm get-parameter \
                                    --name "${SPOTFLEET_REQUEST_ID_PARAM}" \
                                    --region ${AWS_REGION} \
                                    --query 'Parameter.Value' \
                                    --output text 2>/dev/null || echo ""
                            """,
                            returnStdout: true
                        ).trim()
                    } catch (Exception e) {
                        echo "SpotFleet Request IDの取得をスキップ: ${e.message}"
                        env.SPOTFLEET_REQUEST_ID = ""
                    }
                    
                    // タグベースでインスタンスを検索（フォールバック）
                    if (!env.CONTROLLER_INSTANCE_ID || !env.NAT_INSTANCE_ID) {
                        echo "タグベースでインスタンスを検索..."
                        
                        def instances = sh(
                            script: '''
                                aws ec2 describe-instances \
                                    --filters "Name=tag:Environment,Values=''' + JENKINS_ENV_TAG + '''" \
                                              "Name=instance-state-name,Values=running" \
                                    --region ''' + AWS_REGION + ''' \
                                    --query 'Reservations[*].Instances[*].[InstanceId,Tags[?Key==`Name`]|[0].Value]' \
                                    --output json
                            ''',
                            returnStdout: true
                        )
                        
                        def instanceList = readJSON(text: instances)
                        instanceList.each { reservation ->
                            reservation.each { instance ->
                                def instanceId = instance[0]
                                def name = instance[1]
                                
                                if (name?.contains('controller') && !env.CONTROLLER_INSTANCE_ID) {
                                    env.CONTROLLER_INSTANCE_ID = instanceId
                                    echo "Controller Instance found by tag: ${instanceId}"
                                }
                                if (name?.contains('nat') && !env.NAT_INSTANCE_ID) {
                                    env.NAT_INSTANCE_ID = instanceId
                                    echo "NAT Instance found by tag: ${instanceId}"
                                }
                            }
                        }
                    }
                    
                    echo """
停止対象リソース:
- Controller Instance: ${env.CONTROLLER_INSTANCE_ID ?: 'Not found'}
- NAT Instance: ${env.NAT_INSTANCE_ID ?: 'Not found'}
- SpotFleet Request: ${env.SPOTFLEET_REQUEST_ID ?: 'Not found'}
"""
                }
            }
        }

        stage('Scale Down EC2 Fleet') {
            when {
                expression { 
                    return env.SPOTFLEET_REQUEST_ID && !params.DRY_RUN 
                }
            }
            steps {
                script {
                    echo "=== EC2 Fleet (SpotFleet) のスケールダウン ==="
                    
                    try {
                        // 現在のキャパシティを取得
                        def currentCapacity = sh(
                            script: """
                                aws ec2 describe-spot-fleet-requests \
                                    --spot-fleet-request-ids ${env.SPOTFLEET_REQUEST_ID} \
                                    --region ${AWS_REGION} \
                                    --query 'SpotFleetRequestConfigs[0].SpotFleetRequestConfig.TargetCapacity' \
                                    --output text 2>/dev/null || echo "0"
                            """,
                            returnStdout: true
                        ).trim()
                        
                        echo "現在のキャパシティ: ${currentCapacity}"
                        
                        if (currentCapacity != "0") {
                            // キャパシティを0に設定
                            sh """
                                aws ec2 modify-spot-fleet-request \
                                    --spot-fleet-request-id ${env.SPOTFLEET_REQUEST_ID} \
                                    --target-capacity 0 \
                                    --region ${AWS_REGION}
                            """
                            echo "SpotFleetのキャパシティを0に設定しました"
                            
                            // gracefulモードの場合、エージェントの終了を待つ
                            if (params.SHUTDOWN_MODE == 'graceful') {
                                echo "エージェントジョブの完了を待機中..."
                                
                                timeout(time: params.WAIT_TIMEOUT_MINUTES.toInteger(), unit: 'MINUTES') {
                                    waitUntil {
                                        def runningInstances = sh(
                                            script: """
                                                aws ec2 describe-spot-fleet-instances \
                                                    --spot-fleet-request-id ${env.SPOTFLEET_REQUEST_ID} \
                                                    --region ${AWS_REGION} \
                                                    --query 'ActiveInstances[*].InstanceId' \
                                                    --output json 2>/dev/null || echo "[]"
                                            """,
                                            returnStdout: true
                                        ).trim()
                                        
                                        def instances = readJSON(text: runningInstances)
                                        echo "残りのエージェントインスタンス数: ${instances.size()}"
                                        return instances.size() == 0
                                    }
                                }
                                echo "全エージェントが終了しました"
                            }
                        }
                    } catch (Exception e) {
                        echo "SpotFleetのスケールダウンでエラー: ${e.message}"
                        if (params.SHUTDOWN_MODE == 'graceful') {
                            error("SpotFleetのスケールダウンに失敗しました")
                        }
                    }
                }
            }
        }

        stage('Stop NAT Instance') {
            when {
                expression { 
                    return env.NAT_INSTANCE_ID && !params.DRY_RUN 
                }
            }
            steps {
                script {
                    echo "=== NAT インスタンスの停止 ==="
                    
                    try {
                        // インスタンスの状態を確認
                        def instanceState = sh(
                            script: """
                                aws ec2 describe-instances \
                                    --instance-ids ${env.NAT_INSTANCE_ID} \
                                    --region ${AWS_REGION} \
                                    --query 'Reservations[0].Instances[0].State.Name' \
                                    --output text 2>/dev/null || echo "unknown"
                            """,
                            returnStdout: true
                        ).trim()
                        
                        echo "NAT インスタンスの現在の状態: ${instanceState}"
                        
                        if (instanceState == 'running') {
                            sh """
                                aws ec2 stop-instances \
                                    --instance-ids ${env.NAT_INSTANCE_ID} \
                                    --region ${AWS_REGION}
                            """
                            echo "NAT インスタンスの停止コマンドを送信しました"
                            
                            // 停止開始を待つ（最大1分）
                            timeout(time: 1, unit: 'MINUTES') {
                                waitUntil {
                                    def state = sh(
                                        script: """
                                            aws ec2 describe-instances \
                                                --instance-ids ${env.NAT_INSTANCE_ID} \
                                                --region ${AWS_REGION} \
                                                --query 'Reservations[0].Instances[0].State.Name' \
                                                --output text 2>/dev/null || echo "unknown"
                                        """,
                                        returnStdout: true
                                    ).trim()
                                    return state == 'stopping' || state == 'stopped'
                                }
                            }
                            echo "NAT インスタンスの停止処理を開始しました"
                        } else if (instanceState == 'stopped') {
                            echo "NAT インスタンスは既に停止しています"
                        }
                    } catch (Exception e) {
                        echo "NAT インスタンスの停止でエラー: ${e.message}"
                        // NAT停止の失敗は継続可能
                    }
                }
            }
        }

        stage('Stop Controller Instance') {
            when {
                expression { 
                    return env.CONTROLLER_INSTANCE_ID && !params.DRY_RUN 
                }
            }
            steps {
                script {
                    echo "=== Controller インスタンスの停止（非同期） ==="
                    
                    try {
                        // インスタンスの状態を確認
                        def instanceState = sh(
                            script: """
                                aws ec2 describe-instances \
                                    --instance-ids ${env.CONTROLLER_INSTANCE_ID} \
                                    --region ${AWS_REGION} \
                                    --query 'Reservations[0].Instances[0].State.Name' \
                                    --output text 2>/dev/null || echo "unknown"
                            """,
                            returnStdout: true
                        ).trim()
                        
                        echo "Controller インスタンスの現在の状態: ${instanceState}"
                        
                        if (instanceState == 'running') {
                            // 非同期で停止コマンドを実行（nohupとバックグラウンド実行）
                            sh """
                                # 10秒後にControllerを停止するコマンドをバックグラウンドで実行
                                nohup sh -c 'sleep 10 && aws ec2 stop-instances --instance-ids ${env.CONTROLLER_INSTANCE_ID} --region ${AWS_REGION}' > /dev/null 2>&1 &
                                
                                echo "Controller停止コマンドをスケジュールしました（10秒後に実行）"
                            """
                            
                            echo """
===================================
Controller インスタンスの停止をスケジュールしました。
10秒後に停止処理が開始されます。
このジョブは正常に完了としてマークされます。
===================================
"""
                        } else if (instanceState == 'stopped') {
                            echo "Controller インスタンスは既に停止しています"
                        }
                    } catch (Exception e) {
                        echo "Controller インスタンスの停止スケジュールでエラー: ${e.message}"
                        // 自身の停止なので、エラーでもジョブは成功とする
                    }
                }
            }
        }

        stage('Summary') {
            when {
                expression { return !params.DRY_RUN }
            }
            steps {
                script {
                    echo """
===================================
環境停止ジョブが完了しました
===================================

実行された操作:
1. EC2 Fleet (SpotFleet): ${env.SPOTFLEET_REQUEST_ID ? 'キャパシティを0に設定' : 'スキップ（ID未検出）'}
2. NAT インスタンス: ${env.NAT_INSTANCE_ID ? '停止コマンド送信' : 'スキップ（ID未検出）'}
3. Controller インスタンス: ${env.CONTROLLER_INSTANCE_ID ? '停止スケジュール済み（10秒後）' : 'スキップ（ID未検出）'}

注意: Controllerの停止により、このJenkinsへのアクセスは間もなく失われます。
環境を再開するには、AWSコンソールからインスタンスを起動してください。
"""
                }
            }
        }

        stage('Dry Run Summary') {
            when {
                expression { return params.DRY_RUN }
            }
            steps {
                script {
                    echo """
===================================
ドライラン実行結果
===================================

以下のリソースが停止対象として検出されました:

1. EC2 Fleet (SpotFleet)
   - Request ID: ${env.SPOTFLEET_REQUEST_ID ?: 'Not found'}
   
2. NAT インスタンス
   - Instance ID: ${env.NAT_INSTANCE_ID ?: 'Not found'}
   
3. Controller インスタンス
   - Instance ID: ${env.CONTROLLER_INSTANCE_ID ?: 'Not found'}

実際の停止を行うには、DRY_RUNをfalseに設定して再実行してください。
"""
                }
            }
        }
    }

    post {
        success {
            echo "環境停止ジョブが正常に完了しました"
        }
        failure {
            echo "環境停止ジョブが失敗しました"
        }
        always {
            // クリーンアップ（Controllerが停止する前に実行）
            cleanWs()
        }
    }
}