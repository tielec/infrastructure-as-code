# JobDSL設定ファイル

# 共通設定
common-settings:
  # Jenkinsパイプラインリポジトリ設定
  jenkins-pipeline-repo:
    url: 'https://github.com/tielec/infrastructure-as-code'
    credentials: 'github-app-credentials'
    branch: '*/main'

# Jenkinsジョブ定義
jenkins-jobs:
  # Account Management Jobs
  account_self_activation_job:
    name: 'Activate_My_Account'
    displayName: 'Activate My Account'
    dslfile: jenkins/jobs/dsl/account-setup/account_setup_self_activation_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/account-setup/user-self-activation/Jenkinsfile

  # Admin Jobs
  admin_backup_config_job:
    name: 'Backup_Config'
    displayName: 'Backup Jenkins Configurations'
    dslfile: jenkins/jobs/dsl/admin/admin_backup_config_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/admin/backup-config/Jenkinsfile

  admin_convert_key_job:
    name: 'Convert_GitHub_App_Key'
    displayName: 'GitHub App Key Converter'
    dslfile: jenkins/jobs/dsl/admin/admin_convert_key_job.groovy

  admin_github_webhooks_setting_job:
    name: 'Github_Webhooks_Setting'
    displayName: 'GitHub Webhooks Setting Job'
    dslfile: jenkins/jobs/dsl/admin/admin_github_webhooks_setting_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/admin/github-webhooks-setting/Jenkinsfile

  admin_restore_config_job:
    name: 'Restore_Config'
    displayName: 'Restore Jenkins Configurations'
    dslfile: jenkins/jobs/dsl/admin/admin_restore_config_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/admin/restore-config/Jenkinsfile

  admin_run_script_job:
    name: 'Run_Script'
    displayName: 'Run Shell Script as Admin'
    dslfile: jenkins/jobs/dsl/admin/admin_run_script_job.groovy

  admin_test_ec2_fleet_job:
    name: 'Test_EC2_Fleet_Agent'
    displayName: 'Test EC2 Fleet Agent Functionality'
    dslfile: jenkins/jobs/dsl/admin/admin_test_ec2_fleet_job.groovy

  admin_test_github_job:
    name: 'Test_GitHub_Repository_Access'
    displayName: 'GitHub Repository Access Test Job'
    dslfile: jenkins/jobs/dsl/admin/admin_test_github_job.groovy

  admin_update_config_job:
    name: 'Update_Config'
    displayName: 'Update Jenkins Configuration with JCasC'
    dslfile: jenkins/jobs/dsl/admin/admin_update_config_job.groovy

  admin_user_management_job:
    name: 'Manage_User_Accounts'
    displayName: 'User Account Management Job'
    dslfile: jenkins/jobs/dsl/admin/admin_user_management_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/admin/user-management/Jenkinsfile

  # Code Quality Checker Jobs
  code_quality_rust_code_analysis_check_job:
    name: 'rust-code-analysis-check'
    displayName: 'Repository Code Quality Check'
    dslfile: jenkins/jobs/dsl/code-quality-checker/code_quality_rust_code_analysis_check_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/code-quality-checker/rust-code-analysis-check/Jenkinsfile

  code_quality_rust_code_analysis_check_github_trigger_job:
    name: 'rust-code-analysis-check-github-trigger'
    displayName: 'GitHub Trigger - Repository Code Quality Check'
    dslfile: jenkins/jobs/dsl/code-quality-checker/code_quality_rust_code_analysis_check_github_trigger_job.groovy
    downstreamJob: 'rust-code-analysis-check'

  code_quality_pr_complexity_analyzer_job:
    name: 'pr-complexity-analyzer'
    displayName: 'Pull Request Complexity Analyzer'
    dslfile: jenkins/jobs/dsl/code-quality-checker/code_quality_pr_complexity_analyzer_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/code-quality-checker/pr-complexity-analyzer/Jenkinsfile

  code_quality_pr_complexity_analyzer_github_trigger_job:
    name: 'pr-complexity-analyzer-github-trigger'
    displayName: 'GitHub Trigger - Pull Request Complexity Analyzer'
    dslfile: jenkins/jobs/dsl/code-quality-checker/code_quality_pr_complexity_analyzer_github_trigger_job.groovy
    downstreamJob: 'pr-complexity-analyzer'

  # Docs Generator Jobs
  docs_generator_auto_insert_doxygen_comment_job:
    name: 'auto_insert_doxygen_comment'
    displayName: 'Auto Insert Doxygen Comments'
    dslfile: jenkins/jobs/dsl/docs-generator/docs_generator_auto_insert_doxygen_comment_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/docs-generator/auto-insert-doxygen-comment/Jenkinsfile

  docs_generator_auto_insert_doxygen_comment_test_job:
    name: 'auto_insert_doxygen_comment_test'
    displayName: 'Test Auto Insert Doxygen Comments'
    dslfile: jenkins/jobs/dsl/docs-generator/docs_generator_auto_insert_doxygen_comment_test_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/docs-generator/auto-insert-doxygen-comment/tests/Jenkinsfile

  docs_generator_auto_insert_doxygen_comment_github_trigger_job:
    name: 'auto_insert_doxygen_comment_github_trigger'
    displayName: 'GitHub Trigger - Auto Insert Doxygen Comments'
    dslfile: jenkins/jobs/dsl/docs-generator/docs_generator_auto_insert_doxygen_comment_github_trigger_job.groovy
    downstreamJob: auto_insert_doxygen_comment

  docs_generator_generate_doxygen_html_job:
    name: 'generate_doxygen_html'
    displayName: 'Generate Doxygen HTML Documentation'
    dslfile: jenkins/jobs/dsl/docs-generator/docs_generator_generate_doxygen_html_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/docs-generator/generate-doxygen-html/Jenkinsfile

  docs_generator_generate_doxygen_html_github_trigger_job:
    name: 'generate_doxygen_html_github_trigger'
    displayName: 'GitHub Trigger - Generate Doxygen HTML'
    dslfile: jenkins/jobs/dsl/docs-generator/docs_generator_generate_doxygen_html_github_trigger_job.groovy
    downstreamJob: 'generate_doxygen_html'

  docx_generator_pull_request_comment_builder_job:
    name: 'pull_request_comment_builder'
    displayName: 'Build DOCX from Pull Request Comments'
    dslfile: jenkins/jobs/dsl/docs-generator/docx_generator_pull_request_comment_builder_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/docs-generator/pull-request-comment-builder/Jenkinsfile

  docx_generator_pull_request_comment_builder_github_trigger_job:
    name: 'pull_request_comment_builder_github_trigger'
    displayName: 'GitHub Trigger - Build DOCX from PR Comments'
    dslfile: jenkins/jobs/dsl/docs-generator/docx_generator_pull_request_comment_builder_github_trigger_job.groovy
    downstreamJob: 'pull_request_comment_builder'

  docs_generator_multi_pull_request_comment_builder_job:
    name: 'multi_pull_request_comment_builder'
    displayName: 'Build Docs from Multiple PR Comments'
    dslfile: jenkins/jobs/dsl/docs-generator/docs_generator_multi_pull_request_comment_builder_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/docs-generator/multi-pull-request-comment-builder/Jenkinsfile

  docs_generator_technical_docs_writer_job:
    name: 'technical-docs-writer'
    displayName: 'Technical Documentation Writer'
    dslfile: jenkins/jobs/dsl/docs-generator/docs_generator_technical_docs_writer_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/docs-generator/technical-docs-writer/Jenkinsfile

  docs_generator_technical_docs_writer_schedule_trigger_job:
    name: 'technical-docs-writer-trigger'
    displayName: 'Scheduled Technical Documentation Writer'
    dslfile: jenkins/jobs/dsl/docs-generator/docs_generator_technical_docs_writer_schedule_trigger_job.groovy
    downstreamJob: 'technical-docs-writer'

# Pulumi IaC Jobs
  infrastructure_pulumi_stack_action_test_job:
    name: "pulumi_stack_action_test"
    displayName: "Test Pulumi Stack Action"
    dslfile: jenkins/jobs/dsl/infrastructure/infrastructure_pulumi_stack_action_test_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/infrastructure/pulumi-stack-action/Jenkinsfile

  infrastructure_pulumi_stack_action_job:
    name: "pulumi_stack_action"
    displayName: "Pulumi Stack Action Job"
    dslfile: jenkins/jobs/dsl/infrastructure/infrastructure_pulumi_stack_action_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/infrastructure/pulumi-stack-action/Jenkinsfile

  infrastructure_pulumi_dashboard_job:
    name: "pulumi_dashboard"
    displayName: "Pulumi Projects Dashboard"
    dslfile: jenkins/jobs/dsl/infrastructure/infrastructure_pulumi_dashboard_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/infrastructure/pulumi-dashboard/Jenkinsfile

  # Ansible Playbook Executor Job
  infrastructure_ansible_playbook_executor_job:
    name: "ansible_playbook_executor"
    displayName: "Ansible Playbook Executor"
    dslfile: jenkins/jobs/dsl/infrastructure/infrastructure_ansible_playbook_executor_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/infrastructure/ansible-playbook-executor/Jenkinsfile

  # Shared Library Jobs
  shared_library_aws_sqs_check_operation_test_job:
    name: 'SQS_Check_Operation_Test'
    displayName: 'Test AWS SQS Operations'
    dslfile: jenkins/jobs/dsl/shared-library/shared_library_aws_sqs_check_operation_test_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/shared-library/test-aws-utils/sqs-check-operation/Jenkinsfile

  shared_library_git_deploykeys_operation_test_job:
    name: 'DeployKeys_Operation_Test'
    displayName: 'Test Git Deploy Keys Operations'
    dslfile: jenkins/jobs/dsl/shared-library/shared_library_git_deploykeys_operation_test_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/shared-library/test-git-utils/deploykeys-operation/Jenkinsfile

  shared_library_git_webhook_operation_test_job:
    name: 'Webhook_Operation_Test'
    displayName: 'Test Git Webhook Operations'
    dslfile: jenkins/jobs/dsl/shared-library/shared_library_git_webhook_operation_test_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/shared-library/test-git-utils/webhook-operation/Jenkinsfile

  shared_library_github_apps_basic_operation_test_job:
    name: 'GitHub_Apps_Basic_Operation_Test'
    displayName: 'GitHub Apps Basic Operations Test'
    dslfile: jenkins/jobs/dsl/shared-library/shared_library_github_apps_basic_operation_test_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/shared-library/test-git-utils/github-apps-basic-operation/Jenkinsfile

  shared_library_jenkins_credentials_operation_test_job:
    name: 'Credentials_Operation_Test'
    displayName: 'Test Jenkins Credentials Operations'
    dslfile: jenkins/jobs/dsl/shared-library/shared_library_jenkins_credentials_operation_test_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/shared-library/test-jenkins-utils/credentials-operation/Jenkinsfile

  # Infrastructure Management Jobs
  infrastructure_shutdown_environment_job:
    name: 'Shutdown_Jenkins_Environment'
    displayName: 'Shutdown Jenkins Environment'
    dslfile: jenkins/jobs/dsl/infrastructure-management/infrastructure_shutdown_environment_job.groovy
    jenkinsfile: jenkins/jobs/pipeline/infrastructure-management/shutdown-environment/Jenkinsfile

  # スケジューラージョブ（freestyleジョブのため、jenkinsfileは不要）
  infrastructure_shutdown_scheduler:
    name: 'Shutdown_Environment_Scheduler'
    displayName: 'Environment Auto Shutdown Scheduler'
    dslfile: jenkins/jobs/dsl/infrastructure-management/infrastructure_shutdown_scheduler_job.groovy
    # jenkinsfile: 不要（freestyleジョブ）

# docs-generator 生成対象リポジトリ設定
jenkins-managed-repositories:
  infrastructure-as-code:
    httpsUrl: https://github.com/tielec/infrastructure-as-code
    mainBranch: main
    docBranch: document
    credentialsId: github-app-credentials
    technicalDocsStartDate: '2025-01-01'
    technicalDocsFile: REPODOC.md
    updatePullRequestTitle: 'true'

# Pulumiプロジェクト定義
pulumi-projects:
  infrastructure-as-code:
    projects:
      # Jenkins関連プロジェクト
      jenkins_ssm_init:
        project_path: "jenkins-ssm-init"
        display_name: "Jenkins SSM Init"
        project_type: "nodejs"
        description: "Jenkins SSMパラメータの初期化"
        environments: ['common']  # 共通環境
      
      jenkins_network:
        project_path: "jenkins-network"
        display_name: "Jenkins Network"
        project_type: "nodejs"
        description: "Jenkinsネットワーク構成"
        environments: ['common']  # 共通環境
      
      jenkins_security:
        project_path: "jenkins-security"
        display_name: "Jenkins Security"
        project_type: "nodejs"
        description: "Jenkinsセキュリティグループとロール"
        environments: ['common']  # 共通環境
      
      jenkins_storage:
        project_path: "jenkins-storage"
        display_name: "Jenkins Storage"
        project_type: "nodejs"
        description: "JenkinsストレージEFS"
        environments: ['common']  # 共通環境
      
      jenkins_loadbalancer:
        project_path: "jenkins-loadbalancer"
        display_name: "Jenkins Load Balancer"
        project_type: "nodejs"
        description: "Jenkinsロードバランサー"
        environments: ['common']  # 共通環境
      
      jenkins_nat:
        project_path: "jenkins-nat"
        display_name: "Jenkins NAT"
        project_type: "nodejs"
        description: "Jenkins NATインスタンス"
        environments: ['common']  # 共通環境
      
      jenkins_controller:
        project_path: "jenkins-controller"
        display_name: "Jenkins Controller"
        project_type: "nodejs"
        description: "Jenkinsコントローラーインスタンス"
        environments: ['common']  # 共通環境
      
      jenkins_config:
        project_path: "jenkins-config"
        display_name: "Jenkins Config"
        project_type: "nodejs"
        description: "Jenkins設定管理"
        environments: ['common']  # 共通環境
      
      jenkins_agent_ami:
        project_path: "jenkins-agent-ami"
        display_name: "Jenkins Agent AMI"
        project_type: "nodejs"
        description: "JenkinsエージェントAMI作成"
        environments: ['common']  # 共通環境
      
      jenkins_agent:
        project_path: "jenkins-agent"
        display_name: "Jenkins Agent Fleet"
        project_type: "nodejs"
        description: "JenkinsエージェントFleet管理"
        environments: ['common']  # 共通環境
      
      jenkins_application:
        project_path: "jenkins-application"
        display_name: "Jenkins Application"
        project_type: "nodejs"
        description: "Jenkinsアプリケーション設定"
        environments: ['common']  # 共通環境
      
      # Lambda関連プロジェクト
      lambda_network:
        project_path: "lambda-network"
        display_name: "Lambda Network"
        project_type: "nodejs"
        description: "Lambda用ネットワーク構成"
        environments: ['dev', 'prod']  # 両環境に配置
      
      lambda_security:
        project_path: "lambda-security"
        display_name: "Lambda Security"
        project_type: "nodejs"
        description: "Lambdaセキュリティグループとロール"
        environments: ['dev', 'prod']  # 両環境に配置
      
      lambda_nat:
        project_path: "lambda-nat"
        display_name: "Lambda NAT"
        project_type: "nodejs"
        description: "Lambda用NATインスタンス"
        environments: ['dev', 'prod']  # 両環境に配置
      
      lambda_vpce:
        project_path: "lambda-vpce"
        display_name: "Lambda VPC Endpoint"
        project_type: "nodejs"
        description: "Lambda用VPCエンドポイント"
        environments: ['dev', 'prod']  # 両環境に配置
      
      lambda_database:
        project_path: "lambda-database"
        display_name: "Lambda Database"
        project_type: "nodejs"
        description: "Lambda用データベース"
        environments: ['dev', 'prod']  # 両環境に配置
      
      lambda_functions:
        project_path: "lambda-functions"
        display_name: "Lambda Functions"
        project_type: "nodejs"
        description: "Lambda関数定義"
        environments: ['dev', 'prod']  # 両環境に配置
      
      lambda_api_gateway:
        project_path: "lambda-api-gateway"
        display_name: "Lambda API Gateway"
        project_type: "nodejs"
        description: "Lambda用API Gateway"
        environments: ['dev', 'prod']  # 両環境に配置
      
      lambda_waf:
        project_path: "lambda-waf"
        display_name: "Lambda WAF"
        project_type: "nodejs"
        description: "Lambda用WAF設定"
        environments: ['prod']  # 本番環境のみ
      
      lambda_websocket:
        project_path: "lambda-websocket"
        display_name: "Lambda WebSocket"
        project_type: "nodejs"
        description: "Lambda WebSocket API"
        environments: ['dev', 'prod']  # 両環境に配置
      
      lambda_account_setup:
        project_path: "lambda-account-setup"
        display_name: "Lambda Account Setup"
        project_type: "nodejs"
        description: "Lambdaアカウント設定"
        environments: ['dev', 'prod']  # 両環境に配置
      
      lambda_ip_whitelist:
        project_path: "lambda-ip-whitelist"
        display_name: "Lambda IP Whitelist"
        project_type: "nodejs"
        description: "Lambda IPホワイトリスト管理"
        environments: ['dev', 'prod']  # 両環境に配置
      
      # テスト用プロジェクト
      test_s3:
        project_path: "test-s3"
        display_name: "Test S3"
        project_type: "nodejs"
        description: "S3テスト用リソース"
        environments: ['dev']  # 開発環境のみ

# Ansibleプレイブック定義
ansible-playbooks:
  infrastructure-as-code:
    playbooks:
      # Bootstrap
      bootstrap_setup:
        playbook_path: "bootstrap-setup.yml"
        display_name: "Bootstrap Setup"
        description: "ブートストラップ環境のセットアップ"
        category: "bootstrap"
        environments: ['common']  # 共通環境
      
      # Jenkins Deploy
      jenkins_deploy_ssm_init:
        playbook_path: "jenkins/deploy/deploy_jenkins_ssm_init.yml"
        display_name: "Jenkins SSM Init"
        description: "Jenkins SSMパラメータの初期化"
        category: "jenkins-deploy"
        environments: ['common']  # 共通環境
      
      jenkins_deploy_network_security:
        playbook_path:
          - "jenkins/deploy/deploy_jenkins_network.yml"
          - "jenkins/deploy/deploy_jenkins_security.yml"
        display_name: "Jenkins Network & Security"
        description: "Jenkinsネットワークとセキュリティ設定のデプロイ"
        category: "jenkins-deploy"
        environments: ['common']  # 共通環境
      
      jenkins_deploy_storage:
        playbook_path: "jenkins/deploy/deploy_jenkins_storage.yml"
        display_name: "Jenkins Storage"
        description: "Jenkinsストレージのデプロイ"
        category: "jenkins-deploy"
        environments: ['common']  # 共通環境
      
      jenkins_deploy_loadbalancer:
        playbook_path: "jenkins/deploy/deploy_jenkins_loadbalancer.yml"
        display_name: "Jenkins Load Balancer"
        description: "Jenkinsロードバランサーのデプロイ"
        category: "jenkins-deploy"
        environments: ['common']  # 共通環境
      
      jenkins_deploy_nat:
        playbook_path: "jenkins/deploy/deploy_jenkins_nat.yml"
        display_name: "Jenkins NAT"
        description: "Jenkins NATのデプロイ"
        category: "jenkins-deploy"
        environments: ['common']  # 共通環境
      
      jenkins_deploy_controller_config:
        playbook_path:
          - "jenkins/deploy/deploy_jenkins_controller.yml"
          - "jenkins/deploy/deploy_jenkins_config.yml"
        display_name: "Jenkins Controller & Config"
        description: "Jenkinsコントローラーと設定のデプロイ"
        category: "jenkins-deploy"
        enable_nohup: true  # EC2インスタンスの起動と設定に時間がかかる
        nohup_timeout_minutes: 45
        continue_on_timeout: false  # コントローラーは確実にデプロイする必要がある
        environments: ['common']  # 共通環境
      
      jenkins_deploy_agents:
        playbook_path:
          - "jenkins/deploy/deploy_jenkins_agent_ami.yml"
          - "jenkins/deploy/deploy_jenkins_agent.yml"
        display_name: "Jenkins Agents (AMI & Fleet)"
        description: "JenkinsエージェントAMIとFleetのデプロイ"
        category: "jenkins-deploy"
        enable_nohup: true  # AMI作成に時間がかかる
        nohup_timeout_minutes: 60
        continue_on_timeout: false  # エージェントは完全にデプロイする必要がある
        environments: ['common']  # 共通環境
      
      jenkins_deploy_application:
        playbook_path: "jenkins/deploy/deploy_jenkins_application.yml"
        display_name: "Jenkins Application"
        description: "Jenkinsアプリケーションのデプロイ（Jenkins自体の更新）"
        category: "jenkins-deploy"
        enable_nohup: true  # Jenkins自体の更新がかかるためWorkterminalに処理を任せる
        nohup_timeout_minutes: 30
        continue_on_timeout: false  # アプリケーションは完全にデプロイする必要がある
        environments: ['common']  # 共通環境
      
      # Jenkins Pipeline (グループ化されたプレイブックを使用)
      jenkins_setup_pipeline:
        playbook_path:
          - "jenkins/deploy/deploy_jenkins_ssm_init.yml"
          - "jenkins/deploy/deploy_jenkins_network.yml"
          - "jenkins/deploy/deploy_jenkins_security.yml"
          - "jenkins/deploy/deploy_jenkins_storage.yml"
          - "jenkins/deploy/deploy_jenkins_loadbalancer.yml"
          - "jenkins/deploy/deploy_jenkins_nat.yml"
          - "jenkins/deploy/deploy_jenkins_controller.yml"
          - "jenkins/deploy/deploy_jenkins_config.yml"
          - "jenkins/deploy/deploy_jenkins_agent_ami.yml"
          - "jenkins/deploy/deploy_jenkins_agent.yml"
          - "jenkins/deploy/deploy_jenkins_application.yml"
        display_name: "Jenkins Setup Pipeline (Full)"
        description: "Jenkins完全セットアップパイプライン（全コンポーネントを順番にデプロイ）"
        category: "jenkins-pipeline"
        enable_nohup: true  # 長時間実行のためnohupを有効化
        nohup_timeout_minutes: 180  # タイムアウト時間（分）
        continue_on_timeout: false  # セットアップは完全に実行する必要がある
        environments: ['common']  # 共通環境
      
      jenkins_teardown_pipeline:
        playbook_path: "jenkins/jenkins_teardown_pipeline.yml"
        display_name: "Jenkins Teardown Pipeline"
        description: "Jenkins完全削除パイプライン（全コンポーネントを削除）"
        category: "jenkins-pipeline"
        enable_nohup: true  # Jenkinsがすぐに使えなくなるためnohupが必要
        nohup_timeout_minutes: 1  # Jenkinsがすぐに停止するため短時間でOK
        continue_on_timeout: true  # タイムアウト後も削除処理は続行される
        environments: ['common']  # 共通環境
      
      # Jenkins Misc
      update_jenkins_ami_ssm:
        playbook_path: "jenkins/misc/update_jenkins_ami_ssm.yml"
        display_name: "Update Jenkins AMI SSM"
        description: "Jenkins AMI SSMパラメータの更新"
        category: "jenkins-misc"
        environments: ['common']  # 共通環境
      
      # Lambda
      lambda_ip_whitelist:
        playbook_path: "lambda_ip_whitelist.yml"
        display_name: "Lambda IP Whitelist"
        description: "Lambda IPホワイトリストの管理"
        category: "lambda"
        environments: ['dev', 'prod']  # 両環境に配置
      
      lambda_setup_pipeline:
        playbook_path: "lambda_setup_pipeline.yml"
        display_name: "Lambda Setup Pipeline"
        description: "Lambda完全セットアップパイプライン"
        category: "lambda"
        enable_nohup: true  # Lambda関数のデプロイも時間がかかる可能性
        nohup_timeout_minutes: 60
        continue_on_timeout: false  # Lambda関数は完全にデプロイされる必要がある
        environments: ['dev', 'prod']  # 両環境に配置
      
      lambda_teardown_pipeline:
        playbook_path: "lambda_teardown_pipeline.yml"
        display_name: "Lambda Teardown Pipeline"
        description: "Lambda完全削除パイプライン"
        category: "lambda"
        enable_nohup: true
        nohup_timeout_minutes: 30
        continue_on_timeout: true  # 削除処理なので続行可能
        environments: ['dev', 'prod']  # 両環境に配置
      
      # Test
      test_aws_cli_helper:
        playbook_path: "test/test-aws-cli-helper.yml"
        display_name: "Test AWS CLI Helper"
        description: "AWS CLIヘルパーのテスト"
        category: "test"
        environments: ['dev']  # 開発環境のみ
      
      test_s3_validation:
        playbook_path: "test/test-s3-validation.yml"
        display_name: "Test S3 Validation"
        description: "S3バリデーションのテスト"
        category: "test"
        environments: ['dev']  # 開発環境のみ
      
      test_ssm_parameter_store:
        playbook_path: "test/test-ssm-parameter-store.yml"
        display_name: "Test SSM Parameter Store"
        description: "SSMパラメータストアのテスト"
        category: "test"
        environments: ['dev']  # 開発環境のみ
