pipeline {
    agent {
        label 'built-in'
    }

    environment {
        JOB_CONFIG_PATH = 'jenkins/jobs/pipeline/_seed/job-creator/job-config.yaml'
        FOLDER_CONFIG_PATH = 'jenkins/jobs/pipeline/_seed/job-creator/folder-config.yaml'
        FOLDERS_DSL_PATH = 'jenkins/jobs/dsl/folders.groovy'
    }
    
    stages {
        stage('Validate Configuration') {
            steps {
                script {
                    def validationErrors = []
                    def validationSummary = []
                    
                    echo "=== Starting configuration validation ==="
                    
                    // 設定ファイルの存在チェック
                    if (!fileExists(env.JOB_CONFIG_PATH)) {
                        error("Job configuration file not found: ${env.JOB_CONFIG_PATH}")
                    }
                    echo "✓ Job configuration file found: ${env.JOB_CONFIG_PATH}"
                    
                    if (!fileExists(env.FOLDER_CONFIG_PATH)) {
                        error("Folder configuration file not found: ${env.FOLDER_CONFIG_PATH}")
                    }
                    echo "✓ Folder configuration file found: ${env.FOLDER_CONFIG_PATH}"
                    
                    if (!fileExists(env.FOLDERS_DSL_PATH)) {
                        error("Folders DSL file not found: ${env.FOLDERS_DSL_PATH}")
                    }
                    echo "✓ Folders DSL file found: ${env.FOLDERS_DSL_PATH}"
                    
                    // ジョブ設定の検証
                    def jobConfig = readYaml file: env.JOB_CONFIG_PATH
                    def totalJobs = jobConfig['jenkins-jobs'].size()
                    def processedJobs = 0
                    
                    echo "\n=== Validating ${totalJobs} job configurations ==="
                    
                    // jenkins-jobsの各ジョブ設定を検証
                    jobConfig['jenkins-jobs'].each { jobKey, jobDef ->
                        processedJobs++
                        def jobValidationResults = []
                        def hasErrors = false
                        
                        // 進捗表示（10ジョブごと）
                        if (processedJobs % 10 == 0 || processedJobs == totalJobs) {
                            echo "Progress: ${processedJobs}/${totalJobs} jobs validated..."
                        }
                        
                        // dslfileの存在チェック
                        if (jobDef.dslfile) {
                            if (!fileExists(jobDef.dslfile)) {
                                validationErrors.add("Job '${jobKey}': DSL file not found - ${jobDef.dslfile}")
                                jobValidationResults.add("  ✗ DSL file: ${jobDef.dslfile} (NOT FOUND)")
                                hasErrors = true
                            } else {
                                jobValidationResults.add("  ✓ DSL file: ${jobDef.dslfile}")
                            }
                        }
                        
                        // jenkinsfileの存在チェック（定義されている場合のみ）
                        if (jobDef.jenkinsfile) {
                            if (!fileExists(jobDef.jenkinsfile)) {
                                validationErrors.add("Job '${jobKey}': Jenkinsfile not found - ${jobDef.jenkinsfile}")
                                jobValidationResults.add("  ✗ Jenkinsfile: ${jobDef.jenkinsfile} (NOT FOUND)")
                                hasErrors = true
                            } else {
                                jobValidationResults.add("  ✓ Jenkinsfile: ${jobDef.jenkinsfile}")
                            }
                        }
                        
                        // エラーがある場合のみ詳細を記録
                        if (hasErrors) {
                            validationSummary.add("${jobKey}:")
                            validationSummary.addAll(jobValidationResults)
                        }
                    }
                    
                    // フォルダ設定の簡易検証
                    def folderConfig = readYaml file: env.FOLDER_CONFIG_PATH
                    def folderCount = folderConfig.folders?.size() ?: 0
                    def dynamicRuleCount = folderConfig.dynamic_folders?.size() ?: 0
                    echo "\n=== Folder configuration summary ==="
                    echo "Static folders defined: ${folderCount}"
                    echo "Dynamic folder rules: ${dynamicRuleCount}"
                    
                    // 検証結果のサマリー表示
                    echo "\n=== Validation Summary ==="
                    echo "Total jobs validated: ${totalJobs}"
                    echo "Total folders: ${folderCount}"
                    echo "Errors found: ${validationErrors.size()}"
                    
                    // エラーがある場合は詳細を表示
                    if (validationErrors.size() > 0) {
                        echo "\n=== Validation Errors ==="
                        echo validationSummary.join('\n')
                        
                        def errorMessage = "Configuration validation failed with ${validationErrors.size()} errors. Please check the file paths."
                        error(errorMessage)
                    } else {
                        echo "\n✅ All validations passed successfully!"
                    }
                }
            }
        }
        
        stage('Create Folder Structure and Jobs') {
            steps {
                script {
                    // 設定ファイルを読み込む
                    def jobConfig = readYaml file: env.JOB_CONFIG_PATH
                    def folderConfig = readYaml file: env.FOLDER_CONFIG_PATH
                    
                    def dslFiles = []
                    
                    // folders.groovyを最初に実行（フォルダ構造を作成）
                    dslFiles.add(env.FOLDERS_DSL_PATH)
                    
                    // 各ジョブのDSLファイルを追加
                    jobConfig['jenkins-jobs'].each { jobKey, jobDef ->
                        if (jobDef.dslfile) {
                            dslFiles.add(jobDef.dslfile)
                        }
                    }
                    
                    echo "=== Job DSL Execution Plan ==="
                    echo "Total DSL files: ${dslFiles.size()}"
                    echo "Jobs to create: ${jobConfig['jenkins-jobs'].size()}"
                    echo "Folders to create: ${folderConfig.folders?.size() ?: 0}"
                    
                    // 追加のパラメータを準備
                    def additionalParams = [
                        // ジョブ設定
                        jenkinsJobsConfig: jobConfig['jenkins-jobs'],
                        // フォルダ設定
                        jenkinsFoldersConfig: folderConfig
                    ]
                    
                    // リポジトリ設定が存在する場合は追加
                    if (jobConfig['jenkins-managed-repositories']) {
                        echo "Managed repositories: ${jobConfig['jenkins-managed-repositories'].size()}"
                        additionalParams['jenkinsManagedRepositories'] = jobConfig['jenkins-managed-repositories']
                    }

                    // Pulumiプロジェクト設定が存在する場合は追加（この部分を追加）
                    if (jobConfig['pulumi-projects']) {
                        echo "Pulumi projects: ${jobConfig['pulumi-projects'].size()}"
                        additionalParams['pulumi_projects'] = jobConfig['pulumi-projects']
                    }
                    
                    // Ansibleプレイブック設定が存在する場合は追加
                    if (jobConfig['ansible-playbooks']) {
                        echo "Ansible playbooks: ${jobConfig['ansible-playbooks'].size()}"
                        additionalParams['ansible_playbooks'] = jobConfig['ansible-playbooks']
                    }
                    
                    // 共通設定が存在する場合は追加
                    if (jobConfig['common-settings']) {
                        echo "Common settings: Available"
                        additionalParams['commonSettings'] = jobConfig['common-settings']
                    }
                    
                    echo "\n=== Executing Job DSL ==="
                    echo "⚠️ Note: Jobs, views, and config files no longer defined in DSL will be automatically deleted."
                    echo "This ensures that the Jenkins configuration stays in sync with the DSL definitions."
                    
                    // Job DSLを実行
                    // removedJobAction: 'DELETE' - DSLから削除されたジョブを自動削除
                    // removedViewAction: 'DELETE' - DSLから削除されたビューを自動削除
                    // removedConfigFilesAction: 'DELETE' - DSLから削除された設定ファイルを自動削除
                    def dslResult = jobDsl(
                        targets: dslFiles.join('\n'),
                        lookupStrategy: 'SEED_JOB',
                        additionalParameters: additionalParams,
                        removedJobAction: 'DELETE',
                        removedViewAction: 'DELETE',
                        removedConfigFilesAction: 'DELETE'
                    )
                    
                    // DSL実行結果のサマリー表示
                    echo "\n=== Job DSL Execution Summary ==="
                    echo "Jobs created: ${dslResult.createdJobs.size()}"
                    echo "Jobs updated: ${dslResult.updatedJobs.size()}"
                    echo "Jobs removed: ${dslResult.removedJobs.size()}"
                    echo "Views created: ${dslResult.createdViews.size()}"
                    echo "Views updated: ${dslResult.updatedViews.size()}"
                    echo "Views removed: ${dslResult.removedViews.size()}"
                    echo "Config files created: ${dslResult.createdConfigFiles.size()}"
                    echo "Config files updated: ${dslResult.updatedConfigFiles.size()}"
                    echo "Config files removed: ${dslResult.removedConfigFiles.size()}"
                    
                    // 削除されたジョブがある場合は詳細を表示
                    if (dslResult.removedJobs.size() > 0) {
                        echo "\n⚠️ The following jobs were removed:"
                        dslResult.removedJobs.each { job ->
                            echo "  - ${job}"
                        }
                    }
                    
                    // 削除されたビューがある場合は詳細を表示
                    if (dslResult.removedViews.size() > 0) {
                        echo "\n⚠️ The following views were removed:"
                        dslResult.removedViews.each { view ->
                            echo "  - ${view}"
                        }
                    }
                    
                    // 削除された設定ファイルがある場合は詳細を表示
                    if (dslResult.removedConfigFiles.size() > 0) {
                        echo "\n⚠️ The following config files were removed:"
                        dslResult.removedConfigFiles.each { configFile ->
                            echo "  - ${configFile}"
                        }
                    }
                    
                    echo "\n✅ Job DSL execution completed!"
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo "✅ Seed job completed successfully!"
        }
        failure {
            echo "❌ Seed job failed. Please check the logs for details."
        }
    }
}
