# Jenkins フォルダ構造設定ファイル

# フォルダ定義（フラット構造）
folders:
  # 管理者用ジョブフォルダ
  - path: "Admin_Jobs"
    displayName: "01. [Admin] 管理ジョブ"
    description: |
      このフォルダーには、管理者用のジョブが含まれています。
      
      ### 概要
      Jenkins環境の管理・保守に必要な各種ジョブを集約しています。
      設定のバックアップ/リストア、GitHub連携の設定、ユーザー管理、
      システムテストなどの管理タスクを実行できます。
      
      ### 注意事項
      * 一部のジョブはmasterノードでの実行が必要です
      * 管理者権限が必要なジョブが含まれています
      * 実行前に各ジョブの説明を確認してください

  # アカウントセットアップフォルダ
  - path: "Account_Setup"
    displayName: "02. [Admin] アカウントセットアップ"
    description: |
      このフォルダーには、アカウントセットアップを行うジョブが含まれています。
      
      ### 概要
      * 新規ユーザーのアカウントセットアップを自動化するジョブを管理

  # プレイグラウンドフォルダ
  - path: "Playgrounds"
    displayName: "90. [Sandbox] プレイグラウンド"
    description: |
      このフォルダーは、ユーザーが自由にジョブの作成と検証を行うための場所です。
      
      ### 目的
      * 各ユーザーが独自のジョブを作成し、安全に検証できる環境を提供
      * CI/CDパイプラインの実験や新機能のテストに活用
      
      ### 使用方法
      1. このフォルダ内に自分の名前でサブフォルダを作成してください  
         例: Playgrounds/yamada/
      2. 作成したフォルダ内で自由にジョブを作成・検証できます
      
      ### 注意事項
      * 他のユーザーのフォルダには変更を加えないでください
      * リソースの過剰な使用は避けてください
      * 本番環境に影響を与える可能性のある操作は行わないでください
      * 定期的に不要なジョブやフォルダの清掃を行ってください
      
      不明点がある場合は管理者に確認してください。

  # コード品質チェッカーフォルダ
  - path: "Code_Quality_Checker"
    displayName: "30. [Quality] コード品質チェック"
    description: |
      このフォルダーには、コード品質チェックを行うジョブが含まれています。
      
      ### 概要
      各プロジェクトのソースコードの品質を自動的に分析・評価します。
      循環的複雑度（Cyclomatic Complexity）の測定など、コード品質の向上と技術的負債の
      管理に必要なジョブを集約しています。
      
      ### 主な機能
      * **循環的複雑度分析** - 関数の複雑さを数値化し、リファクタリング対象を特定
      
      ### メトリクスの解釈
      * **複雑度 1-10**: シンプルで理解しやすい（推奨）
      * **複雑度 11-15**: やや複雑（要注意）
      * **複雑度 16以上**: 複雑でリスクが高い（リファクタリング推奨）
      
      ### 実行方法
      * 定期実行: 毎週月曜日の朝9時に自動実行
      * 手動実行: 各ジョブの「Build with Parameters」から実行

  # ドキュメント生成フォルダ
  - path: "Document_Generator"
    displayName: "31. [Quality] ドキュメント生成"
    description: |
      このフォルダーには、ドキュメント自動生成を行うジョブが含まれています。
      
      ### 概要
      各プロジェクトのソースコードから技術ドキュメントを自動生成します。
      Doxygenによるコード解析、コメント自動挿入、プルリクエストへの
      ドキュメントフィードバックなど、開発ドキュメントの品質向上と
      保守性を高めるためのジョブを管理しています。
      
      ### 構成
      * プロジェクトごとにサブフォルダで管理
      * GitHub連携による自動実行とマニュアル実行の両方に対応
      * Doxygen、技術文書生成、PRコメント機能を提供

  # デリバリー管理ジョブフォルダ
  - path: "delivery-management-jobs"
    displayName: "10. [Deploy] デリバリー管理"
    description: |
      このフォルダーには、インフラストラクチャとアプリケーションの
      デリバリー（配信・展開）を管理するジョブが含まれています。
      
      ### 概要
      CI/CDパイプラインの最終段階として、各種サービスやインフラの
      本番環境・開発環境へのデプロイメントを統括管理します。
      
      ### 構成
      * common: 両環境共通のジョブ
      * development: 開発環境向けデリバリー
      * production: 本番環境向けデリバリー
      
      ### 対象
      * インフラストラクチャ（Pulumi等）
      * アプリケーション（各種サービス）
      * 設定・構成管理（Ansible等）
      
      ### 注意事項
      * 環境別に権限が設定されています
      * 本番環境へのデリバリーは承認プロセスが必要です

  # 共通環境フォルダ
  - path: "delivery-management-jobs/common"
    displayName: "Common"
    description: |
      両環境共通のジョブ
      
      ### 概要
      開発・本番両環境で使用可能な共通ジョブ
      
      ### 対象
      * Bootstrap設定
      * Jenkins環境管理
      * 基盤インフラストラクチャ

  # 共通環境Pulumiデプロイメント
  - path: "delivery-management-jobs/common/pulumi-deployments"
    displayName: "Pulumi Deployments"
    description: |
      共通環境のPulumiインフラストラクチャデプロイメント
      
      ### 含まれるジョブ
      * Jenkins関連インフラストラクチャ（ネットワーク、セキュリティ、ストレージ等）
      * 共通基盤インフラストラクチャ
      
      Infrastructure as Codeによる環境構築・更新を管理

  # 共通環境Ansibleデプロイメント
  - path: "delivery-management-jobs/common/ansible-deployments"
    displayName: "Ansible Deployments"
    description: |
      共通環境のAnsibleプレイブック実行
      
      ### 含まれるジョブ
      * Bootstrap設定
      * Jenkins環境のデプロイ・削除
      * Jenkinsメンテナンスタスク
      
      Configuration as Codeによる環境構成・管理

  # 開発環境デリバリーフォルダ
  - path: "delivery-management-jobs/development"
    displayName: "Development"
    description: |
      開発環境向けのデリバリージョブ
      
      ### 実行権限
      開発チームメンバーが実行可能
      
      ### 特徴
      * 迅速なフィードバックサイクル
      * 実験的な変更の検証が可能

  # 開発環境Pulumiデプロイメント
  - path: "delivery-management-jobs/development/pulumi-deployments"
    displayName: "Pulumi Deployments"
    description: |
      開発環境のPulumiインフラストラクチャデプロイメント
      
      Infrastructure as Codeによる環境構築・更新を管理

  # 開発環境Ansibleデプロイメント
  - path: "delivery-management-jobs/development/ansible-deployments"
    displayName: "Ansible Deployments"
    description: |
      開発環境のAnsibleプレイブック実行
      
      ### 含まれるジョブ
      * Lambda関数管理（IPホワイトリスト、セットアップ/削除）
      * テストプレイブック（AWS CLI、S3、SSMパラメータストア）
      
      Configuration as Codeによる環境構成・管理を実施

  # 本番環境デリバリーフォルダ
  - path: "delivery-management-jobs/production"
    displayName: "Production"
    description: |
      本番環境向けのデリバリージョブ
      
      ### 実行権限
      本番デプロイ権限を持つメンバーのみ実行可能
      
      ### プロセス
      * すべてのデリバリーに承認が必要
      * 変更内容の事前レビュー必須
      * ロールバック手順の確認必須
      
      ### 注意事項
      * 実行前に必ず影響範囲を確認
      * 関係者への通知を忘れずに

  # 本番環境Pulumiデプロイメント
  - path: "delivery-management-jobs/production/pulumi-deployments"
    displayName: "Pulumi Deployments"
    description: |
      本番環境のPulumiインフラストラクチャデプロイメント
      
      本番環境の安定性を保ちながら、計画的な更新を実施

  # 本番環境Ansibleデプロイメント
  - path: "delivery-management-jobs/production/ansible-deployments"
    displayName: "Ansible Deployments"
    description: |
      本番環境のAnsibleプレイブック実行
      
      ⚠️ **注意**: 本番環境の変更は慎重に行ってください
      
      ### 含まれるジョブ
      * Lambda関数管理（IPホワイトリスト、セットアップ/削除）
      
      ### 注意事項
      * 本番環境のLambda関数に影響します
      * 実行前に開発環境でテストすることを推奨
      
      Configuration as Codeによる本番環境の構成管理

  # 共有ライブラリフォルダ
  - path: "Shared_Library"
    displayName: "40. [Test] 共有ライブラリテスト"
    description: |
      このフォルダーには、共有ライブラリのテストやサンプルジョブが含まれています。
      
      ### 概要
      * 共有ライブラリの機能をテストするためのジョブを管理
      * 共有ライブラリの使用例を示すサンプルジョブを管理

  # 共有ライブラリ - AWSユーティリティ
  - path: "Shared_Library/AWS_Utils"
    displayName: "AWS Utilities Tests & Examples"
    description: |
      このフォルダーには、AWSユーティリティのテストジョブが含まれています。
      
      ### 概要
      * AWSの操作をテストするジョブを管理

  # 共有ライブラリ - Jenkins CLIユーティリティ
  - path: "Shared_Library/Jenkins_Cli_Utils"
    displayName: "Jenkins CLI Utilities Tests & Examples"
    description: |
      このフォルダーには、Jenkins CLIユーティリティのテストジョブが含まれています。
      
      ### 概要
      * Jenkins CLIを使用した操作をテストするジョブを管理
      * Jenkins CLIの機能を検証するためのサンプルジョブを管理

  # 共有ライブラリ - Gitユーティリティ
  - path: "Shared_Library/Git_Utils"
    displayName: "Git Utilities Tests & Examples"
    description: |
      このフォルダーには、Gitユーティリティのテストジョブが含まれています。
      
      ### 概要
      * Gitの操作をテストするジョブを管理

  # パイプラインテストフォルダ
  - path: "Pipeline_Tests"
    displayName: "41. [Test] パイプラインテスト"
    description: |
      このフォルダーには、パイプラインのテストジョブが含まれています。
      
      ### 概要
      * パイプラインの機能をテストするためのジョブを管理
      * パイプラインスクリプトの検証やデバッグに使用

  # パイプラインテスト - ドキュメント生成
  - path: "Pipeline_Tests/Document_Generator"
    displayName: "Document Generator Tests"
    description: |
      このフォルダーには、ドキュメント自動生成パイプラインのテストジョブが含まれています。
      
      ### 概要
      * ドキュメント自動生成パイプラインの機能をテストするためのジョブを管理
      * パイプラインスクリプトの検証やデバッグに使用

  # パイプラインテスト - インフラストラクチャ
  - path: "Pipeline_Tests/Infrastructure"
    displayName: "Infrastructure Tests"
    description: |
      このフォルダーには、インフラストラクチャ関連のパイプラインテストジョブが含まれています。
      
      ### 概要
      * Pulumi、Terraform等のIaCツールのパイプラインテスト
      * インフラストラクチャのデプロイメント・管理パイプラインの検証

  # インフラストラクチャー管理フォルダ
  - path: "Infrastructure_Management"
    displayName: "20. [Ops] インフラ運用管理"
    description: |
      このフォルダーには、インフラストラクチャーの管理ジョブが含まれています。

      ### 概要
      Jenkins、Lambda、その他AWSリソースなど、プロジェクト全体のインフラストラクチャー管理タスクを実行します。
      環境の起動、停止、スケーリング、メンテナンス、コスト最適化などの操作を管理します。

      ### 主な機能
      * **Jenkins環境停止** - Jenkins環境（Controller、Agent）を安全に停止
      * **Lambda NAT削除** - Lambda NAT Instanceの夜間自動削除
      * **環境起動** - 各種環境を起動
      * **スケーリング** - エージェントのスケール調整
      * **コスト最適化** - 不要リソースの自動削除によるコスト削減

      ### 注意事項
      * これらのジョブはインフラストラクチャー全体に影響を与える可能性があります
      * 実行前に他のジョブの実行状況を確認してください
      * 管理者権限が必要な操作が含まれています

  # AI駆動開発フォルダ
  - path: "AI_Workflow"
    displayName: "50. [AI] AI駆動開発"
    description: |
      このフォルダーには、AI駆動開発自動化ワークフローのジョブが含まれています。

      ### 概要
      GitHub IssueからPR作成まで、Claude AIが自動的に開発プロセスを実行します。
      要件定義、詳細設計、テストシナリオ、実装、テスト、ドキュメント作成の
      6フェーズを自動化し、開発者の生産性を向上させます。

      ### 主な機能
      * **自動要件定義** - GitHub Issueから要件定義書を生成
      * **自動設計** - 詳細設計書とアーキテクチャドキュメントを生成
      * **自動テストシナリオ** - BDD形式のテストシナリオを生成
      * **自動実装** - コードの自動生成と既存コードの拡張
      * **自動テスト** - テストの実行と結果検証
      * **自動ドキュメント** - README、APIドキュメントを生成

      ### ワークフロー
      1. Phase 1: 要件定義 (Requirements)
      2. Phase 2: 詳細設計 (Design)
      3. Phase 3: テストシナリオ (Test Scenario)
      4. Phase 4: 実装 (Implementation)
      5. Phase 5: テスト実行 (Testing)
      6. Phase 6: ドキュメント作成 (Documentation)
      7. PR作成

      ### AIレビュー
      各フェーズ完了後、AIが批判的思考レビューを実施:
      - **PASS**: 次フェーズへ進行
      - **PASS_WITH_SUGGESTIONS**: 改善提案あり、次フェーズへ進行
      - **FAIL**: リトライ（最大3回）

      ### コスト管理
      - 1ワークフローあたり最大 $5.00 USD
      - トークン数の追跡とコスト制限
      - 警告閾値: 80%（$4.00）

      ### パラメータ
      * **ISSUE_URL**: GitHub Issue URL（必須）
      * **DRY_RUN**: ドライランモード（デフォルト: false）
      * **SKIP_REVIEW**: レビュースキップ（デフォルト: false）
      * **MAX_RETRIES**: 最大リトライ回数（デフォルト: 3）
      * **COST_LIMIT_USD**: コスト上限（デフォルト: $5.00）
      * **LOG_LEVEL**: ログレベル（デフォルト: INFO）

      ### 現在の実装状況
      **MVP v1.0.0**: ワークフロー基盤のみ実装
      - ✅ ワークフロー初期化（metadata.json生成）
      - ✅ Python環境セットアップ
      - ⏳ Phase 1-6の自動実行は今後の拡張で実装予定

      ### 必要な認証情報
      * **claude-api-key**: Claude API キー（Jenkinsクレデンシャル）
      * **github-token**: GitHub Token（Jenkinsクレデンシャル）

      ### 必要な環境
      * Python 3.10以上
      * pip
      * Git

      ### ドキュメント
      * **README**: scripts/ai-workflow/README.md
      * **アーキテクチャ**: scripts/ai-workflow/ARCHITECTURE.md
      * **トラブルシューティング**: scripts/ai-workflow/TROUBLESHOOTING.md
      * **ロードマップ**: scripts/ai-workflow/ROADMAP.md

      ### 成果物
      実行後、`.ai-workflow/issue-{番号}/` に以下が生成されます:
      * metadata.json - ワークフロー状態管理
      * 01-requirements.md - 要件定義書（将来実装）
      * 02-design.md - 詳細設計書（将来実装）
      * 03-test-scenario.md - テストシナリオ（将来実装）
      * 04-implementation.md - 実装ログ（将来実装）
      * 05-testing.md - テスト実行ログ（将来実装）
      * 06-documentation.md - ドキュメント（将来実装）

      ### 注意事項
      * このジョブはClaude APIを使用します（有料）
      * コスト上限を超えると自動停止します
      * 実行前にIssue内容を確認してください
      * DRY_RUNモードで動作確認することを推奨

# 動的フォルダ生成ルール
dynamic_folders:
  # Code Quality Checkerのリポジトリ別フォルダ
  - parent_path: "Code_Quality_Checker"
    source: "jenkins-managed-repositories"
    template:
      path_suffix: "{name}"
      displayName: "Code Quality - {name}"
      description: |
        {name}リポジトリのコード品質チェックジョブ
        
        ### 提供機能
        * **循環的複雑度分析** - 複雑度の測定とレポート生成
        * **閾値チェック** - 設定した閾値を超える関数の自動検出
        * **HTMLレポート** - 視覚的に分かりやすい分析結果の表示
        
        ### レポート内容
        * 全関数の複雑度一覧（上位300件）
        * 統計情報（総関数数、平均複雑度、最大複雑度など）
        * 問題のある関数のハイライト（色分け表示）
        
        ### カスタマイズ可能な閾値
        * **複雑度閾値**: デフォルト15（変更可能）
        * **最小コード行数**: デフォルト100行
        
        ### 除外設定
        テストコード、ビルド成果物、外部ライブラリなどを自動的に除外

  # Document Generatorのリポジトリ別フォルダ
  - parent_path: "Document_Generator"
    source: "jenkins-managed-repositories"
    template:
      path_suffix: "{name}"
      displayName: "Document Generator - {name}"
      description: |
        {name}リポジトリのドキュメント自動生成ジョブ
        
        ### 提供機能
        * **Doxygenコメント自動挿入** - ソースコードにDoxygenコメントを自動追加
        * **Doxygen HTML生成** - コードからHTML形式のAPIドキュメントを生成
        * **PRコメント機能** - プルリクエストにドキュメント関連のフィードバックを投稿
        * **技術文書生成** - プロジェクトの技術文書を自動作成
        
        ### 実行方法
        * GitHub Webhookによる自動実行（*_github_triggerジョブ）
        * 手動実行による個別処理