/**
 * AI Workflow Orchestrator - Jenkinsfile
 *
 * GitHub IssueからPR作成まで、Claude AIによる自動開発を実行
 *
 * パラメータ（Job DSLで定義）:
 * - ISSUE_URL: GitHub Issue URL（必須）
 * - DRY_RUN: ドライランモード（デフォルト: false）
 * - SKIP_REVIEW: レビュースキップ（デフォルト: false）
 * - MAX_RETRIES: 最大リトライ回数（デフォルト: 3）
 * - COST_LIMIT_USD: コスト上限USD（デフォルト: 5.0）
 * - LOG_LEVEL: ログレベル（デフォルト: INFO）
 *
 * 重要: パラメータ定義はこのファイルでは行いません（Job DSLで定義済み）
 */

// Jenkins共有ライブラリ（将来実装）
// @Library('jenkins-shared-library') _

pipeline {
    agent {
        label 'linux'  // Pythonが実行可能なLinuxエージェント
    }

    options {
        // ビルド保持設定
        buildDiscarder(logRotator(numToKeep: 30, daysToKeep: 90))

        // タイムアウト（最大30分）
        timeout(time: 30, unit: 'MINUTES')

        // タイムスタンプ表示
        timestamps()

        // カラー出力
        ansiColor('xterm')

        // 同時実行禁止
        disableConcurrentBuilds()
    }

    environment {
        // Python実行環境
        PYTHON_PATH = '/usr/bin/python3'
        PYTHONUNBUFFERED = '1'
        PYTHONUTF8 = '1'

        // AI Workflow設定
        WORKFLOW_DIR = 'scripts/ai-workflow'
        WORKFLOW_VERSION = '1.0.0'

        // 認証情報（Jenkinsクレデンシャルから取得）
        CLAUDE_API_KEY = credentials('claude-api-key')
        GITHUB_TOKEN = credentials('github-token')

        // Issue番号（ISSUE_URLから抽出）
        ISSUE_NUMBER = ''
    }

    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    echo "========================================="
                    echo "AI Workflow Orchestrator v${env.WORKFLOW_VERSION}"
                    echo "========================================="

                    // パラメータ検証
                    if (!params.ISSUE_URL) {
                        error("ISSUE_URL パラメータが必須です")
                    }

                    if (!params.ISSUE_URL.startsWith('https://github.com/')) {
                        error("ISSUE_URL は GitHub Issue URLである必要があります: ${params.ISSUE_URL}")
                    }

                    // Issue番号抽出
                    def urlParts = params.ISSUE_URL.split('/')
                    env.ISSUE_NUMBER = urlParts[-1]

                    echo "Issue URL: ${params.ISSUE_URL}"
                    echo "Issue Number: ${env.ISSUE_NUMBER}"
                    echo "Dry Run: ${params.DRY_RUN}"
                    echo "Skip Review: ${params.SKIP_REVIEW}"
                    echo "Max Retries: ${params.MAX_RETRIES}"
                    echo "Cost Limit: \$${params.COST_LIMIT_USD} USD"
                    echo "Log Level: ${params.LOG_LEVEL}"
                }
            }
        }

        stage('Setup Environment') {
            steps {
                script {
                    echo "========================================="
                    echo "Stage: Setup Environment"
                    echo "========================================="

                    // Python環境確認
                    sh """
                        echo "Python version:"
                        ${env.PYTHON_PATH} --version

                        echo ""
                        echo "pip version:"
                        ${env.PYTHON_PATH} -m pip --version
                    """

                    // 依存パッケージインストール
                    dir(env.WORKFLOW_DIR) {
                        sh """
                            echo "Installing dependencies..."
                            ${env.PYTHON_PATH} -m pip install --user -r requirements.txt
                            ${env.PYTHON_PATH} -m pip install --user -r requirements-test.txt
                        """
                    }
                }
            }
        }

        stage('Initialize Workflow') {
            steps {
                script {
                    echo "========================================="
                    echo "Stage: Initialize Workflow"
                    echo "========================================="

                    dir(env.WORKFLOW_DIR) {
                        if (params.DRY_RUN) {
                            echo "[DRY RUN] ワークフロー初期化をスキップ"
                        } else {
                            // ワークフロー初期化
                            sh """
                                ${env.PYTHON_PATH} main.py init --issue-url ${params.ISSUE_URL}
                            """

                            // metadata.json確認
                            sh """
                                echo "metadata.json created:"
                                cat ../../.ai-workflow/issue-${env.ISSUE_NUMBER}/metadata.json
                            """
                        }
                    }
                }
            }
        }

        stage('Phase 1: Requirements') {
            steps {
                script {
                    echo "========================================="
                    echo "Stage: Phase 1 - Requirements Definition"
                    echo "========================================="

                    dir(env.WORKFLOW_DIR) {
                        if (params.DRY_RUN) {
                            echo "[DRY RUN] Phase 1実行をスキップ"
                        } else {
                            // Phase実行（execute + review統合）
                            sh """
                                ${env.PYTHON_PATH} main.py run \
                                    --phase requirements \
                                    --issue ${env.ISSUE_NUMBER}
                            """
                        }
                    }
                }
            }
        }

        stage('Phase 2: Design') {
            steps {
                script {
                    echo "========================================="
                    echo "Stage: Phase 2 - Detailed Design"
                    echo "========================================="

                    dir(env.WORKFLOW_DIR) {
                        if (params.DRY_RUN) {
                            echo "[DRY RUN] Phase 2実行をスキップ"
                        } else {
                            sh """
                                ${env.PYTHON_PATH} main.py run \
                                    --phase design \
                                    --issue ${env.ISSUE_NUMBER}
                            """
                        }
                    }
                }
            }
        }

        stage('Phase 3: Test Scenario') {
            steps {
                script {
                    echo "========================================="
                    echo "Stage: Phase 3 - Test Scenario"
                    echo "========================================="

                    dir(env.WORKFLOW_DIR) {
                        if (params.DRY_RUN) {
                            echo "[DRY RUN] Phase 3実行をスキップ"
                        } else {
                            sh """
                                ${env.PYTHON_PATH} main.py run \
                                    --phase test_scenario \
                                    --issue ${env.ISSUE_NUMBER}
                            """
                        }
                    }
                }
            }
        }

        stage('Phase 4: Implementation') {
            steps {
                script {
                    echo "========================================="
                    echo "Stage: Phase 4 - Implementation"
                    echo "========================================="

                    dir(env.WORKFLOW_DIR) {
                        if (params.DRY_RUN) {
                            echo "[DRY RUN] Phase 4実行をスキップ"
                        } else {
                            sh """
                                ${env.PYTHON_PATH} main.py run \
                                    --phase implementation \
                                    --issue ${env.ISSUE_NUMBER}
                            """
                        }
                    }
                }
            }
        }

        stage('Phase 5: Testing') {
            steps {
                script {
                    echo "========================================="
                    echo "Stage: Phase 5 - Testing"
                    echo "========================================="

                    dir(env.WORKFLOW_DIR) {
                        if (params.DRY_RUN) {
                            echo "[DRY RUN] Phase 5実行をスキップ"
                        } else {
                            sh """
                                ${env.PYTHON_PATH} main.py run \
                                    --phase testing \
                                    --issue ${env.ISSUE_NUMBER}
                            """
                        }
                    }
                }
            }
        }

        stage('Phase 6: Documentation') {
            steps {
                script {
                    echo "========================================="
                    echo "Stage: Phase 6 - Documentation"
                    echo "========================================="

                    dir(env.WORKFLOW_DIR) {
                        if (params.DRY_RUN) {
                            echo "[DRY RUN] Phase 6実行をスキップ"
                        } else {
                            sh """
                                ${env.PYTHON_PATH} main.py run \
                                    --phase documentation \
                                    --issue ${env.ISSUE_NUMBER}
                            """
                        }
                    }
                }
            }
        }

        stage('Phase 7: Report') {
            steps {
                script {
                    echo "========================================="
                    echo "Stage: Phase 7 - Report Generation"
                    echo "========================================="

                    dir(env.WORKFLOW_DIR) {
                        if (params.DRY_RUN) {
                            echo "[DRY RUN] Phase 7実行をスキップ"
                        } else {
                            sh """
                                ${env.PYTHON_PATH} main.py run \
                                    --phase report \
                                    --issue ${env.ISSUE_NUMBER}
                            """
                        }
                    }
                }
            }
        }

        stage('Create Pull Request') {
            steps {
                script {
                    echo "========================================="
                    echo "Stage: Create Pull Request"
                    echo "========================================="

                    echo "[未実装] PR自動作成は今後の拡張で実装予定"

                    // 将来の実装イメージ:
                    // if (!params.DRY_RUN) {
                    //     sh """
                    //         gh pr create \\
                    //             --title "[AI-Workflow] Issue #${env.ISSUE_NUMBER}" \\
                    //             --body "自動生成されたPRです" \\
                    //             --base main \\
                    //             --head feature/issue-${env.ISSUE_NUMBER}
                    //     """
                    // }
                }
            }
        }
    }

    post {
        success {
            script {
                echo "========================================="
                echo "✅ AI Workflow 成功"
                echo "========================================="
                echo "Issue: ${params.ISSUE_URL}"
                echo "Workflow Directory: .ai-workflow/issue-${env.ISSUE_NUMBER}"

                // 成果物をアーカイブ
                dir('.ai-workflow') {
                    archiveArtifacts artifacts: "issue-${env.ISSUE_NUMBER}/**/*", allowEmptyArchive: true
                }
            }
        }

        failure {
            script {
                echo "========================================="
                echo "❌ AI Workflow 失敗"
                echo "========================================="
                echo "Issue: ${params.ISSUE_URL}"
                echo "ログを確認してください"

                // 失敗時もメタデータをアーカイブ
                dir('.ai-workflow') {
                    archiveArtifacts artifacts: "issue-${env.ISSUE_NUMBER}/**/*", allowEmptyArchive: true
                }
            }
        }

        always {
            script {
                // クリーンアップ（オプション）
                echo "========================================="
                echo "Cleanup"
                echo "========================================="

                // 一時ファイルの削除など
                // 注意: .ai-workflowは残す（成果物として保持）
            }
        }
    }
}
