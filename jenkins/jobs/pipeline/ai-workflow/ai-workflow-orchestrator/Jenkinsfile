/**
 * AI Workflow Orchestrator - Jenkinsfile
 *
 * GitHub IssueからPR作成まで、Claude AIによる自動開発を実行
 *
 * パラメータ（Job DSLで定義）:
 * - ISSUE_URL: GitHub Issue URL（必須）
 * - EXECUTION_MODE: 実行モード（デフォルト: all_phases）
 *   - all_phases: 全フェーズを一括実行（推奨）
 *   - single_phase: 特定フェーズのみ実行（デバッグ用）
 * - START_PHASE: 開始フェーズ（single_phaseモード時のみ有効、デフォルト: planning）
 * - FORCE_RESET: 強制リセット（デフォルト: false）
 * - DRY_RUN: ドライランモード（デフォルト: false）
 * - SKIP_REVIEW: レビュースキップ（デフォルト: false）
 * - MAX_RETRIES: 最大リトライ回数（デフォルト: 3）
 * - COST_LIMIT_USD: コスト上限USD（デフォルト: 5.0）
 * - LOG_LEVEL: ログレベル（デフォルト: INFO）
 * - GIT_COMMIT_USER_NAME: Gitコミット時のユーザー名（デフォルト: AI Workflow Bot）
 * - GIT_COMMIT_USER_EMAIL: Gitコミット時のメールアドレス（デフォルト: ai-workflow@example.com）
 *
 * 認証情報（Jenkins Credentialsで設定）:
 * - claude-code-oauth-token: Claude Agent SDK用OAuthトークン（必須）
 * - openai-api-key: ContentParser用OpenAI APIキー（必須）
 * - github-token: GitHub API用トークン（必須）
 *
 * 重要: パラメータ定義はこのファイルでは行いません（Job DSLで定義済み）
 *
 * 実行モードの説明:
 * - all_phases: node dist/index.js execute --phase all を実行
 *   - Phase 0-9を順次実行（planning → requirements → ... → evaluation）
 *   - resume機能により、失敗したフェーズから自動再開
 *   - --force-resetフラグで最初から実行し直すことも可能
 * - single_phase: node dist/index.js execute --phase {START_PHASE} を実行
 *   - 指定されたフェーズのみ実行（デバッグ用）
 */

// Jenkins共有ライブラリ（将来実装）
// @Library('jenkins-shared-library') _

pipeline {
    agent {
        dockerfile {
            label 'ec2-fleet'
            dir 'scripts/ai-workflow-v2'
            filename 'Dockerfile'
            args '-v ${WORKSPACE}:/workspace -w /workspace -e CLAUDE_DANGEROUSLY_SKIP_PERMISSIONS=1 -e OPENAI_API_KEY=${OPENAI_API_KEY} -e GITHUB_TOKEN=${GITHUB_TOKEN} -e CODEX_AUTH_FILE=/home/node/.codex/auth.json -e CLAUDE_CODE_CREDENTIALS_PATH=/home/node/.claude-code/credentials.json'
        }
    }

    options {
        // タイムスタンプ表示
        timestamps()

        // カラー出力
        ansiColor('xterm')
    }

    environment {
        // Node.js実行環境
        NODE_ENV = 'production'

        // Claude Agent SDK設定（Bashコマンド承認スキップ）
        CLAUDE_DANGEROUSLY_SKIP_PERMISSIONS = '1'
        CLAUDE_CODE_CREDENTIALS_PATH = "/home/node/.claude-code/credentials.json"

        // AI Workflow設定
        WORKFLOW_DIR = 'scripts/ai-workflow-v2'
        WORKFLOW_VERSION = '2.0.0'

        // Git設定（Job DSLパラメータから環境変数に設定）
        GIT_COMMIT_USER_NAME = "${params.GIT_COMMIT_USER_NAME}"
        GIT_COMMIT_USER_EMAIL = "${params.GIT_COMMIT_USER_EMAIL}"

        // Codex CLI�p�F�؃t�@�C���̃p�X
        CODEX_AUTH_FILE = "/home/node/.codex/auth.json"

        // 認証情報（Jenkinsクレデンシャルから取得）
        OPENAI_API_KEY = credentials('openai-api-key')
        GITHUB_TOKEN = credentials('github-token')
    }

    stages {
        stage('Prepare Agent Credentials') {
            steps {
                script {
                    echo "========================================="
                    echo "Stage: Prepare Agent Credentials"
                    echo "========================================="

                    def homeDir = env.HOME ?: '/home/node'
                    def codexTarget = "${homeDir}/.codex/auth.json"
                    def claudeTarget = "${homeDir}/.claude-code/credentials.json"

                    def needCodex = !fileExists(codexTarget)
                    def needClaude = !fileExists(claudeTarget)

                    if (needCodex || needClaude) {
                        echo '[INFO] Requesting agent credential files from user...'
                        def uploadParams = input(
                            message: 'Upload agent credential files (Base64 encoded). Leave empty to reuse existing files.',
                            ok: 'Upload',
                            parameters: [
                                base64File(name: 'codexAuthB64', description: 'Codex CLI authentication file (auth.json)'),
                                base64File(name: 'claudeCredsB64', description: 'Claude Code credentials file (credentials.json)')
                            ]
                        )

                        def codexValue = ''
                        def claudeValue = ''
                        if (uploadParams instanceof Map) {
                            codexValue = (uploadParams['codexAuthB64'] ?: '').toString().trim()
                            claudeValue = (uploadParams['claudeCredsB64'] ?: '').toString().trim()
                        } else if (uploadParams) {
                            codexValue = uploadParams.toString().trim()
                        }

                        if (codexValue) {
                            withEnv(["CODEX_FILE_B64=${codexValue}"]) {
                                sh '''
                                    mkdir -p ~/.codex
                                    printf "%s" "$CODEX_FILE_B64" | base64 -d > ~/.codex/auth.json
                                    chmod 600 ~/.codex/auth.json
                                '''
                            }
                        }

                        if (claudeValue) {
                            withEnv(["CLAUDE_FILE_B64=${claudeValue}"]) {
                                sh '''
                                    mkdir -p ~/.claude-code
                                    printf "%s" "$CLAUDE_FILE_B64" | base64 -d > ~/.claude-code/credentials.json
                                    chmod 600 ~/.claude-code/credentials.json
                                '''
                            }
                        }
                    } else {
                        echo '[INFO] Reusing previously uploaded agent credential files.'
                    }

                    sh 'mkdir -p ~/.codex ~/.claude-code'
                }
            }
        }


        stage('Validate Parameters') {
            steps {
                script {
                    echo "========================================="
                    echo "AI Workflow Orchestrator v${env.WORKFLOW_VERSION}"
                    echo "========================================="

                    // パラメータ検証
                    if (!params.ISSUE_URL) {
                        error("ISSUE_URL パラメータが必須です")
                    }

                    if (!params.ISSUE_URL.startsWith('https://github.com/')) {
                        error("ISSUE_URL は GitHub Issue URLである必要があります: ${params.ISSUE_URL}")
                    }

                    // Issue番号抽出
                    def urlParts = params.ISSUE_URL.split('/')
                    env.ISSUE_NUMBER = urlParts[-1]

                    echo "Issue URL: ${params.ISSUE_URL}"
                    echo "Issue Number: ${env.ISSUE_NUMBER}"
                    echo "GitHub Repository: ${params.GITHUB_REPOSITORY}"
                    echo "Start Phase: ${params.START_PHASE}"
                    echo "Dry Run: ${params.DRY_RUN}"
                    echo "Skip Review: ${params.SKIP_REVIEW}"
                    echo "Max Retries: ${params.MAX_RETRIES}"
                    echo "Cost Limit: \$${params.COST_LIMIT_USD} USD"
                    echo "Log Level: ${params.LOG_LEVEL}"
                    echo "Git Commit User Name: ${params.GIT_COMMIT_USER_NAME}"
                    echo "Git Commit User Email: ${params.GIT_COMMIT_USER_EMAIL}"
                }
            }
        }

        stage('Setup Environment') {
            steps {
                script {
                    echo "========================================="
                    echo "Stage: Setup Environment"
                    echo "========================================="

                    // Git checkout: Detached HEADを回避するため、ブランチに明示的にcheckout
                    sh """
                        # 現在のブランチを確認
                        BRANCH_NAME=\$(git rev-parse --abbrev-ref HEAD)
                        echo "Current branch: \$BRANCH_NAME"

                        # Detached HEADの場合、feature/ai-workflow-mvpにcheckout
                        if [ "\$BRANCH_NAME" = "HEAD" ]; then
                            echo "Detached HEAD detected. Checking out feature/ai-workflow-mvp..."
                            git checkout -B feature/ai-workflow-mvp
                        fi
                    """

                    // Node.js環境確認（コンテナ内の実行環境を確認）
                    dir(env.WORKFLOW_DIR) {
                        sh """
                            echo "Node version:"
                            node --version

                            echo ""
                            echo "npm version:"
                            npm --version

                            echo ""
                            echo "Current user: \$(whoami)"
                            echo "HOME directory: \$HOME"

                            echo ""
                            echo "Installing dependencies (including dev)..."
                            npm install --include=dev

                            echo ""
                            echo "Building TypeScript sources..."
                            npm run build
                        """
                    }
                }
            }
        }

        stage('Initialize Workflow') {
            steps {
                script {
                    echo "========================================="
                    echo "Stage: Initialize Workflow"
                    echo "========================================="

                    dir(env.WORKFLOW_DIR) {
                        if (params.DRY_RUN) {
                            echo "[DRY RUN] ワークフロー初期化をスキップ"
                        } else {
                            // ワークフロー初期化またはマイグレーション
                            // - metadata.jsonが存在しない場合: 新規作成
                            // - metadata.jsonが存在する場合: スキーママイグレーション実行
                            sh """
                                node dist/index.js init --issue-url ${params.ISSUE_URL}
                            """
                        }
                    }
                }
            }
        }

        stage('Execute All Phases') {
            when {
                expression { params.EXECUTION_MODE == 'all_phases' }
            }
            steps {
                script {
                    echo "========================================="
                    echo "Stage: Execute All Phases"
                    echo "========================================="
                    echo "Execution Mode: ${params.EXECUTION_MODE}"
                    echo "Force Reset: ${params.FORCE_RESET}"

                    dir(env.WORKFLOW_DIR) {
                        if (params.DRY_RUN) {
                            echo "[DRY RUN] 全フェーズ実行をスキップ"
                        } else {
                            // TypeScript版 CLI の --phase all を実行
                            // resume機能により、失敗したフェーズから自動再開
                            def forceResetFlag = params.FORCE_RESET ? '--force-reset' : ''

                            sh """
                                node dist/index.js execute \
                                    --phase all \
                                    --issue ${env.ISSUE_NUMBER} \
                                    ${forceResetFlag}
                            """
                        }
                    }
                }
            }
        }

        stage('Execute Single Phase') {
            when {
                expression { params.EXECUTION_MODE == 'single_phase' }
            }
            steps {
                script {
                    echo "========================================="
                    echo "Stage: Execute Single Phase - ${params.START_PHASE}"
                    echo "========================================="
                    echo "Execution Mode: ${params.EXECUTION_MODE}"
                    echo "Target Phase: ${params.START_PHASE}"

                    dir(env.WORKFLOW_DIR) {
                        if (params.DRY_RUN) {
                            echo "[DRY RUN] Phase ${params.START_PHASE}実行をスキップ"
                        } else {
                            // 指定されたフェーズのみ実行
                            sh """
                                node dist/index.js execute \
                                    --phase ${params.START_PHASE} \
                                    --issue ${env.ISSUE_NUMBER}
                            """
                        }
                    }
                }
            }
        }

        stage('Create Pull Request') {
            steps {
                script {
                    echo "========================================="
                    echo "Stage: Create Pull Request"
                    echo "========================================="

                    echo "[未実装] PR自動作成は今後の拡張で実装予定"

                    // 将来の実装イメージ:
                    // if (!params.DRY_RUN) {
                    //     sh """
                    //         gh pr create \\
                    //             --title "[AI-Workflow] Issue #${env.ISSUE_NUMBER}" \\
                    //             --body "自動生成されたPRです" \\
                    //             --base main \\
                    //             --head feature/issue-${env.ISSUE_NUMBER}
                    //     """
                    // }
                }
            }
        }
    }

    post {
        success {
            script {
                echo "========================================="
                echo "✅ AI Workflow 成功"
                echo "========================================="
                echo "Issue: ${params.ISSUE_URL}"
                echo "Workflow Directory: .ai-workflow/issue-${env.ISSUE_NUMBER}"

                // 成果物をアーカイブ
                dir('.ai-workflow') {
                    archiveArtifacts artifacts: "issue-${env.ISSUE_NUMBER}/**/*", allowEmptyArchive: true
                }
            }
        }

        failure {
            script {
                echo "========================================="
                echo "❌ AI Workflow 失敗"
                echo "========================================="
                echo "Issue: ${params.ISSUE_URL}"
                echo "ログを確認してください"

                // 失敗時もメタデータをアーカイブ
                dir('.ai-workflow') {
                    archiveArtifacts artifacts: "issue-${env.ISSUE_NUMBER}/**/*", allowEmptyArchive: true
                }
            }
        }

        always {
            script {
                // クリーンアップ（オプション）
                echo "========================================="
                echo "Cleanup"
                echo "========================================="

                // 一時ファイルの削除など
                // 注意: .ai-workflowは残す（成果物として保持）
            }
        }
    }
}
